<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>hydd&#39;s blog</title>
  
  
  <link href="http://hydd.cf/atom.xml" rel="self"/>
  
  <link href="http://hydd.cf/"/>
  <updated>2020-12-10T13:27:34.965Z</updated>
  <id>http://hydd.cf/</id>
  
  <author>
    <name>hydd</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>NOIP2020 题解</title>
    <link href="http://hydd.cf/2020/12/10/sol_28/"/>
    <id>http://hydd.cf/2020/12/10/sol_28/</id>
    <published>2020-12-09T16:00:00.000Z</published>
    <updated>2020-12-10T13:27:34.965Z</updated>
    
    <content type="html"><![CDATA[<h3 id="排水系统（water）"><a href="#排水系统（water）" class="headerlink" title="排水系统（water）"></a>排水系统（water）</h3><ul><li>先把前 $m$ 个的权值设为 $1$。</li><li>拓扑排序，将它的权值平分给它所有的出点。</li><li>输出所有出度为 $0$ 的点的权值。</li></ul><ul><li>这个思路没有错，但题目里说起点到终点中间点数不超过 $10$，也就是分母可以达到 $60^{11}$。</li><li>这样就要写高精度，但是高精度 $\gcd$ 不是一件容易的事情。</li><li>有这么一种处理方法：钦定所有权值的分母都为 $60^{11}$，到最后再约分。因为分母一定是 $60^{11}$ 的约数。</li><li>那么，过程中只要做高精度除单精度，高精度加高精度即可。</li><li>最后约分的话，因为分母是 $2^{22}\times 3^{11}\times 5^{11}$，直接判断原数是不是 $2,3,5$ 的倍数，试除即可。</li><li>高精度可以直接压 $10^{11}$ 进制，那么这个高精度数的四则运算是 $O(1)$ 的。（只需两个 $\texttt{long long}$ 存）</li><li>代码并不长。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll lim=<span class="number">100000000000l</span>l;<span class="comment">//1e11</span></span><br><span class="line"><span class="keyword">int</span> n,m,d[<span class="number">110000</span>],ind[<span class="number">110000</span>],v[<span class="number">110000</span>][<span class="number">6</span>];</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; que;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="comment">//x%lim, x/lim</span></span><br><span class="line">ll v[<span class="number">2</span>];</span><br><span class="line">node()&#123;</span><br><span class="line">v[<span class="number">0</span>]=<span class="number">0l</span>l; v[<span class="number">1</span>]=<span class="number">0l</span>l;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</span><br><span class="line">v[<span class="number">0</span>]=<span class="number">0l</span>l; v[<span class="number">1</span>]=<span class="number">362797056l</span>l;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">div</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">v[<span class="number">0</span>]=((v[<span class="number">1</span>]%x)*lim+v[<span class="number">0</span>])/x;</span><br><span class="line">v[<span class="number">1</span>]=v[<span class="number">1</span>]/x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">const</span> node &amp;x)</span></span>&#123;</span><br><span class="line">v[<span class="number">0</span>]+=x.v[<span class="number">0</span>]; v[<span class="number">1</span>]+=x.v[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span> (v[<span class="number">0</span>]&gt;=lim) v[<span class="number">0</span>]-=lim,v[<span class="number">1</span>]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check2</span><span class="params">()</span> <span class="keyword">const</span></span>&#123; <span class="keyword">return</span> !(v[<span class="number">0</span>]&amp;<span class="number">1</span>);&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check3</span><span class="params">()</span></span>&#123; <span class="keyword">return</span> !((v[<span class="number">0</span>]+v[<span class="number">1</span>])%<span class="number">3</span>);&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check5</span><span class="params">()</span></span>&#123; <span class="keyword">return</span> !(v[<span class="number">0</span>]%<span class="number">5</span>);&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (v[<span class="number">1</span>]) <span class="built_in">printf</span>(<span class="string">&quot;%lld%011lld&quot;</span>,v[<span class="number">1</span>],v[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,v[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125; a[<span class="number">110000</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(node x)</span></span>&#123;</span><br><span class="line">node y; y.work();</span><br><span class="line"><span class="keyword">if</span> (!x.v[<span class="number">0</span>]&amp;&amp;!x.v[<span class="number">1</span>])&#123; <span class="built_in">puts</span>(<span class="string">&quot;0 1&quot;</span>); <span class="keyword">return</span>;&#125;<span class="comment">//这里其实不用特判</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">22</span>;i++)</span><br><span class="line"><span class="keyword">if</span> (x.check2())&#123;</span><br><span class="line">x.div(<span class="number">2</span>);</span><br><span class="line">y.div(<span class="number">2</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">11</span>;i++)</span><br><span class="line"><span class="keyword">if</span> (x.check3())&#123;</span><br><span class="line">x.div(<span class="number">3</span>);</span><br><span class="line">y.div(<span class="number">3</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">11</span>;i++)</span><br><span class="line"><span class="keyword">if</span> (x.check5())&#123;</span><br><span class="line">x.div(<span class="number">5</span>);</span><br><span class="line">y.div(<span class="number">5</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">x.print(); <span class="built_in">putchar</span>(<span class="string">&#x27; &#x27;</span>); y.print(); <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//freopen(&quot;water.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line"><span class="comment">//freopen(&quot;water.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) a[i].work();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> u=<span class="number">1</span>;u&lt;=n;u++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;d[u]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;d[u];i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;v[u][i]);</span><br><span class="line">ind[v[u][i]]++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">if</span> (!ind[i]) que.push(i);</span><br><span class="line"><span class="keyword">while</span> (!que.empty())&#123;</span><br><span class="line"><span class="keyword">int</span> u=que.front(); que.pop();</span><br><span class="line"><span class="keyword">if</span> (!d[u]) <span class="keyword">continue</span>;</span><br><span class="line">a[u].div(d[u]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;d[u];i++)&#123;</span><br><span class="line">a[v[u][i]].add(a[u]);</span><br><span class="line">ind[v[u][i]]--;</span><br><span class="line"><span class="keyword">if</span> (!ind[v[u][i]]) que.push(v[u][i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">if</span> (!d[i]) print(a[i]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字符串匹配（string）"><a href="#字符串匹配（string）" class="headerlink" title="字符串匹配（string）"></a>字符串匹配（string）</h3><ul><li>枚举 $AB$ 的长度 $len$。用桶维护当前 $F(A)=0,1,2,\cdots,26$ 有多少个。</li><li>在从左往右扫的过程中，二分求出 $i_{\max}$ 表示最大的 $i$ 满足原串可以表示为 $(AB)^iC$。（$AB$ 的长为 $len$）</li><li>那么，对于 $i=1,3,5,\cdots$，它们对应的 $F(C)$ 都一样；对于 $i=2,4,6,\cdots$，它们对应的 $F(C)$ 也一样。</li><li>可以直接求前缀和计算答案，但是维护前缀和不能用树状数组，这样会多一个 $\log$。可以用两个指针分别维护 $i$ 为奇数和偶数的前缀和，每次，奇数的指针，$F(C)$ 的变化量为 $1$，偶数的指针变化量为 $0/2$，所以是常数复杂度。</li><li>总时间复杂度为 $O(T\sum_{i=1}^n \log(\frac n i))=O(Tn)$。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Mod1=<span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Mod2=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> bas1=<span class="number">233</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> bas2=<span class="number">23333</span>;</span><br><span class="line"><span class="keyword">int</span> T,n,tot[<span class="number">31</span>],num[<span class="number">31</span>],F[<span class="number">1100000</span>]; <span class="keyword">char</span> s[<span class="number">1100000</span>];</span><br><span class="line">ll hs0[<span class="number">1100000</span>],hs1[<span class="number">1100000</span>],p0[<span class="number">1100000</span>],p1[<span class="number">1100000</span>],ans;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> l0,<span class="keyword">int</span> r0,<span class="keyword">int</span> l1,<span class="keyword">int</span> r1)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (hs0[r0]+(Mod1-p0[r0-l0])*hs0[l0])%Mod1==(hs0[r1]+(Mod1-p0[r1-l1])*hs0[l1])%Mod1</span><br><span class="line">&amp;&amp; (hs1[r0]+(Mod2-p1[r0-l0])*hs1[l0])%Mod2==(hs1[r1]+(Mod2-p1[r1-l1])*hs1[l1])%Mod2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> pos0,s0,pos1,s1;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">num[x]++;</span><br><span class="line"><span class="keyword">if</span> (x&lt;=pos0) s0++;</span><br><span class="line"><span class="keyword">if</span> (x&lt;=pos1) s1++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">gets0</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span> (pos0&lt;x) pos0++,s0+=num[pos0];</span><br><span class="line"><span class="keyword">while</span> (pos0&gt;x) s0-=num[pos0],pos0--;</span><br><span class="line"><span class="keyword">return</span> s0;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">gets1</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span> (pos1&lt;x) pos1++,s1+=num[pos1];</span><br><span class="line"><span class="keyword">while</span> (pos1&gt;x) s1-=num[pos1],pos1--;</span><br><span class="line"><span class="keyword">return</span> s1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initF</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">26</span>;i++) tot[i]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> tmp=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=n;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line">tmp-=tot[s[i]-<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">tot[s[i]-<span class="string">&#x27;a&#x27;</span>]^=<span class="number">1</span>;</span><br><span class="line">tmp+=tot[s[i]-<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">F[i]=tmp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">pos0=<span class="number">0</span>; s0=<span class="number">0</span>; pos1=<span class="number">0</span>; s1=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">26</span>;i++) tot[i]=<span class="number">0</span>,num[i]=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> tmp=<span class="number">1</span>; tot[s[<span class="number">1</span>]-<span class="string">&#x27;a&#x27;</span>]=<span class="number">1</span>;</span><br><span class="line">ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;n;i++)&#123;</span><br><span class="line">add(tmp);</span><br><span class="line"></span><br><span class="line">tmp-=tot[s[i]-<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">tot[s[i]-<span class="string">&#x27;a&#x27;</span>]^=<span class="number">1</span>;</span><br><span class="line">tmp+=tot[s[i]-<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> l=<span class="number">0</span>,r=(n<span class="number">-1</span>)/i<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">while</span> (l&lt;r)&#123;</span><br><span class="line"><span class="keyword">int</span> mid=(l+r+<span class="number">1</span>)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (check(<span class="number">0</span>,mid*i,i,(mid+<span class="number">1</span>)*i)) l=mid;</span><br><span class="line"><span class="keyword">else</span> r=mid<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ans+=gets0(F[i+<span class="number">1</span>])*(r/<span class="number">2</span>+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="number">2</span>*i+<span class="number">1</span>&lt;=n) ans+=gets1(F[<span class="number">2</span>*i+<span class="number">1</span>])*((r+<span class="number">1</span>)/<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//freopen(&quot;string.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line"><span class="comment">//freopen(&quot;string.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">p0[<span class="number">0</span>]=<span class="number">1</span>; p1[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">1000005</span>;i++) p0[i]=p0[i<span class="number">-1</span>]*bas1%Mod1;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">1000005</span>;i++) p1[i]=p1[i<span class="number">-1</span>]*bas2%Mod2;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;T);</span><br><span class="line"><span class="keyword">while</span> (T--)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s+<span class="number">1</span>); n=(<span class="keyword">int</span>)<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">hs0[i]=(hs0[i<span class="number">-1</span>]*bas1+(s[i]-<span class="string">&#x27;a&#x27;</span>+<span class="number">1</span>))%Mod1;</span><br><span class="line">hs1[i]=(hs1[i<span class="number">-1</span>]*bas2+(s[i]-<span class="string">&#x27;a&#x27;</span>+<span class="number">1</span>))%Mod2;</span><br><span class="line">&#125;</span><br><span class="line">initF(); solve();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="移球游戏（ball）"><a href="#移球游戏（ball）" class="headerlink" title="移球游戏（ball）"></a>移球游戏（ball）</h3><ul><li>分治。假设现在 $[l,r]$ 的球在 $[l,r]$ 的柱子上，要让 $[l,mid]$ 的球在 $[l,mid]$ 的柱子上。</li><li>如果可以使得 $[l,mid]$ 中那些 $[mid+1,r]$ 的球放到当前堆的最上面，$[mid+1,r]$ 中那些 $[l,mid]$ 的球放到当前堆的最上面，那么就可以通过 $n+1$ 堆两两交换，满足条件。</li><li>有一种方法，在不改变其它堆的球情况下，把当前堆所有“要移动的球”移到最上面。</li><li>具体做法，先随便取一个不为当前堆的临时堆 $tmp$：</li></ul><ol><li>统计当前堆要放到最上面的球的个数 $a$。</li><li>判断是否需要移动，即是否要移的已经在最上面（其实这步也可以不需要）。</li><li>把 $tmp$ 中移 $a$ 个球到 $n+1$。（现在 $tmp$ 空余 $a$ 个位置，$n+1$ 空余 $m-a$ 个位置）</li><li>将当前堆的球依次移出，其中“要移动的球”放到 $tmp$，其它球放到 $n+1$，直到当前堆为空。（现在 $tmp$ 和 $n+1$ 满了）</li><li>将 $n+1$ 中最上面的 $m-a$ 个球移回当前堆。（这些球显然是原来当前堆的球，$n+1$ 还剩 $a$ 个球）</li><li>将 $tmp$ 中最上面的 $a$ 个球移回当前堆。（这些球显然是原来当前堆的球，$tmp$ 还剩 $m-a$ 个球，当前堆满了）</li><li>将 $n+1$ 的 $a$ 个球移回当前堆。（这些球显然是原来当前堆的球，$tmp$ 满了，$n+1$ 空了）</li></ol><ul><li>分析一下可以发现，当前堆要移的球到了当前堆的最上面，其它堆没有变化（$tmp$ 中的球也是按移出的顺序移回的）。</li><li>之后，就可以枚举右边的每一个堆，让它和左边的堆的球交换即可。这可以简单的实现。</li><li>那么就可以分治下去做这个过程了。当 $l=r$ 时，则代表颜色为 $l$ 的球已经在柱子 $l$ 上，直接返回即可。</li><li>操作次数/时间复杂度为 $O(n\log n\times m)$。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,a[<span class="number">55</span>][<span class="number">410</span>],sz[<span class="number">55</span>],tot[<span class="number">55</span>];</span><br><span class="line"><span class="keyword">int</span> ans,Ansx[<span class="number">1100000</span>],Ansy[<span class="number">1100000</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mymove</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> k=<span class="number">1</span>)</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span> (k--)&#123;</span><br><span class="line">ans++; Ansx[ans]=x; Ansy[ans]=y;</span><br><span class="line">sz[y]++;</span><br><span class="line">a[y][sz[y]]=a[x][sz[x]];</span><br><span class="line">sz[x]--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (tot[x]&gt;tot[y]) swap(x,y);</span><br><span class="line">mymove(y,n+<span class="number">1</span>,tot[y]);</span><br><span class="line">mymove(x,y,tot[x]);</span><br><span class="line">mymove(n+<span class="number">1</span>,x,tot[x]);</span><br><span class="line">mymove(n+<span class="number">1</span>,y,tot[y]-tot[x]);</span><br><span class="line">tot[y]-=tot[x]; tot[x]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (l==r) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>,tmp;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=l;i&lt;=r;i++)&#123;</span><br><span class="line">tmp=(i==l?r:l); tot[i]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=m;j&gt;=<span class="number">1</span>;j--)</span><br><span class="line"><span class="keyword">if</span> ((i&lt;=mid)!=(a[i][j]&lt;=mid)) tot[i]++;</span><br><span class="line">mymove(tmp,n+<span class="number">1</span>,tot[i]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=m;j&gt;=<span class="number">1</span>;j--)</span><br><span class="line"><span class="keyword">if</span> ((i&lt;=mid)!=(a[i][j]&lt;=mid)) mymove(i,tmp);</span><br><span class="line"><span class="keyword">else</span> mymove(i,n+<span class="number">1</span>);</span><br><span class="line">mymove(n+<span class="number">1</span>,i,m-tot[i]); mymove(tmp,i,tot[i]); mymove(n+<span class="number">1</span>,tmp,tot[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> j=l;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=mid+<span class="number">1</span>;i&lt;=r;i++)</span><br><span class="line"><span class="keyword">while</span> (tot[i])&#123;</span><br><span class="line"><span class="keyword">while</span> (j&lt;=mid&amp;&amp;!tot[j]) j++;</span><br><span class="line">work(i,j);</span><br><span class="line">&#125;</span><br><span class="line">solve(l,mid); solve(mid+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//freopen(&quot;ball.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line"><span class="comment">//freopen(&quot;ball.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i][j]);</span><br><span class="line">sz[i]=m;</span><br><span class="line">&#125;</span><br><span class="line">solve(<span class="number">1</span>,n);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=ans;i++) <span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>,Ansx[i],Ansy[i]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="微信步数（walk）"><a href="#微信步数（walk）" class="headerlink" title="微信步数（walk）"></a>微信步数（walk）</h3><ul><li>首先，如果在第一轮或第二轮直接走完，那么模拟即可。</li><li>如果模拟两轮之后没有走完，记第一轮结束时，每一维合法的坐标数分别为 $a_i$，第二轮结束时，每一维合法的坐标数分别为 $b_i$，那么第 $k(k\geq 2)$ 轮结束后，每一维合法的坐标数分别为 $b_i-(a_i-b_i)\times k$。</li><li>那么，枚举 $i$，表示现在计算在第 $t+2(t\geq 1)$ 轮（满足 $t+2$ 轮后仍合法）第 $i$ 步之后的答案之和。</li><li>然后式子就类似于 $\sum_{x=1}^t\prod_j (tot[j][i]-(a[j]-b[j])*x)$。其中 $tot[j][i]$ 表示第一轮做完后，第二轮做了 $i$ 步，第 $j$ 维剩下的合法坐标数。</li><li>这个 $t$ 是可以计算出来的，即 $\min_{j,b[j]\neq 0} \frac{a[j][i]}{b[j]}$。</li><li>将 $x$ 看做一个变量，求出 $f(x)=\prod_j (tot[j][i]-(a[j]-b[j])*x)$ 的表达式，设其为 $f(x)=\sum_i c_ix^i$，那么答案即为 $\sum_i c_i(\sum_{x=1}^tx^i)$，后面这个是个自然数幂之和的形式。</li><li>当 $k\leq 3$ 时，自然数幂和有简洁的式子。</li><li>当 $k&gt;3$ 时，那么 $t\leq \max w_i=10^6$，可以直接预处理自然数幂和。</li><li>总时间复杂度 $O(nk^2)$，可以优化求 $f(x)$ 的过程（即每次的变化量极少）可以做到 $O(nk)$。</li><li>只给出 $O(nk^2)$ 的实现。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inv2=(Mod+<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inv6=(Mod+<span class="number">1</span>)/<span class="number">6</span>;</span><br><span class="line"><span class="keyword">int</span> n,k,w[<span class="number">1100000</span>],c[<span class="number">1100000</span>],d[<span class="number">1100000</span>];</span><br><span class="line"><span class="keyword">int</span> b[<span class="number">1100000</span>],a[<span class="number">11</span>][<span class="number">1100000</span>];</span><br><span class="line"><span class="keyword">int</span> L[<span class="number">1100000</span>],R[<span class="number">1100000</span>],l[<span class="number">1100000</span>],r[<span class="number">1100000</span>];</span><br><span class="line">ll ans,num[<span class="number">11</span>][<span class="number">1100000</span>],f[<span class="number">1100000</span>],g[<span class="number">1100000</span>];</span><br><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll x,<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line">ll res=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (a)&#123;</span><br><span class="line"><span class="keyword">if</span> (a&amp;<span class="number">1</span>) res=res*x%Mod;</span><br><span class="line">x=x*x%Mod; a&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">sqr</span><span class="params">(ll x)</span></span>&#123; <span class="keyword">return</span> x*x%Mod;&#125;</span><br><span class="line"><span class="function">ll <span class="title">calc</span><span class="params">(<span class="keyword">int</span> k,ll x)</span></span>&#123;<span class="comment">//1^k+2^k+3^k+...+x^k</span></span><br><span class="line"><span class="keyword">switch</span> (k)&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>: <span class="keyword">return</span> x;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>: <span class="keyword">return</span> (x*(x+<span class="number">1</span>)%Mod*inv2%Mod);</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>: <span class="keyword">return</span> (x*(x+<span class="number">1</span>)%Mod*(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>)%Mod*inv6%Mod);</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>: <span class="keyword">return</span> sqr(x*(x+<span class="number">1</span>)%Mod*inv2%Mod);</span><br><span class="line"><span class="keyword">default</span>: <span class="keyword">return</span> num[k<span class="number">-4</span>][x];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">ll tmp;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">1000000</span>;i++)&#123;</span><br><span class="line">tmp=sqr(i); tmp=sqr(tmp);</span><br><span class="line">num[<span class="number">0</span>][i]=(num[<span class="number">0</span>][i<span class="number">-1</span>]+tmp)%Mod; tmp=tmp*i%Mod;</span><br><span class="line">num[<span class="number">1</span>][i]=(num[<span class="number">1</span>][i<span class="number">-1</span>]+tmp)%Mod; tmp=tmp*i%Mod;</span><br><span class="line">num[<span class="number">2</span>][i]=(num[<span class="number">2</span>][i<span class="number">-1</span>]+tmp)%Mod; tmp=tmp*i%Mod;</span><br><span class="line">num[<span class="number">3</span>][i]=(num[<span class="number">3</span>][i<span class="number">-1</span>]+tmp)%Mod; tmp=tmp*i%Mod;</span><br><span class="line">num[<span class="number">4</span>][i]=(num[<span class="number">4</span>][i<span class="number">-1</span>]+tmp)%Mod; tmp=tmp*i%Mod;</span><br><span class="line">num[<span class="number">5</span>][i]=(num[<span class="number">5</span>][i<span class="number">-1</span>]+tmp)%Mod; tmp=tmp*i%Mod;</span><br><span class="line">num[<span class="number">6</span>][i]=(num[<span class="number">6</span>][i<span class="number">-1</span>]+tmp)%Mod;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> flag;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//freopen(&quot;walk.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line"><span class="comment">//freopen(&quot;walk.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">init();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;k); ll now=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;w[i]);</span><br><span class="line">L[i]=<span class="number">1</span>; R[i]=w[i];</span><br><span class="line">now=now*w[i]%Mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;c[i],&amp;d[i]);</span><br><span class="line"><span class="keyword">bool</span> flag=<span class="literal">false</span>;</span><br><span class="line">ans=now;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">now=now*qpow(R[c[i]]-L[c[i]]+<span class="number">1</span>,Mod<span class="number">-2</span>)%Mod;</span><br><span class="line">L[c[i]]+=d[i]; R[c[i]]+=d[i];</span><br><span class="line">L[c[i]]=max(L[c[i]],<span class="number">1</span>); R[c[i]]=min(R[c[i]],w[c[i]]);</span><br><span class="line"><span class="keyword">if</span> (L[c[i]]&gt;R[c[i]])&#123;</span><br><span class="line">flag=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">now=now*(R[c[i]]-L[c[i]]+<span class="number">1</span>)%Mod;</span><br><span class="line">ans=(ans+now)%Mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (flag)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++) b[i]=R[i]-L[i]+<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">flag=<span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">now=now*qpow(R[c[i]]-L[c[i]]+<span class="number">1</span>,Mod<span class="number">-2</span>)%Mod;</span><br><span class="line">L[c[i]]+=d[i]; R[c[i]]+=d[i];</span><br><span class="line">L[c[i]]=max(L[c[i]],<span class="number">1</span>); R[c[i]]=min(R[c[i]],w[c[i]]);</span><br><span class="line"><span class="keyword">if</span> (L[c[i]]&gt;R[c[i]])&#123;</span><br><span class="line">flag=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">now=now*(R[c[i]]-L[c[i]]+<span class="number">1</span>)%Mod;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=k;j++) a[j][i]=R[j]-L[j]+<span class="number">1</span>;</span><br><span class="line">ans=(ans+now)%Mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (flag)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++)&#123;</span><br><span class="line">b[i]-=(R[i]-L[i]+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (b[i]) flag=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!flag)&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="comment">//\prod_j a[j][i]-b[j]  +  \prod_j a[j][i]-b[j]*2  + ... + a[j][i]-b[j]*t</span></span><br><span class="line"><span class="comment">//a[j][i]-b[i]*t=0   ==&gt;   t=a[j][i]/b[j]</span></span><br><span class="line"><span class="keyword">int</span> tmp=INF;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=k;j++)</span><br><span class="line"><span class="keyword">if</span> (b[j]) tmp=min(tmp,a[j][i]/b[j]);</span><br><span class="line"><span class="comment">//\prod_j a[j][i]-b[j]*x</span></span><br><span class="line"></span><br><span class="line">f[<span class="number">0</span>]=<span class="number">1</span>; <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=k;j++) f[j]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=k;j++)&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> t=<span class="number">0</span>;t&lt;j;t++)&#123;</span><br><span class="line">g[t]=(g[t]+f[t]*a[j][i])%Mod;<span class="comment">//long long !!!</span></span><br><span class="line">g[t+<span class="number">1</span>]=(g[t+<span class="number">1</span>]+f[t]*(Mod-b[j])%Mod)%Mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> t=<span class="number">0</span>;t&lt;=j;t++) f[t]=g[t],g[t]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=k;j++) ans=(ans+f[j]*calc(j,tmp))%Mod;<span class="comment">//long long !!!</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;排水系统（water）&quot;&gt;&lt;a href=&quot;#排水系统（water）&quot; class=&quot;headerlink&quot; title=&quot;排水系统（water）&quot;&gt;&lt;/a&gt;排水系统（water）&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;先把前 $m$ 个的权值设为 $1$。&lt;/li&gt;
&lt;li</summary>
      
    
    
    
    <category term="NOIP2020" scheme="http://hydd.cf/categories/NOIP2020/"/>
    
    
  </entry>
  
  <entry>
    <title>NOIP2020 参赛总结</title>
    <link href="http://hydd.cf/2020/12/08/sum_7/"/>
    <id>http://hydd.cf/2020/12/08/sum_7/</id>
    <published>2020-12-07T16:00:00.000Z</published>
    <updated>2020-12-10T13:29:42.487Z</updated>
    
    <content type="html"><![CDATA[<h3 id="T1"><a href="#T1" class="headerlink" title="T1"></a>T1</h3><ul><li>考试时，感觉这个题比较奇怪，理解题意之后就会发现，把出边数存下来，然后按照拓扑序依次往后推流即可。</li><li>当时以为是起点到终点路径长度不超过 $10$，然后算了一下 $60^{10}$ 是 $\rm long\ long$ 级别的，就开了 $\rm long\ long$。</li></ul><h3 id="T2"><a href="#T2" class="headerlink" title="T2"></a>T2</h3><ul><li>感觉是只能枚举 $C$ 的，就往枚举 $C$ 的想。</li><li>开始一直在想关于 $kmp$ 的 $next$ 数组和循环节之类的方法去做，想了很久没想出来。</li><li>但是感觉 $T3,T4$ 都不太好做，回来想 $T2$。</li><li>开始想的是不停的跳 $next$（$AB$），如果是个循环节就把答案加上这个 $AB$ 的拆分方案数。</li><li>后来发现好像直接枚举约数即可，然后可以倒过来枚举倍数，记一维表示这个 $AB$ 中每个 $F(A)$ 的个数，那么直接转移是 $O(n\ln n|\Sigma|)$ 的，写了一个循环展开优化。</li><li>因为这题想了比较久了，就写完去看后两题了，感觉 $T3$ 可以做，就去做 $T3$ 了。</li><li>$T3$ 极限数据测完后突然想到了，往后跳的时候，每个后缀的 $F$ 是固定的，可以 $O(1)$ 预处理后计算。但只有不到 $5$ 分钟，来不及写了。</li></ul><h3 id="T3"><a href="#T3" class="headerlink" title="T3"></a>T3</h3><ul><li>刚开始想了很长时间 $O(n^2m)$ 的做法。写的过程中发现了很多问题，一个一个解决。</li><li>有一个写错的：要先保证一个堆没有颜色为 $n$ 的球，这个我是一个一个删的，写了很长的时间，细节很多。</li><li>写完过了三个样例，然后直接去写 $T4$。</li><li>写完 $T4$ 后，测了极限数据，发现最后一部分的复杂度不对，但是不会改。</li></ul><h3 id="T4"><a href="#T4" class="headerlink" title="T4"></a>T4</h3><ul><li>最后没时间了。</li><li>感觉有一些性质，比如除了第一个 $n$ 次以外，以后每一个 $n$ 次，每一维的减少量是一样的。</li><li>只写了一个暴力一次一次跑的。</li></ul><p>出考场的时候估分：$100+68+40+30$。当时认为 $T2$ 分数可能变高（循环展开理论上是常数复杂度？）</p><p>考试结束之后看 $uoj$ 群里发现群友在讨论 $T1$，才知道自己挂了，要开高精度，可以被卡到 $60$。自己写法也是先乘后除，分数可能比先出后乘低一些（但最后低 $30$ 是没想到的）。</p><p>$T2$ 的确分数变高到 $84$，$T4$ 分数也变高到了 $35$。总分 $60+84+40+35=219$。</p><h3 id="这次发现的问题"><a href="#这次发现的问题" class="headerlink" title="这次发现的问题"></a>这次发现的问题</h3><ul><li>策略问题：花费了大量时间在 $T3$，尤其是写了一段时间，发现要加复杂度不确定的代码，还没停止做这题，导致最后时间不足，没有写出 $T2$，$T4$ 没拿到更高的分数。</li><li>调试问题：现在考场用的还是 $\texttt{Dev-C++ 5.9.2}$，调试时直接按停止执行会使得程序无法退出（包括使用任务管理器），必须要关闭 $\texttt{Dev-C++}$ 后重新打开，这很耗时间，并带来了撤销和保存等一系列的麻烦。</li><li>读题问题：没有发现是起点到终点之间的点数不超过 $10$，而不是它们的距离。</li></ul><h3 id="今后努力方向"><a href="#今后努力方向" class="headerlink" title="今后努力方向"></a>今后努力方向</h3><ol><li>参加更多模拟赛，提升对做题时间的评估能力，训练自己的做题策略。</li><li>学习更多的算法，做更多不同的题，提升自己的能力（像 $T2$ 可能学过扩展 $kmp$ 就比较容易做？开始也往字符串算法想但是想不出来）。</li><li>训练自己的调试，使在不同版本下也能顺利调试。</li><li>学习文化课课程，开拓自己的思维，训练思维深度和广度。</li></ol><h3 id="吐槽"><a href="#吐槽" class="headerlink" title="吐槽"></a>吐槽</h3><ul><li>感觉 $CCF$ 的题目风格变化很大：<ul><li>$2018$ 年 $NOIP$：贪心，$dp$，二分，$LCA$，搜索，数学，倍增。</li><li>$2019$ 年 $CSP$：递归、树、并查集、贪心、dp、单调队列、高精度乘法、树剖</li><li>$2020$ 年 $NOIP$：高精度 $\gcd$、拓扑排序、二分、哈希（循环节性质）、分治、构造、贪心、多项式、自然数幂和。</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;T1&quot;&gt;&lt;a href=&quot;#T1&quot; class=&quot;headerlink&quot; title=&quot;T1&quot;&gt;&lt;/a&gt;T1&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;考试时，感觉这个题比较奇怪，理解题意之后就会发现，把出边数存下来，然后按照拓扑序依次往后推流即可。&lt;/li&gt;
&lt;li&gt;当时以为是</summary>
      
    
    
    
    <category term="NOIP2020" scheme="http://hydd.cf/categories/NOIP2020/"/>
    
    
  </entry>
  
  <entry>
    <title>CF477E</title>
    <link href="http://hydd.cf/2020/12/01/sol_27/"/>
    <id>http://hydd.cf/2020/12/01/sol_27/</id>
    <published>2020-11-30T16:00:00.000Z</published>
    <updated>2020-12-03T10:14:00.345Z</updated>
    
    <content type="html"><![CDATA[<p>记 $c$ 为 $r_1$ 和 $r_2$ 之间的行（包括 $r_1$ 和 $r_2$）之间 $a$ 数组的最小值。</p><h4 id="Case-1"><a href="#Case-1" class="headerlink" title="Case 1"></a>Case 1</h4><ul><li>先按Home键，再上/下移到目标行，再往右移到目标列。</li><li>$(r1,c1)  \xrightarrow{Home} (r1,1)  \xrightarrow{Down/Up…}  (r2,1)  \xrightarrow{Right…}  (r2,c2)$</li><li>这个答案为 $|q[i].r1-q[i].r2|+q[i].c2+1$。</li></ul><h4 id="Case-2"><a href="#Case-2" class="headerlink" title="Case 2"></a>Case 2</h4><ul><li>直接上/下移到目标行，在过程中最多按一次End，再左/右移动到目标列。不妨设 $r_1\leq r_2$ </li><li>$(r1,c1)  \xrightarrow{Down/up…} (x,y) \xrightarrow{End} (x,a_x)\xrightarrow{Down/up…} (r2,\min(c1,c)) \xrightarrow{Left/Right…}  (r2,c2)$</li></ul><ol><li><p>中途不按End键，</p><p>答案为 $|q[i].r2-q[i].r1|+|\min(c,q[i].c1)-q[i].c2|$。</p></li><li><p>中途按End键，</p><p>维护 $a_i$ 的单调栈，$a_i$ 在单调栈内说明它为后缀最小值。</p><p>在下标 $r_1$ 到 $r_1$ 范围内，选择单调栈中最接近 $a_i$ 的两行计算答案。</p></li></ol><ul><li>$r_1&gt;r_2$ 可以将原图上下翻转后再做。</li></ul><h4 id="Case-3"><a href="#Case-3" class="headerlink" title="Case 3"></a>Case 3</h4><ul><li>从 $r_1$ 开始往上走（需要满足到达的 $r&lt;r_2$），到达一行，然后可以按一次End，再往下到 $r_2$ 行。</li><li>$(r1,c1) \xrightarrow{Up…} (x,y) \xrightarrow{End} (x,a_x) \xrightarrow{Down…} (r2,c2)$</li></ul><ol><li>$a_i&gt;c_2$，$2*(r_1-i)+|r_2-r_1|+(a_i-c_2)$，使用线段树维护 $a_i-2i$ 的最小值</li><li>$a_i\leq c_2$，$2*(r_1-i)+|r_2-r_1|+(c_2-a_i)$，使用线段树维护 $2i-a_i$ 的最小值</li></ol><ul><li>讨论 $a_i$ 和 $c$ 的大小关系，$a_i&gt;c$ 则需要额外按一次End按键。</li></ul><h4 id="Case-4"><a href="#Case-4" class="headerlink" title="Case 4"></a>Case 4</h4><ul><li>从 $r_1$ 开始往下走（需要满足到达的 $r&gt;r_2$），到达一行，然后可以按一次End，再往上到 $r_2$ 行。</li><li>可以将原图上下翻转后再做 Case 3。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls now&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs now&lt;&lt;1|1</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> n,Q,a[<span class="number">410000</span>],Log2[<span class="number">410000</span>],Ans[<span class="number">410000</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> r1,c1,r2,c2,id;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> node &amp;a) <span class="keyword">const</span>&#123; <span class="keyword">return</span> r2&lt;a.r2;&#125;</span><br><span class="line">&#125; q[<span class="number">410000</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Segment_Tree</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> tree[<span class="number">1210000</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> now,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">tree[now]=INF;</span><br><span class="line"><span class="keyword">if</span> (l==r) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">build(ls,l,mid); build(rs,mid+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> now,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (l==r)&#123;</span><br><span class="line">tree[now]=v;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (x&lt;=mid) change(ls,l,mid,x,v);</span><br><span class="line"><span class="keyword">else</span> change(rs,mid+<span class="number">1</span>,r,x,v);</span><br><span class="line">tree[now]=min(tree[ls],tree[rs]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> now,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x&gt;y) <span class="keyword">return</span> INF;</span><br><span class="line"><span class="keyword">if</span> (x&lt;=l&amp;&amp;r&lt;=y) <span class="keyword">return</span> tree[now];</span><br><span class="line"><span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>,res=INF;</span><br><span class="line"><span class="keyword">if</span> (x&lt;=mid) res=min(res,query(ls,l,mid,x,y));</span><br><span class="line"><span class="keyword">if</span> (y&gt;mid) res=min(res,query(rs,mid+<span class="number">1</span>,r,x,y));</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">&#125; T1,T2;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ST</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> mn[<span class="number">21</span>][<span class="number">410000</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) mn[<span class="number">0</span>][i]=a[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">20</span>;j++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i+(<span class="number">1</span>&lt;&lt;j)<span class="number">-1</span>&lt;=n;i++)</span><br><span class="line">mn[j][i]=min(mn[j<span class="number">-1</span>][i],mn[j<span class="number">-1</span>][i+(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>))]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (l&gt;r) swap(l,r);</span><br><span class="line"><span class="keyword">int</span> k=Log2[r-l+<span class="number">1</span>];</span><br><span class="line"><span class="keyword">return</span> min(mn[k][l],mn[k][r-(<span class="number">1</span>&lt;&lt;k)+<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125; s;</span><br><span class="line"><span class="keyword">int</span> top,st[<span class="number">410000</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="comment">//x in st   &lt;=&gt;   suffix min</span></span><br><span class="line"><span class="keyword">while</span> (top&amp;&amp;a[st[top]]&gt;a[x]) top--;</span><br><span class="line">st[++top]=x;</span><br><span class="line">T1.change(<span class="number">1</span>,<span class="number">1</span>,n,top,<span class="number">-2</span>*x+a[x]);</span><br><span class="line">T2.change(<span class="number">1</span>,<span class="number">1</span>,n,top,<span class="number">-2</span>*x-a[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find_pos1</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> l=<span class="number">1</span>,r=top,res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (l&lt;=r)&#123;</span><br><span class="line"><span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (st[mid]&lt;=x) res=mid,l=mid+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> r=mid<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find_pos2</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> l=<span class="number">1</span>,r=top,res=top+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (l&lt;=r)&#123;</span><br><span class="line"><span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (st[mid]&gt;=x) res=mid,r=mid<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">else</span> l=mid+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find_num</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> res=r+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (l&lt;=r)&#123;</span><br><span class="line"><span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (a[st[mid]]&gt;v) res=mid,r=mid<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">else</span> l=mid+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">a_i&gt;c_2: 2*(r_1-i)+abs(r_2-r_1)+(a_i-c_2)</span></span><br><span class="line"><span class="comment">a_i&lt;=c_2: 2*(r_1-i)+abs(r_2-r_1)+(c_2-a_i)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">upd</span><span class="params">(node u)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> pos=find_pos2(u.r1);<span class="comment">//the first (pos&gt;=u.r1) in stack</span></span><br><span class="line"><span class="keyword">int</span> x=find_num(pos+<span class="number">1</span>,top,u.c2);<span class="comment">//the first (num&gt;c2) in stack</span></span><br><span class="line"><span class="keyword">int</span> v1=INF,v2=INF;</span><br><span class="line"><span class="keyword">if</span> (x&gt;<span class="number">1</span>&amp;&amp;st[x<span class="number">-1</span>]&gt;=u.r1) v1=<span class="built_in">abs</span>(u.r2-u.r1)+<span class="built_in">abs</span>(a[st[x<span class="number">-1</span>]]-u.c2)+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (x&lt;=top&amp;&amp;st[x]&gt;=u.r1) v2=<span class="built_in">abs</span>(u.r2-u.r1)+<span class="built_in">abs</span>(a[st[x]]-u.c2)+<span class="number">1</span>;</span><br><span class="line">Ans[u.id]=min(Ans[u.id],min(v1,v2));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">upd1</span><span class="params">(node u)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> c=min(u.c1,s.query(u.r1,u.r2)); upd(u);</span><br><span class="line"><span class="keyword">int</span> pos=find_pos1(u.r1);<span class="comment">//the last (pos&lt;=u.r1) in stack</span></span><br><span class="line"><span class="keyword">int</span> x=find_num(<span class="number">1</span>,pos,c);<span class="comment">//the first (num&gt;c) in stack</span></span><br><span class="line"><span class="keyword">int</span> y=find_num(<span class="number">1</span>,pos,u.c2);<span class="comment">//the first (num&gt;q.c2) in stack</span></span><br><span class="line"><span class="keyword">int</span> v1=INF,v2=INF;</span><br><span class="line"><span class="keyword">if</span> (c&gt;=u.c2)&#123;</span><br><span class="line"><span class="comment">//(num&gt;c) is worse than Case 2</span></span><br><span class="line">v1=T1.query(<span class="number">1</span>,<span class="number">1</span>,n,y,x<span class="number">-1</span>)+<span class="number">2</span>*u.r1+<span class="built_in">abs</span>(u.r2-u.r1)-u.c2;<span class="comment">//a_i&gt;c2</span></span><br><span class="line">v2=T2.query(<span class="number">1</span>,<span class="number">1</span>,n,<span class="number">1</span>,y<span class="number">-1</span>)+<span class="number">2</span>*u.r1+<span class="built_in">abs</span>(u.r2-u.r1)+u.c2;<span class="comment">//a_i&lt;=c2</span></span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//Up and not End is worse than Case 2</span></span><br><span class="line"><span class="comment">//(num&lt;=c) is worse than Case 2</span></span><br><span class="line">v1=T1.query(<span class="number">1</span>,<span class="number">1</span>,n,y,pos)+<span class="number">2</span>*u.r1+<span class="built_in">abs</span>(u.r2-u.r1)-u.c2+<span class="number">1</span>;<span class="comment">//a_i&gt;c2</span></span><br><span class="line">v2=T2.query(<span class="number">1</span>,<span class="number">1</span>,n,x,y<span class="number">-1</span>)+<span class="number">2</span>*u.r1+<span class="built_in">abs</span>(u.r2-u.r1)+u.c2+<span class="number">1</span>;<span class="comment">//a_i&lt;=c2</span></span><br><span class="line">&#125;</span><br><span class="line">Ans[u.id]=min(Ans[u.id],min(v1,v2));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">upd2</span><span class="params">(node u)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> c=min(u.c1,s.query(u.r1,u.r2));</span><br><span class="line"><span class="keyword">int</span> pos=find_pos1(u.r2);<span class="comment">//the last (pos&lt;=u.r2) in stack</span></span><br><span class="line"><span class="keyword">int</span> x=find_num(<span class="number">1</span>,pos,c);<span class="comment">//the first (num&gt;c) in stack</span></span><br><span class="line"><span class="keyword">int</span> y=find_num(<span class="number">1</span>,pos,u.c2);<span class="comment">//the first (num&gt;q.c2) in stack</span></span><br><span class="line"><span class="keyword">int</span> v1,v2;</span><br><span class="line"><span class="keyword">if</span> (c&gt;=u.c2)&#123;</span><br><span class="line"><span class="comment">//(num&gt;c) is worse than Case 2</span></span><br><span class="line">v1=T1.query(<span class="number">1</span>,<span class="number">1</span>,n,y,x<span class="number">-1</span>)+<span class="number">2</span>*u.r2+<span class="built_in">abs</span>(u.r2-u.r1)-u.c2;<span class="comment">//a_i&gt;c2</span></span><br><span class="line">v2=T2.query(<span class="number">1</span>,<span class="number">1</span>,n,<span class="number">1</span>,y<span class="number">-1</span>)+<span class="number">2</span>*u.r2+<span class="built_in">abs</span>(u.r2-u.r1)+u.c2;<span class="comment">//a_i&lt;=c2</span></span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//Up and not End is worse than Case 2</span></span><br><span class="line"><span class="comment">//(num&lt;=c) is worse than Case 2</span></span><br><span class="line">v1=T1.query(<span class="number">1</span>,<span class="number">1</span>,n,y,pos)+<span class="number">2</span>*u.r2+<span class="built_in">abs</span>(u.r2-u.r1)-u.c2+<span class="number">1</span>;<span class="comment">//a_i&gt;c2</span></span><br><span class="line">v2=T2.query(<span class="number">1</span>,<span class="number">1</span>,n,x,y<span class="number">-1</span>)+<span class="number">2</span>*u.r2+<span class="built_in">abs</span>(u.r2-u.r1)+u.c2+<span class="number">1</span>;<span class="comment">//a_i&lt;=c2</span></span><br><span class="line">&#125;</span><br><span class="line">Ans[u.id]=min(Ans[u.id],min(v1,v2));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">s.init();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=Q;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> c=s.query(q[i].r1,q[i].r2);</span><br><span class="line">Ans[q[i].id]=min(Ans[q[i].id],<span class="built_in">abs</span>(q[i].r2-q[i].r1)+<span class="built_in">abs</span>(min(c,q[i].c1)-q[i].c2));</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Case 2: Down/up - (End) - Left/Right</span></span><br><span class="line"><span class="comment">(r1,c1)  -Down/up...- (x,?) -End- (x,a_x) -Down/up...- (r2,min(c1,c)) -Left/Right...-  (r2,c2)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br><span class="line">sort(q+<span class="number">1</span>,q+Q+<span class="number">1</span>);</span><br><span class="line">T1.build(<span class="number">1</span>,<span class="number">1</span>,n); T2.build(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line"><span class="keyword">int</span> j=<span class="number">1</span>; top=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">push(i);</span><br><span class="line"><span class="keyword">for</span> (;j&lt;=Q&amp;&amp;q[j].r2==i;j++)</span><br><span class="line"><span class="keyword">if</span> (q[j].r1&lt;=q[j].r2) upd1(q[j]);</span><br><span class="line"><span class="keyword">else</span> upd2(q[j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">Log2[<span class="number">1</span>]=<span class="number">0</span>; <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++) Log2[i]=Log2[i&gt;&gt;<span class="number">1</span>]+<span class="number">1</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;Q);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=Q;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>,&amp;q[i].r1,&amp;q[i].c1,&amp;q[i].r2,&amp;q[i].c2);</span><br><span class="line">q[i].id=i; Ans[i]=<span class="built_in">abs</span>(q[i].r1-q[i].r2)+q[i].c2+<span class="number">1</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Case 1: Home - Down/Up - Right</span></span><br><span class="line"><span class="comment">(r1,c1)  -Home-  (r1,1)  -Down/Up...-  (r2,1)  -Right...-  (r2,c2)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Case 3: Up... - (End) - Down...</span></span><br><span class="line"><span class="comment">(r1,c1) -Up...- (?,?) -(End) - (?,?) - Down... (r2,c2)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">solve();</span><br><span class="line"><span class="comment">//for (int i=1;i&lt;=Q;i++) printf(&quot;%d &quot;,Ans[i]);</span></span><br><span class="line"></span><br><span class="line">reverse(a+<span class="number">1</span>,a+n+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=Q;i++)&#123;</span><br><span class="line">q[i].r1=n-q[i].r1+<span class="number">1</span>;</span><br><span class="line">q[i].r2=n-q[i].r2+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Case 4: Down... - (End) - Up...</span></span><br><span class="line"><span class="comment">(r1,c1) -Down...- (?,?) -(End) - (?,?) - Up... (r2,c2)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">solve();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=Q;i++) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,Ans[i]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;记 $c$ 为 $r_1$ 和 $r_2$ 之间的行（包括 $r_1$ 和 $r_2$）之间 $a$ 数组的最小值。&lt;/p&gt;
&lt;h4 id=&quot;Case-1&quot;&gt;&lt;a href=&quot;#Case-1&quot; class=&quot;headerlink&quot; title=&quot;Case 1&quot;&gt;&lt;/a&gt;Ca</summary>
      
    
    
    
    <category term="数据结构" scheme="http://hydd.cf/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="线段树" scheme="http://hydd.cf/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
    <category term="ST表" scheme="http://hydd.cf/tags/ST%E8%A1%A8/"/>
    
    <category term="单调栈" scheme="http://hydd.cf/tags/%E5%8D%95%E8%B0%83%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://hydd.cf/2020/11/16/some_algorithm/"/>
    <id>http://hydd.cf/2020/11/16/some_algorithm/</id>
    <published>2020-11-16T07:09:59.855Z</published>
    <updated>2020-11-16T07:31:02.048Z</updated>
    
    <content type="html"><![CDATA[<h3 id="数据生成"><a href="#数据生成" class="headerlink" title="数据生成"></a>数据生成</h3><h4 id="problem-1"><a href="#problem-1" class="headerlink" title="problem 1"></a>problem 1</h4><p>在 $N\times N$ 的平面内生成若干个无三点共线的点（$x,y\in[0,N)$ ）。</p><p>构造法：</p><ul><li>对于任意一个二次函数 $f(x)=ax^2+bx+c,N\nmid a$。</li><li>可以证明，$(t,f(t) \bmod N)$ 不存在三点共线。</li></ul><ul><li>证明：</li><li>假设横坐标为 $x_1,x_2,x_3$ 的三个点三点共线，不妨设 $0\leq x_1&lt;x_2&lt;x_3&lt; N$。</li><li>那么，有 $\frac{f(x_2)-f(x_1)}{x_2-x_1}\equiv \frac{f(x_3)-f(x_2)}{x_3-x_2}\pmod N$，即 $\frac{a(x_2^2-x_1^2)+b(x_2-x_1)}{x_2-x_1}\equiv \frac{a(x_3^2-x_2^2)+a_2(x_3-x_2)}{x_3-x_2}\pmod N$。</li><li>整理可得 $a(x_1+x_2)+b\equiv a(x_2+x_3)+b\pmod N$，化简得 $x_1=x_3\pmod N$，矛盾。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;数据生成&quot;&gt;&lt;a href=&quot;#数据生成&quot; class=&quot;headerlink&quot; title=&quot;数据生成&quot;&gt;&lt;/a&gt;数据生成&lt;/h3&gt;&lt;h4 id=&quot;problem-1&quot;&gt;&lt;a href=&quot;#problem-1&quot; class=&quot;headerlink&quot; title=</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>超立方体</title>
    <link href="http://hydd.cf/2020/11/13/sol_26/"/>
    <id>http://hydd.cf/2020/11/13/sol_26/</id>
    <published>2020-11-12T16:00:00.000Z</published>
    <updated>2020-11-13T02:26:49.931Z</updated>
    
    <content type="html"><![CDATA[<p>设 $g_S$ 表示一维中相交情况为 $S$ 的方案数。（当 $n=3$ 时，$001$ 代表 $1,2$ 不相交，$1,3$ 不相交，$2,3$ 相交）</p><p>可以用搜索搜出所有 $g_S$，但是不同的搜索方法各自有一些问题：</p><ol><li><p>直接搜 $l_i,r_i$，但是这样复杂度太高，$m=6$ 过不去。</p></li><li><p>搜的时候保证 $(l_i,r_i)\leq(l_{i+1},r_{i+1})$，最后再枚举排列，但是这样的话有可能会算重（有可能有 $l_i=l_{i+1}$ 且 $r_i=r_{i+1}$）。</p></li><li>搜的时候保证 $(l_i,r_i)&lt;(l_{i+1},r_{i+1})$，但是这样少算了有区间相同的情况。</li></ol><p>其实 $2,3$ 种方法应该都可以做，下面讲讲如果用第 $3$ 种搜法怎么做。</p><p>首先，枚举 $t$ 表示有 $t$ 个本质不同的区间（$l$ 不同或 $r$ 不同的区间视为本质不同）</p><p>然后，搜索 $(l_i,r_i),1\leq i\leq t$，求出在 $(l_i,r_i)&lt;(l_{i+1},r_{i+1})$ 的条件下，相交情况为 $s$ 的方案数，记作 $f_S$。</p><p>最后，枚举原问题的第 $i(1\leq i\leq m)$ 个区间是搜索出的哪个 $(l_j,r_j),1\leq j\leq t$，要求每个 $(l_j,r_j)$ 至少被选了一次，然后算出每种相交情况的方案数，记作 $g_S$。</p><p>算出 $g_S$ 后就解决了一维的情况，现在要求 $k$ 维的情况下两两不相交的方案数。</p><p>记 $h_S=\sum_{S\subseteq T} g_T$，即一维时相交情况至少是 $S$ 的方案数。</p><p>那么 $k$ 维时相交情况至少为 $S$ 的方案数是 $h_S^k$。再容斥回来就可以得到 $k$ 维是相交情况为 $0$ 的方案数，即答案。</p><p>这个容斥过程其实是 $FMT$。时间复杂度 $O(2^\binom{m}{2}\binom{m}{2}+T(m))$，$T(m)$ 为搜索的时间复杂度。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">int</span> n,m,k,upperlim,tmp,tot[<span class="number">45</span>],id[<span class="number">45</span>]; <span class="keyword">bool</span> vis[<span class="number">45</span>];</span><br><span class="line"><span class="keyword">int</span> f[<span class="number">110000</span>],g[<span class="number">110000</span>],C[<span class="number">45</span>],num[<span class="number">45</span>][<span class="number">45</span>],numm[<span class="number">45</span>][<span class="number">45</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span> <span class="keyword">int</span> l,r; &#125; p[<span class="number">45</span>];</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">Getchar</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> now[<span class="number">1</span>&lt;&lt;<span class="number">20</span>],*S,*T;</span><br><span class="line"><span class="keyword">if</span> (T==S)&#123;</span><br><span class="line">T=(S=now)+fread(now,<span class="number">1</span>,<span class="number">1</span>&lt;&lt;<span class="number">20</span>,<span class="built_in">stdin</span>);</span><br><span class="line"><span class="keyword">if</span> (T==S) <span class="keyword">return</span> EOF;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> *S++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> ch=Getchar();</span><br><span class="line"><span class="keyword">while</span> (ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">if</span> (ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">-1</span>;</span><br><span class="line">ch=Getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (ch&lt;=<span class="string">&#x27;9&#x27;</span>&amp;&amp;ch&gt;=<span class="string">&#x27;0&#x27;</span>) x=x*<span class="number">10</span>+ch-<span class="string">&#x27;0&#x27;</span>,ch=Getchar();</span><br><span class="line"><span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> dep,<span class="keyword">int</span> pos,<span class="keyword">int</span> lst)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (dep==(m&lt;&lt;<span class="number">1</span>|<span class="number">1</span>))&#123;<span class="comment">//所有括号都放完了</span></span><br><span class="line"><span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line"><span class="keyword">if</span> (p[i].r&gt;=p[j].l) res|=(<span class="number">1</span>&lt;&lt;num[i][j]);</span><br><span class="line">f[res]=(f[res]+C[pos])%Mod;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line"><span class="keyword">if</span> (!vis[i])&#123;</span><br><span class="line">vis[i]=<span class="literal">true</span>;</span><br><span class="line">p[i].l=pos+<span class="number">1</span>; dfs(dep+<span class="number">1</span>,pos+<span class="number">1</span>,i);</span><br><span class="line"><span class="keyword">if</span> (dep&gt;<span class="number">1</span>&amp;&amp;i&gt;lst)&#123;</span><br><span class="line">p[i].l=pos;</span><br><span class="line">dfs(dep+<span class="number">1</span>,pos,i);</span><br><span class="line">&#125;</span><br><span class="line">vis[i]=<span class="literal">false</span>;</span><br><span class="line"><span class="comment">//先放左括号，再放右括号，左括号从小到大放，右括号从小到大放</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line"><span class="keyword">if</span> (vis[i]&amp;&amp;!vis[i+m])&#123;</span><br><span class="line"><span class="keyword">if</span> (vis[i<span class="number">-1</span>]&amp;&amp;p[i].l==p[i<span class="number">-1</span>].l&amp;&amp;!vis[i<span class="number">-1</span>+m]) <span class="keyword">continue</span>;</span><br><span class="line">vis[i+m]=<span class="literal">true</span>;</span><br><span class="line"><span class="comment">//二元关系严格&lt;，左括号位置相同的必须编号小的先放</span></span><br><span class="line">p[i].r=pos+<span class="number">1</span>; dfs(dep+<span class="number">1</span>,pos+<span class="number">1</span>,i+m);</span><br><span class="line"><span class="keyword">if</span> (dep&gt;<span class="number">1</span>&amp;&amp;i+m&gt;lst)&#123;</span><br><span class="line"><span class="keyword">if</span> (p[i].l==pos||vis[i<span class="number">-1</span>]&amp;&amp;p[i].l==p[i<span class="number">-1</span>].l&amp;&amp;p[i<span class="number">-1</span>].r==pos)&#123; vis[i+m]=<span class="literal">false</span>; <span class="keyword">continue</span>;&#125;</span><br><span class="line">p[i].r=pos;</span><br><span class="line">dfs(dep+<span class="number">1</span>,pos,i+m);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//先放左括号，再放右括号，左括号从小到大放，右括号从小到大放</span></span><br><span class="line">vis[i+m]=<span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> now)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (now==tmp+<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line"><span class="keyword">if</span> (!tot[i]) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> s=<span class="number">0</span>;s&lt;upperlim;s++) <span class="keyword">if</span> (f[s])&#123;</span><br><span class="line"><span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=tmp;i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;=tmp;j++)</span><br><span class="line"><span class="keyword">if</span> (id[i]==id[j]||(s&amp;(<span class="number">1</span>&lt;&lt;num[id[i]][id[j]])))</span><br><span class="line">res|=(<span class="number">1</span>&lt;&lt;numm[i][j]);</span><br><span class="line">g[res]=(g[res]+f[s])%Mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">id[now]=i;</span><br><span class="line">tot[i]++; dfs2(now+<span class="number">1</span>); tot[i]--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll x,ll a)</span></span>&#123;</span><br><span class="line">ll res=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (a)&#123;</span><br><span class="line"><span class="keyword">if</span> (a&amp;<span class="number">1</span>) res=res*x%Mod;</span><br><span class="line">x=x*x%Mod; a&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">freopen(<span class="string">&quot;box.in&quot;</span>,<span class="string">&quot;r&quot;</span>,<span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">&quot;box.out&quot;</span>,<span class="string">&quot;w&quot;</span>,<span class="built_in">stdout</span>);</span><br><span class="line">n=read(); m=read(); k=read();</span><br><span class="line">C[<span class="number">0</span>]=<span class="number">1</span>; <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">2</span>*m;i++) C[i]=<span class="number">1l</span>l*C[i<span class="number">-1</span>]*(n-i+<span class="number">1</span>)%Mod*qpow(i,Mod<span class="number">-2</span>)%Mod;</span><br><span class="line">tmp=m; <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line">numm[i][j]=cnt;</span><br><span class="line">numm[j][i]=cnt;</span><br><span class="line">cnt++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (m=<span class="number">1</span>;m&lt;=tmp;m++)&#123;</span><br><span class="line">cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line">num[i][j]=cnt;</span><br><span class="line">num[j][i]=cnt;</span><br><span class="line">cnt++;</span><br><span class="line">&#125;</span><br><span class="line">upperlim=<span class="number">1</span>&lt;&lt;cnt;</span><br><span class="line"><span class="built_in">memset</span>(f,<span class="number">0</span>,<span class="keyword">sizeof</span>(f));</span><br><span class="line">dfs(<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>); dfs2(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;upperlim;i&lt;&lt;=<span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> s=<span class="number">0</span>;s&lt;upperlim;s++)</span><br><span class="line"><span class="keyword">if</span> (s&amp;i) g[s^i]=(g[s^i]+g[s])%Mod;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> s=<span class="number">0</span>;s&lt;upperlim;s++) g[s]=qpow(g[s],k);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;upperlim;i&lt;&lt;=<span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> s=<span class="number">0</span>;s&lt;upperlim;s++)</span><br><span class="line"><span class="keyword">if</span> (s&amp;i) g[s^i]=(g[s^i]+Mod-g[s])%Mod;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,g[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;设 $g_S$ 表示一维中相交情况为 $S$ 的方案数。（当 $n=3$ 时，$001$ 代表 $1,2$ 不相交，$1,3$ 不相交，$2,3$ 相交）&lt;/p&gt;
&lt;p&gt;可以用搜索搜出所有 $g_S$，但是不同的搜索方法各自有一些问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;直接</summary>
      
    
    
    
    <category term="NOIP模拟赛" scheme="http://hydd.cf/categories/NOIP%E6%A8%A1%E6%8B%9F%E8%B5%9B/"/>
    
    
    <category term="容斥" scheme="http://hydd.cf/tags/%E5%AE%B9%E6%96%A5/"/>
    
    <category term="搜索" scheme="http://hydd.cf/tags/%E6%90%9C%E7%B4%A2/"/>
    
    <category term="FMT" scheme="http://hydd.cf/tags/FMT/"/>
    
  </entry>
  
  <entry>
    <title>CSP-S2020 记录和总结</title>
    <link href="http://hydd.cf/2020/11/13/sum_5/"/>
    <id>http://hydd.cf/2020/11/13/sum_5/</id>
    <published>2020-11-12T16:00:00.000Z</published>
    <updated>2020-11-13T12:45:24.047Z</updated>
    
    <content type="html"><![CDATA[<h3 id="考场策略-amp-时间分配"><a href="#考场策略-amp-时间分配" class="headerlink" title="考场策略&amp;时间分配"></a>考场策略&amp;时间分配</h3><ul><li>看了一遍题目后，认为 T1 大码量题，T2 不是很清楚，T3 神仙题，T4 可能可做。</li><li><p>按照 T1 - T2 - T4 - T3 的顺序开题。</p></li><li><p>T1 用了 1.3 h，刚开始往纯数学方面想，后来发现可以直接枚举 2000 年之前的，然后对后面 %400 处理一下即可。</p></li><li>T2 用了 20 min，刚开始用了 map 实现，后来发现 $q_i$ 互不相同，然后改为二进制或。</li><li>T4 用了大部分时间，刚开始使用堆可以做，然后改为双队列模拟，发现第三个和第四个大样例过不去（有些答案多了1），重新开始想，认为只有 ”第一次在最小值为第二个队列中的数的之后，新加入的值是队列中最小的“ 的个数的奇偶性有关，改了很长时间后才过两个大样例。</li><li>T3 用了剩下的 0.5 h，因为时间不多了，直接打 40pts 暴力，然后发现可以倒过来做，维护每个点能到达的 2 操作的乘积，然后按照拓扑序计算即可，打了一会儿发现来不及，就放弃了并开始检查。然后检查出 T4 的一个错误（它是最小的条件为它比第一个队列的队尾小并且比第二个队列的队尾小，当时只判了和第一个队列的大小关系）。</li></ul><h3 id="出考场后"><a href="#出考场后" class="headerlink" title="出考场后"></a>出考场后</h3><ul><li>发现 lyp 把 T3 A了，仔细想一想 T3 的确比 T4 好写一些。</li><li>还有人说 T2 $k=64,n=0$ 要特判，我没发现，可能要挂分。</li></ul><h3 id="后来发现的问题"><a href="#后来发现的问题" class="headerlink" title="后来发现的问题"></a>后来发现的问题</h3><h4 id="策略问题"><a href="#策略问题" class="headerlink" title="策略问题"></a>策略问题</h4><ul><li>因为 T3 的题面很长，特别是输入格式，而 T1 题目也这么长，再听说上午 J 组 T3 最难，就没有仔细想，去做 T4 了。这是很大的一个判断失误。</li><li>在 T4 70分打完后，先做 100 分，而不是先想/打 T3，也是一个失误。</li></ul><h4 id="细节问题"><a href="#细节问题" class="headerlink" title="细节问题"></a>细节问题</h4><ul><li>T2 当 $k=64$ 时，$1ull&lt;&lt;k$ 的值是 $1$（在 $NOILinux$ 下，这是未定义行为），而我认为是 $0$。当时没有检查 $k=64$ 的情况。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;考场策略-amp-时间分配&quot;&gt;&lt;a href=&quot;#考场策略-amp-时间分配&quot; class=&quot;headerlink&quot; title=&quot;考场策略&amp;amp;时间分配&quot;&gt;&lt;/a&gt;考场策略&amp;amp;时间分配&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;看了一遍题目后，认为 T1 大码量题，T</summary>
      
    
    
    
    <category term="CSP-S2020" scheme="http://hydd.cf/categories/CSP-S2020/"/>
    
    
  </entry>
  
  <entry>
    <title>20201113 记录和总结</title>
    <link href="http://hydd.cf/2020/11/13/sum_6/"/>
    <id>http://hydd.cf/2020/11/13/sum_6/</id>
    <published>2020-11-12T16:00:00.000Z</published>
    <updated>2020-11-13T12:45:55.563Z</updated>
    
    <content type="html"><![CDATA[<h3 id="过程记录"><a href="#过程记录" class="headerlink" title="过程记录"></a>过程记录</h3><ul><li>做题顺序为 T2,T4,T3,T1。</li><li>考试的时候认为 T1 可能会挂，但没有很好的检查方法。</li><li>并没有对拍和极限数据（这个数据实在是太难造了）。</li><li>预计不到 400 分，实际 0+90+50+0。</li><li>T1 的问题：<ol><li>应该只合并有标记的位置</li><li>判断条件为 $u,u+c$ 是否连通，而非是否 $0..2c+1$ 连通</li><li>要清空 $vis$ 数组（注意第二维要清空到 $2c$）</li></ol></li><li>T2 的问题：<ul><li>当 $n=1$ 时，答案应该为 $0$，我在读入之前将 $dis[i][i]=0$，但是后面读入时有可能会读到自环，使得 $dis[i][i]$ 变为 $1$。</li></ul></li><li>T3 的问题：<ul><li>使用 $\%d$ 输出 $\rm long\ long$。</li><li>理论上会有警告，但是使用 $VSCode$ 编译，没去看。</li></ul></li><li>T4 的问题：<ul><li>当时想的是把它变成一个合法的括号序。</li><li>所以在 $n$ 为奇数的时候我加入了一个 $(0,0)$。但是排序是按照第一维从小到大，第二维从大到小，所以有可能会跑到前面去，就不行了。实际上根本没必要。</li></ul></li></ul><h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><ul><li>对拍（数据难造，暴力难写）</li><li>T2 可以手造这样的小数据。T3 用 dev 编译即可。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;过程记录&quot;&gt;&lt;a href=&quot;#过程记录&quot; class=&quot;headerlink&quot; title=&quot;过程记录&quot;&gt;&lt;/a&gt;过程记录&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;做题顺序为 T2,T4,T3,T1。&lt;/li&gt;
&lt;li&gt;考试的时候认为 T1 可能会挂，但没有很好的检查方法。&lt;</summary>
      
    
    
    
    <category term="NOIP模拟赛" scheme="http://hydd.cf/categories/NOIP%E6%A8%A1%E6%8B%9F%E8%B5%9B/"/>
    
    
  </entry>
  
  <entry>
    <title>三元环计数 笔记</title>
    <link href="http://hydd.cf/2020/11/10/note_5/"/>
    <id>http://hydd.cf/2020/11/10/note_5/</id>
    <published>2020-11-09T16:00:00.000Z</published>
    <updated>2020-11-10T08:20:22.918Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li>这个算法可以在 $O(m\sqrt m)$ 的时间内找出无向图的所有三元环。</li><li>所以，如果是有向图，不妨将边看成无向边，求出后判断一下方向是否合法即可。</li><li>下面只讨论无向图的情况。</li></ul><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><ul><li>对于一个 $n$ 个点 $m$ 条边的无向图，三元环定义为满足 $x-y,y-z,z-x$ 两两之间有边的无序三元组 $(x,y,z)$ 。</li></ul><h2 id="转化"><a href="#转化" class="headerlink" title="转化"></a>转化</h2><ul><li>定义点 $u$ 的权值为二元组 $(deg_u,u)$（$deg_u$ 为 $u$ 的度数）。显然任意两点权值互不相同。</li><li>将原图中的边定向，从权值大的点指向权值小的点。（二元组比较：先比较第一个数，再比较第二个数）</li><li>而新图的一条边方向表示的是两点的权值大小关系，所以这是一张 $DAG$。</li></ul><h2 id="求解"><a href="#求解" class="headerlink" title="求解"></a>求解</h2><ul><li><p>分成以下三个步骤：</p><ol><li>枚举点 $u$（三元环中权值最大的点）</li><li>枚举点 $u$ 的出边，设指向的点为 $v$（三元环中权值次大的点）</li><li>枚举点 $v$ 的出边，设指向的点为 $w$（三元环中权值最小的点）</li></ol></li><li><p>若点 $u$ 有指向 $w$ 的出边（这个可以通过对 $u$ 出边指向的点标记做到），则 $(u,v,w)$ 为一个三元环。</p></li></ul><h2 id="正确性证明"><a href="#正确性证明" class="headerlink" title="正确性证明"></a>正确性证明</h2><ul><li>显然这样求出的所有 $(u,v,w)$ 都是三元环。</li><li>而对于原图中的三元环 $(u,v,w)$，不妨设 $cost_u&gt;cost_v&gt;cost_w$。那么枚举 $u$ 的时候必有 $v$ 的出边，枚举 $v$ 的时候必有 $w$ 的出边，且 $u$ 必有指向 $w$ 的出边，故所有三元环都会计算到。</li></ul><h2 id="复杂度证明"><a href="#复杂度证明" class="headerlink" title="复杂度证明"></a>复杂度证明</h2><ul><li>在枚举 $u$ 的出边时，每条边都被访问一次。</li><li>在枚举 $v$ 的出边时，每条边被访问了 $ind_v$（新图中 $v$ 的入度） 次，而所有指向 $v$ 的点 $u$ 都要满足 $deg_u\geq deg_v$，$2m\geq \sum_u deg_u\geq \sum_u deg_v\geq \sum_u ind_v=ind_v\times ind_v$（无向图所有点的度数和为 $2m$）。所以 $ind_v\leq \sqrt{2m}$。</li><li>故每条边被访问了 $O(\sqrt m)$次，总时间复杂度为 $O(m\sqrt m)$。</li></ul><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><h3 id="HDU6184-Counting-Stars"><a href="#HDU6184-Counting-Stars" class="headerlink" title="HDU6184 Counting Stars"></a>HDU6184 Counting Stars</h3><h4 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h4><ul><li>给定一张 $n$ 个点 $m$ 条边的无向图。</li><li>若一个导出子图满足 $V=(A,B,C,D)$ 且 $E=(AB,BC,CD,DA,AC)$ ，则称它是 $A-structure$。</li><li>求 $A-structure$ 的个数。数据组数不超过 $300$。</li><li>$2 \leq n \leq 10^{5}, 1 \leq m \leq \min \left(2 \times 10^{5}, \frac{n(n-1)}{2}\right),\sum n \leq 3 \times 10^{5}, \sum m \leq 6 \times 10^{5}$</li></ul><h4 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h4><ul><li>$A-structure$ 是由有一条公共边的两个三元环构成的。</li><li>枚举公共边，答案为 $\sum_{i=1}^m\binom{cnt_i}2$。其中 $cnt_i$ 是经过第 $i$ 条边的三元环个数。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">pair</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">int</span> T,n,m,u[<span class="number">210000</span>],v[<span class="number">210000</span>],Ans[<span class="number">210000</span>];</span><br><span class="line"><span class="keyword">int</span> deg[<span class="number">110000</span>],tag[<span class="number">110000</span>],lst[<span class="number">110000</span>]; pii val[<span class="number">110000</span>];</span><br><span class="line"><span class="keyword">int</span> edgenum,vet[<span class="number">410000</span>],Next[<span class="number">410000</span>],Head[<span class="number">210000</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">vet[++edgenum]=v;</span><br><span class="line">Next[edgenum]=Head[u];</span><br><span class="line">Head[u]=edgenum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m)==<span class="number">2</span>)&#123;</span><br><span class="line">edgenum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">deg[i]=<span class="number">0</span>; tag[i]=<span class="number">0</span>; lst[i]=<span class="number">0</span>;</span><br><span class="line">Head[i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;u[i],&amp;v[i]);</span><br><span class="line">deg[u[i]]++; deg[v[i]]++; Ans[i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) val[i]=pii(deg[i],i);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line"><span class="keyword">if</span> (val[u[i]]&gt;val[v[i]]) addedge(u[i],v[i]);</span><br><span class="line"><span class="keyword">else</span> addedge(v[i],u[i]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> u=<span class="number">1</span>;u&lt;=n;u++)&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> e=Head[u];e;e=Next[e])&#123;</span><br><span class="line"><span class="keyword">int</span> v=vet[e];</span><br><span class="line">tag[v]=u; lst[v]=e;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> e=Head[u];e;e=Next[e])&#123;</span><br><span class="line"><span class="keyword">int</span> v=vet[e];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> f=Head[v];f;f=Next[f])&#123;</span><br><span class="line"><span class="keyword">int</span> w=vet[f];</span><br><span class="line"><span class="keyword">if</span> (tag[w]!=u) <span class="keyword">continue</span>;</span><br><span class="line">Ans[e]++; Ans[f]++; Ans[lst[w]]++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ll ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) ans+=<span class="number">1l</span>l*Ans[i]*(Ans[i]<span class="number">-1</span>)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;这个算法可以在 $O(m\sqrt m)$ 的时间内找出无向图的所有三元环。&lt;/li&gt;
&lt;li&gt;所以，如果是有向图，不妨将边看成</summary>
      
    
    
    
    <category term="学习笔记" scheme="http://hydd.cf/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="图论" scheme="http://hydd.cf/tags/%E5%9B%BE%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>多彩树</title>
    <link href="http://hydd.cf/2020/10/28/sol_25/"/>
    <id>http://hydd.cf/2020/10/28/sol_25/</id>
    <published>2020-10-27T16:00:00.000Z</published>
    <updated>2020-10-28T12:23:06.933Z</updated>
    
    <content type="html"><![CDATA[<h4 id="C-geqslant-3"><a href="#C-geqslant-3" class="headerlink" title="$C\geqslant 3$"></a>$C\geqslant 3$</h4><ul><li>可以发现，对于任意从 $x$ 开始走能到达的点 $y$，从 $y$ 开始走都一定不能到达点 $x$。证明显然。</li><li>询问：<ul><li>设从询问点 $x$ <strong>往上</strong>走能走到最浅的点为 $y$（$x\rightarrow y$ 路径上的颜色是以 $+1$ 为公差的等差数列）。</li><li>怎么查询这个点？设 $col1[u]=(col[u]+dep[u])\bmod C$，那么相当于查询 $x$ 往上最浅的 $y$ 满足 $col1[y]=col1[x]$。用树状数组，$bit1[c]$ 维护 $dfs$ 序在某个区间内的 $col1=c$ 的点的个数。然后跳重链，看重链上的点是否和 $x$ 颜色相同，如果相同则继续跳，否则在这条重链上二分求出点 $y$。</li><li>维护每个点<strong>往下</strong>能走到多少个点。那么，$x\rightarrow y$ 路径上所有点<strong>往下</strong>能走到的点数之和就是答案。</li></ul></li><li>修改：<ul><li>考虑树剖，维护每个点 $u$，颜色为 $c$ 的轻儿子<strong>往下</strong>能走到的点数量之和，记做 $sum[u][c]$。</li><li>设<strong>往下</strong>走能走到修改点 $x$ 的最浅的点为 $y$（$x\rightarrow y$ 路径上的颜色是以 $-1$ 为公差的等差数列）。</li><li>怎么查询这个点？设 $col2[u]=(col[u]-dep[u])\bmod C$，那么相当于查询 $x$ 往上最浅的 $y$ 满足 $col2[y]=col2[x]$。用树状数组，$bit2[c]$ 维护 $dfs$ 序在某个区间内的 $col2=c$ 的点的个数。然后跳重链，看重链上的点是否和 $x$ 颜色相同，如果相同则继续跳，否则在这条重链上二分求出点 $y$。</li><li>将 $x\rightarrow y$ 路径上每个点<strong>往下</strong>能走到的点数全部减去 $x$ <strong>往下</strong>能走到的点数。</li><li>然后更新当前点的颜色，求出修改后<strong>往下</strong>走能走到修改点 $x$ 的最浅的点为 $y’$（$x\rightarrow y’$ 路径上的颜色是以 $-1$ 为公差的等差数列）。这个还是通过 $col2$ 求。</li><li>将 $x\rightarrow y’$ 路径上每个点<strong>往下</strong>能走到的点数全部加上 $x$ <strong>往下</strong>能走到的点数。</li><li>这个一条链减/加的过程可以一直跳重链，由于一条重链上的 $dfs$ 序连续，所以可以用树状数组区间减。然后到达一条重链链顶的时候，更新一下链顶父亲的 $sum$。重链上除了链顶的每个点都是父亲的重儿子，与父节点的 $sum$ 无关。</li></ul></li><li>时间复杂度分析：<ul><li>询问时：查询 $y$ 每次需要对链求和，而链的数量有 $O(\log n)$，总共为 $O(\log^2 n)$，后面二分中也有链求和，复杂度为 $O(\log^2 n)$；之后询问为跳链，对链求和，复杂度亦为 $O(\log^2 n)$。故一次询问复杂度为 $O( \log^2 n)$。</li><li>修改时：查询 $y,y’$ 复杂度为 $O(\log^2 n)$；之后更新为跳链，对链修改，复杂度亦为 $O(\log^2 n)$。故一次修改复杂度为 $O(\log^2 n)$。</li></ul></li><li>空间复杂度分析：<ul><li>树状数组 $bit1,bit2$ 为 $O(Cn)$，区间修改区间求和所用的树状数组为 $O(n)$，$sum$ 为 $O(Cn)$。</li><li>总空间复杂度为 $O(Cn)$。</li><li>优化到 $O(n)$ 的方法：<ul><li>$bit1,bit2$ 可以替换成 $O(n)$ 的线段树，每个节点记录它所表示的区间的颜色是否相同，若相同存下这个颜色，查询 $y,y’$ 时依旧二分即可。</li><li>$sum$ 可以考虑一个优化：若轻儿子有这个颜色，再存这个颜色的轻儿子能走到的点数之和，否则就不用记。而点数为 $O(n)$，所以 $sum$ 实际有用的状态数只有 $O(n)$，可以直接用 $map$ 存。</li></ul></li></ul></li></ul><h4 id="C-2"><a href="#C-2" class="headerlink" title="$C=2$"></a>$C=2$</h4><ul><li>可以发现，对于任意从 $x$ 开始走能到达的点 $y$，从 $y$ 开始走都一定能到达点 $x$。证明显然。</li><li>询问：<ul><li>设从询问点 $x$ <strong>往上</strong>走能走到最浅的点为 $y$（$x\rightarrow y$ 路径上的颜色是以 $+1$ 为公差的等差数列）。</li><li>直接求 $y$ <strong>往下</strong>能走到的点数即可。</li></ul></li><li>修改：<ul><li>和 $C=3$ 没有区别。</li></ul></li></ul><h4 id="C-1"><a href="#C-1" class="headerlink" title="$C=1$"></a>$C=1$</h4><ul><li>可以发现，任意两点互相可达。</li><li>询问：<ul><li>直接输出 $n$。</li></ul></li><li>修改：<ul><li>不用修改。</li></ul></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*********************************************************************</span></span><br><span class="line"><span class="comment"> * Source：五校联考</span></span><br><span class="line"><span class="comment"> * Problem：tree</span></span><br><span class="line"><span class="comment"> * Author：hydd</span></span><br><span class="line"><span class="comment"> * Date：2020/10/28</span></span><br><span class="line"><span class="comment">*********************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">110000</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> C=<span class="number">3</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">int</span> n,q,tot,c[N];</span><br><span class="line"><span class="keyword">int</span> sum[N][C],col1[N],col2[N];</span><br><span class="line"><span class="keyword">int</span> fa[N],sz[N],dep[N],son[N];</span><br><span class="line"><span class="keyword">int</span> cnt,dfn[N],top[N],num[N];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec[N];</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> bufsize=<span class="number">1</span>&lt;&lt;<span class="number">20</span>;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">Getchar</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> now[bufsize],*S,*T;</span><br><span class="line"><span class="keyword">if</span> (T==S)&#123;</span><br><span class="line">T=(S=now)+fread(now,<span class="number">1</span>,bufsize,<span class="built_in">stdin</span>);</span><br><span class="line"><span class="keyword">if</span> (T==S) <span class="keyword">return</span> EOF;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> *S++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> ch=Getchar();</span><br><span class="line"><span class="keyword">while</span> (ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">if</span> (ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">-1</span>;</span><br><span class="line">ch=Getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (ch&lt;=<span class="string">&#x27;9&#x27;</span>&amp;&amp;ch&gt;=<span class="string">&#x27;0&#x27;</span>) x=x*<span class="number">10</span>+ch-<span class="string">&#x27;0&#x27;</span>,ch=Getchar();</span><br><span class="line"><span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BIT</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> col[N],tree[N][C];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (;x&lt;=n;x+=x&amp;-x) tree[x][k]+=y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (;x;x-=x&amp;-x) res+=tree[x][k];</span><br><span class="line"><span class="keyword">return</span> res; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find_anc</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> c)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> l=dfn[top[x]],r=dfn[x],res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (l&lt;=r)&#123;</span><br><span class="line"><span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (query(r,c)-query(mid<span class="number">-1</span>,c)!=r-mid+<span class="number">1</span>) l=mid+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> res=mid,r=mid<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> num[res];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_anc</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> c=col[x];</span><br><span class="line"><span class="keyword">while</span> (top[x]!=<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">int</span> q=query(dfn[x],c)-query(dfn[top[x]]<span class="number">-1</span>,c);</span><br><span class="line"><span class="keyword">if</span> (q==dfn[x]-dfn[top[x]]+<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">if</span> (col[fa[top[x]]]!=c) <span class="keyword">return</span> top[x];</span><br><span class="line"><span class="keyword">else</span> x=fa[top[x]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> find_anc(x,c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> find_anc(x,c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">add(dfn[x],<span class="number">-1</span>,col[x]);</span><br><span class="line">col[x]=y;</span><br><span class="line">add(dfn[x],<span class="number">1</span>,col[x]);</span><br><span class="line">&#125;</span><br><span class="line">&#125; bit_up,bit_down;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BIT_seg</span>&#123;</span></span><br><span class="line">ll t1[N],t2[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=x;i&lt;=n;i+=i&amp;-i)&#123;</span><br><span class="line">t1[i]+=y;</span><br><span class="line">t2[i]+=<span class="number">1l</span>l*y*x;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">query</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">ll ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=x;i;i-=i&amp;-i)&#123;</span><br><span class="line">ans+=<span class="number">1l</span>l*(x+<span class="number">1</span>)*t1[i];</span><br><span class="line">ans-=t2[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (l&gt;r) <span class="keyword">return</span>;</span><br><span class="line">add(l,k); add(r+<span class="number">1</span>,-k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123; <span class="keyword">return</span> query(r)-query(l<span class="number">-1</span>);&#125;</span><br><span class="line">&#125; tree;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> f)</span></span>&#123;</span><br><span class="line">    sz[u]=<span class="number">1</span>; fa[u]=f; dep[u]=dep[f]+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> v:vec[u])&#123;</span><br><span class="line">    <span class="keyword">if</span> (v==f) <span class="keyword">continue</span>;</span><br><span class="line">        dfs(v,u);</span><br><span class="line">        sz[u]+=sz[v];</span><br><span class="line">        <span class="keyword">if</span> (sz[son[u]]&lt;sz[v]) son[u]=v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> tp)</span></span>&#123;</span><br><span class="line">top[u]=tp; dfn[u]=++cnt; num[cnt]=u;</span><br><span class="line"><span class="keyword">if</span> (son[u])&#123;</span><br><span class="line">dfs2(son[u],tp);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> v:vec[u])&#123;</span><br><span class="line">    <span class="keyword">if</span> (v==fa[u]||v==son[u]) <span class="keyword">continue</span>;</span><br><span class="line">        dfs2(v,v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">tree.change(dfn[u],dfn[v],k);</span><br><span class="line"><span class="keyword">if</span> (fa[u]&amp;&amp;son[fa[u]]!=u) sum[fa[u]][col2[u]]+=k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> v=bit_down.get_anc(u);</span><br><span class="line"><span class="keyword">while</span> (top[u]!=top[v])&#123;</span><br><span class="line"><span class="keyword">if</span> (dep[top[u]]&lt;dep[top[v]]) swap(u,v);</span><br><span class="line">modify(top[u],u,k);</span><br><span class="line">u=fa[top[u]];</span><br><span class="line">&#125;</span><br><span class="line">modify(v,u,k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> tmp=tree.query(dfn[u],dfn[u]);</span><br><span class="line">change(u,-tmp);</span><br><span class="line">col1[u]=(c[u]+dep[u])%tot;</span><br><span class="line">col2[u]=(c[u]-dep[u]%tot+tot)%tot;</span><br><span class="line">bit_up.change(u,col1[u]); bit_down.change(u,col2[u]);</span><br><span class="line">tmp=sum[u][col2[u]]+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (son[u]&amp;&amp;col2[son[u]]==col2[u]) tmp+=tree.query(dfn[son[u]],dfn[son[u]]);</span><br><span class="line">change(u,tmp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> v=bit_up.get_anc(u),res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (top[u]!=top[v])&#123;</span><br><span class="line"><span class="keyword">if</span> (dep[top[u]]&lt;dep[top[v]]) swap(u,v);</span><br><span class="line">res+=tree.query(dfn[top[u]],dfn[u]);</span><br><span class="line">u=fa[top[u]];</span><br><span class="line">&#125;</span><br><span class="line">res+=tree.query(dfn[v],dfn[u]);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">freopen(<span class="string">&quot;tree.in&quot;</span>,<span class="string">&quot;r&quot;</span>,<span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">&quot;tree.out&quot;</span>,<span class="string">&quot;w&quot;</span>,<span class="built_in">stdout</span>);</span><br><span class="line">n=read(); q=read(); tot=read();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) c[i]=read();</span><br><span class="line"><span class="keyword">int</span> u,v;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">u=read(); v=read();</span><br><span class="line">vec[u].push_back(v);</span><br><span class="line">vec[v].push_back(u);</span><br><span class="line">&#125;</span><br><span class="line">dfs(<span class="number">1</span>,<span class="number">0</span>); dfs2(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">col1[i]=dep[i]%tot;</span><br><span class="line">col2[i]=(tot-dep[i]%tot)%tot;</span><br><span class="line">bit_up.col[i]=col1[i];</span><br><span class="line">bit_up.add(dfn[i],<span class="number">1</span>,col1[i]);</span><br><span class="line">bit_down.col[i]=col2[i];</span><br><span class="line">bit_down.add(dfn[i],<span class="number">1</span>,col2[i]);</span><br><span class="line">&#125;</span><br><span class="line">tree.change(<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> u=<span class="number">1</span>;u&lt;=n;u++)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> v:vec[u])&#123;</span><br><span class="line">    <span class="keyword">if</span> (v==fa[u]||v==son[u]) <span class="keyword">continue</span>;</span><br><span class="line">    sum[u][col2[v]]++;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) work(i);</span><br><span class="line"><span class="keyword">int</span> op,x;</span><br><span class="line"><span class="keyword">while</span> (q--)&#123;</span><br><span class="line">op=read();</span><br><span class="line"><span class="keyword">if</span> (op==<span class="number">1</span>)&#123;</span><br><span class="line">x=read(); c[x]=read();</span><br><span class="line">work(x);</span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line">u=read();</span><br><span class="line"><span class="keyword">if</span> (tot==<span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,n);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">if</span> (tot==<span class="number">2</span>)&#123;</span><br><span class="line"><span class="keyword">int</span> v=bit_up.get_anc(u);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,tree.query(dfn[v],dfn[v]));</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,query(u));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;C-geqslant-3&quot;&gt;&lt;a href=&quot;#C-geqslant-3&quot; class=&quot;headerlink&quot; title=&quot;$C\geqslant 3$&quot;&gt;&lt;/a&gt;$C\geqslant 3$&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;可以发现，对于任意从 $x$ 开始走能到</summary>
      
    
    
    
    <category term="CSP模拟赛" scheme="http://hydd.cf/categories/CSP%E6%A8%A1%E6%8B%9F%E8%B5%9B/"/>
    
    
    <category term="树链剖分" scheme="http://hydd.cf/tags/%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86/"/>
    
    <category term="树状数组" scheme="http://hydd.cf/tags/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>20201021 模拟赛题解</title>
    <link href="http://hydd.cf/2020/10/21/sol_24/"/>
    <id>http://hydd.cf/2020/10/21/sol_24/</id>
    <published>2020-10-20T16:00:00.000Z</published>
    <updated>2020-10-21T13:54:48.789Z</updated>
    
    <content type="html"><![CDATA[<h2 id="escape"><a href="#escape" class="headerlink" title="escape"></a>escape</h2><ul><li>由于要求字典序最小，所以从左到右，尽量使得每一位尽量小。</li><li>交换两个字符相当于把后面一个字符移到前面。</li><li>可以发现，如果这个位置最后位置放的是字符 $x$，那么一定是往后离它最近的 $x$ 移到了这个位置。</li><li>从小到大枚举第 $i$ 个位置的字符 $x$，设往后离它最近的 $x$ 的位置为 $pos$，则移动步数为 $pos-x$。若 $pos-x\leq k$，则当前位置可以放 $x$，将原先 $i..pos$ 的位置上的数都往后移一格即可。</li><li>具体实现，可以考虑记录每个字符从左到右出现的位置。每次移动，要将 $i..pos-1$ 的位置上的数都往右移，暴力做是 $O(n^2)$ 的，但是可以发现，这只是相当于原来在 $i..pos-1$ 位置上的数，现在的位置往右移了一格。</li><li>原来在 $pos$ 位置上的数，以后都不用考虑了，可以认为被删除了。现在的操作相当于删除一格字符，把前面的数都往后移一格。</li><li>用树状数组维护，原来在 $x$ 位置的字符，现在往右移了多少格。每次删除了一格字符，只是将树状数组一段位置上的数 $+1$。</li><li>但是每次要枚举每个字符，算出每个字符最靠左的位置。这样是 $O(n|\Sigma|\log n)$（$|\Sigma|$表示字符集大小）。</li><li>可以发现，删除一个字符 $x$ 后，别的字符最靠左的位置是否往右移一格是可以 $O(1)$ 计算的。字符 $x$ 新的最靠左的位置可以 $O(\log n)$ 计算。删除次数是 $O(n)$ 的，一次删除的复杂度是 $O(|\Sigma|+\log n)$ 的。</li><li>总时间复杂度 $O(n(|\Sigma|+\log n))$。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">int</span> n,len[<span class="number">510000</span>],tree[<span class="number">510000</span>],q[<span class="number">510000</span>];</span><br><span class="line">ll k;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec[<span class="number">26</span>];</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">510000</span>],t[<span class="number">510000</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">myabs</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x&gt;<span class="number">0</span>?x:-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (;x&lt;=n;x+=x&amp;-x) tree[x]+=y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getsum</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (;x;x-=x&amp;-x) res+=tree[x];</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getnum</span><span class="params">(<span class="keyword">int</span> t)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!len[t]) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">int</span> x=vec[t][len[t]<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">return</span> x+getsum(n-x+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">freopen(<span class="string">&quot;escape.in&quot;</span>,<span class="string">&quot;r&quot;</span>,<span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">&quot;escape.out&quot;</span>,<span class="string">&quot;w&quot;</span>,<span class="built_in">stdout</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%lld&quot;</span>,&amp;n,&amp;k);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=n;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line">vec[s[i]-<span class="string">&#x27;a&#x27;</span>].push_back(i);</span><br><span class="line">len[s[i]-<span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">26</span>;j++) q[j]=getnum(j);</span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">26</span>;j++)</span><br><span class="line"><span class="keyword">if</span> (len[j])&#123;</span><br><span class="line">x=vec[j][len[j]<span class="number">-1</span>]; y=q[j];</span><br><span class="line"><span class="keyword">if</span> (k-(y-i)&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">k-=(y-i); t[i]=<span class="keyword">char</span>(j+<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"><span class="keyword">int</span> tmp=n-x+<span class="number">1</span>; add(tmp,<span class="number">1</span>); len[j]--;</span><br><span class="line">q[j]=getnum(j);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;<span class="number">26</span>;k++)</span><br><span class="line"><span class="keyword">if</span> (len[k]&amp;&amp;k!=j)&#123;</span><br><span class="line">x=vec[k][len[k]<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">if</span> (tmp&lt;=n-x+<span class="number">1</span>) q[k]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,t+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="ride"><a href="#ride" class="headerlink" title="ride"></a>ride</h2><ul><li>先求出从每个点出发，海拔单调下降的路径数量。</li><li>因为海拔就等于点的编号，从小到大枚举编号，然后直接 $dp$ 即可，$dp[u]=1+\sum_{(u,v)\in E,v&lt;u} dp[v]$。</li><li>以 $u$ 为最高点的路径数量为 $\sum_{(u,v)\in E,v&lt;u}\sum_{(u,w)\in E,w&lt;u,w\neq v}dp[v]\times dp[w]=\sum_{(u,v)\in E,v}dp[v]\times(dp[u]-dp[v])$。</li><li>直接算即可。时间复杂度 $O(n)$。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">int</span> n; ll dp[<span class="number">310000</span>];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec[<span class="number">310000</span>];</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">Getchar</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">char</span> now[<span class="number">1</span>&lt;&lt;<span class="number">20</span>],*S,*T;</span><br><span class="line">    <span class="keyword">if</span> (T==S)&#123;</span><br><span class="line">        T=(S=now)+fread(now,<span class="number">1</span>,<span class="number">1</span>&lt;&lt;<span class="number">20</span>,<span class="built_in">stdin</span>);</span><br><span class="line">        <span class="keyword">if</span> (T==S) <span class="keyword">return</span> EOF;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> *S++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> ch=Getchar();</span><br><span class="line">    <span class="keyword">while</span> (ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">-1</span>;</span><br><span class="line">        ch=Getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (ch&lt;=<span class="string">&#x27;9&#x27;</span>&amp;&amp;ch&gt;=<span class="string">&#x27;0&#x27;</span>) x=x*<span class="number">10</span>+ch-<span class="string">&#x27;0&#x27;</span>,ch=Getchar();</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">freopen(<span class="string">&quot;ride.in&quot;</span>,<span class="string">&quot;r&quot;</span>,<span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">&quot;ride.out&quot;</span>,<span class="string">&quot;w&quot;</span>,<span class="built_in">stdout</span>);</span><br><span class="line">n=read(); <span class="keyword">int</span> u,v;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">u=read(); v=read();</span><br><span class="line"><span class="keyword">if</span> (u&gt;v) swap(u,v);</span><br><span class="line">vec[v].push_back(u);</span><br><span class="line">&#125;</span><br><span class="line">ll ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;(<span class="keyword">int</span>)vec[i].size();j++) dp[i]+=dp[vec[i][j]];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;(<span class="keyword">int</span>)vec[i].size();j++) ans+=dp[vec[i][j]]*(dp[i]-dp[vec[i][j]]);</span><br><span class="line">dp[i]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="road"><a href="#road" class="headerlink" title="road"></a>road</h2><ul><li>可以发现，当 $u\neq v$ 时：</li><li>设 $(u,v)$ 之间长度为奇数的最短路长度为 $d_1$，那么 $(u,v)$ 之间必定存在长度为 $d(2\nmid d,d\geq d_1)$ 的路径。（$d_1$ 存在）</li><li>设 $(u,v)$ 之间长度为偶数的最短路长度为 $d_0$，那么 $(u,v)$ 之间必定存在长度为 $d(2\mid d,d\geq d_0)$ 的路径。（ $d_2$ 存在）</li><li>直接求出任意两点长度为奇数/偶数的最短路即可。这个直接处理不太方便，可以新建 $n+1,n+2,\cdots ,2n$ 这些点，将原图一条边无向边 $(u,v)$ 改为两条无向边 $(u,v+n),(u+n,v)$。这样从 $x$ 点出发，到 $y$ 号点的最短路就是偶数条边，到 $y+n$ 号点的最短路是奇数条边。</li><li>当 $u=v$ 时<ul><li>长度为奇数的还是可以用上面的方法判断</li><li>长度为偶数，如果 $u$ 号点有边和其他点连接，那么必定为 $Yes$。</li><li>长度为偶数，如果 $u$ 号点没有边和其他点连接，那么 $d=0$ 为 $Yes$，否则为 $No$。</li></ul></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> x,d,id;</span><br><span class="line">node()&#123;&#125;</span><br><span class="line">node(<span class="keyword">int</span> _x,<span class="keyword">int</span> _d,<span class="keyword">int</span> _id):x(_x),d(_d),id(_id)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> n,m,Q,dis[<span class="number">110000</span>],Ans[<span class="number">110000</span>];</span><br><span class="line"><span class="keyword">int</span> head,tail,que[<span class="number">110000</span>];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec[<span class="number">11000</span>];</span><br><span class="line"><span class="built_in">vector</span>&lt;node&gt; q[<span class="number">11000</span>];</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">Getchar</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">char</span> now[<span class="number">1</span>&lt;&lt;<span class="number">20</span>],*S,*T;</span><br><span class="line">    <span class="keyword">if</span> (T==S)&#123;</span><br><span class="line">        T=(S=now)+fread(now,<span class="number">1</span>,<span class="number">1</span>&lt;&lt;<span class="number">20</span>,<span class="built_in">stdin</span>);</span><br><span class="line">        <span class="keyword">if</span> (T==S) <span class="keyword">return</span> EOF;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> *S++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> ch=Getchar();</span><br><span class="line">    <span class="keyword">while</span> (ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">-1</span>;</span><br><span class="line">        ch=Getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (ch&lt;=<span class="string">&#x27;9&#x27;</span>&amp;&amp;ch&gt;=<span class="string">&#x27;0&#x27;</span>) x=x*<span class="number">10</span>+ch-<span class="string">&#x27;0&#x27;</span>,ch=Getchar();</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n+n;i++) dis[i]=INF;</span><br><span class="line">head=<span class="number">1</span>; tail=<span class="number">1</span>; que[<span class="number">1</span>]=u;</span><br><span class="line">dis[u]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> v;</span><br><span class="line"><span class="keyword">while</span> (head&lt;=tail)&#123;</span><br><span class="line">u=que[head++];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;(<span class="keyword">int</span>)vec[u].size();i++)&#123;</span><br><span class="line">v=vec[u][i];</span><br><span class="line"><span class="keyword">if</span> (dis[v]&gt;dis[u]+<span class="number">1</span>)&#123;</span><br><span class="line">dis[v]=dis[u]+<span class="number">1</span>;</span><br><span class="line">que[++tail]=v;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">freopen(<span class="string">&quot;road.in&quot;</span>,<span class="string">&quot;r&quot;</span>,<span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">&quot;road.out&quot;</span>,<span class="string">&quot;w&quot;</span>,<span class="built_in">stdout</span>);</span><br><span class="line">n=read(); m=read(); Q=read();</span><br><span class="line"><span class="keyword">int</span> u,v;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">u=read(); v=read();</span><br><span class="line">vec[u].push_back(v+n); vec[u+n].push_back(v);</span><br><span class="line">vec[v].push_back(u+n); vec[v+n].push_back(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> s,t,d;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=Q;i++)&#123;</span><br><span class="line">s=read(); t=read(); d=read();</span><br><span class="line"><span class="keyword">if</span> (d&amp;<span class="number">1</span>) t+=n;</span><br><span class="line">q[s].push_back(node(t,d,i));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">bfs(i);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;(<span class="keyword">int</span>)q[i].size();j++)&#123;</span><br><span class="line">x=q[i][j].x; y=q[i][j].d;</span><br><span class="line"><span class="keyword">if</span> (x==i)&#123;</span><br><span class="line"><span class="keyword">if</span> (!vec[x].empty()) Ans[q[i][j].id]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> Ans[q[i][j].id]=(y==<span class="number">0</span>);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (dis[x]&lt;=y) Ans[q[i][j].id]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> Ans[q[i][j].id]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=Q;i++)</span><br><span class="line"><span class="keyword">if</span> (Ans[i]) <span class="built_in">puts</span>(<span class="string">&quot;Yes&quot;</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">&quot;No&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="tree"><a href="#tree" class="headerlink" title="tree"></a>tree</h2><ul><li><p>题目要求的是 $\sum_d (\sum_{i=1}^{n/2} d_i)^2=\sum_d(\sum_{i=1}^{n/2} d_i^2+\sum_{1\leq i\leq n/2}\sum_{1\leq j\leq n/2,j\neq i} d_id_j)$。</p></li><li><p>$n$ 个点的数，匹配的方案数为 $F(n)=(n-1)(n-3)(n-5)\cdots1$。</p></li><li><p>这个可以考虑第一个点和谁匹配，有 $(n-1)$ 种方案。再考虑还没有匹配中的第一个点和谁匹配，有 $(n-3)$ 种方案，以此类推。</p></li><li><p>$\sum_d\sum_{i=1}^{n/2} d_i^2$ 这个可以考虑每个匹配的贡献。对于一个匹配 $(a,b)$ ，它的贡献次数为 $F(n-2)$ 次，贡献为 $dis^2(a,b)$。相当于 $\sum_d\sum_{i=1}^{n/2} d_i^2=F(n-2)\sum_{1\leq a\leq n}\sum_{1\leq b\leq n,b\neq a} dis^2(a,b)$。后面的部分可以通过换根 $dp$ 处理。</p></li><li><p>设 $h[u]$ 表示 $u$ 子树中点的个数，$g[u]$ 表示 $u$ 子树中每个点的深度之和，$f[u]$ 表示 $u$ 子树中每个点深度的平方和。</p></li><li><p>那么 $h[u]=1+\sum_v h[v],g[u]=\sum_v (g[v]+h[v]),f[u]=\sum_v(f[v]+2g[v]+h[v])$。</p></li><li><p>换根 $dp$，记根为 $u$ 的时候 $f[u]$ 的值为 $q[u]$（即所有点到 $u$ 距离的平方和）。在将以 $u$ 为根时的 $g[u]$ 求和 /2 的值即为 $s$（即所有点两两距离之和）。</p></li><li><p>然后记 $S=\sum_{i=1}^n q[u]$，$\sum_d\sum_{i=1}^{n/2} d_i^2=F(n-2)S$。</p></li><li><script type="math/tex; mode=display">\begin{align*}&\quad\sum_d\sum_{1\leq i\leq n/2}\sum_{1\leq j\leq n/2,j\neq i} d_id_j\\&=F(n-4)\frac12\sum_{1\leq a\leq n}\sum_{1\leq b\leq n,b\neq a}\sum_{1\leq c\leq n,c\neq a,b}\sum_{1\leq d\leq n,d\neq a,b,c} dis(a,b)dis(c,d)\\&=F(n-4)\frac12\sum_{1\leq a\leq n}\sum_{1\leq b\leq n,b\neq a} dis(a,b)(s-q[a]-q[b]+dis(a,b)\\&=F(n-4)\frac12\sum_{1\leq a\leq n}\sum_{1\leq b\leq n,b\neq a} dis(a,b)(s-q[a]-q[b]+dis(a,b))\\&=F(n-4)(\frac12(s^2+S)-q[a]\sum_{1\leq a\leq n}dis(a,b))\\&=F(n-4)(\frac12(s^2+S)-q[a]^2)\\\end{align*}</script></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inv2=(Mod+<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> n,ans,ans2,s,h[<span class="number">310000</span>],g[<span class="number">310000</span>],f[<span class="number">310000</span>],q[<span class="number">310000</span>];</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">Getchar</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">char</span> now[<span class="number">1</span>&lt;&lt;<span class="number">20</span>],*S,*T;</span><br><span class="line">    <span class="keyword">if</span> (T==S)&#123;</span><br><span class="line">        T=(S=now)+fread(now,<span class="number">1</span>,<span class="number">1</span>&lt;&lt;<span class="number">20</span>,<span class="built_in">stdin</span>);</span><br><span class="line">        <span class="keyword">if</span> (T==S) <span class="keyword">return</span> EOF;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> *S++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> ch=Getchar();</span><br><span class="line">    <span class="keyword">while</span> (ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">-1</span>;</span><br><span class="line">        ch=Getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (ch&lt;=<span class="string">&#x27;9&#x27;</span>&amp;&amp;ch&gt;=<span class="string">&#x27;0&#x27;</span>) x=x*<span class="number">10</span>+ch-<span class="string">&#x27;0&#x27;</span>,ch=Getchar();</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> edgenum,vet[<span class="number">610000</span>],Next[<span class="number">610000</span>],Head[<span class="number">310000</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">    vet[++edgenum]=v;</span><br><span class="line">    Next[edgenum]=Head[u];</span><br><span class="line">Head[u]=edgenum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123; <span class="keyword">return</span> x+y&gt;=Mod?x+y-Mod:x+y;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">dec</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123; <span class="keyword">return</span> x-y&lt;<span class="number">0</span>?x-y+Mod:x-y;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123; <span class="keyword">return</span> <span class="number">1l</span>l*x*y%Mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">upd</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">h[u]=add(h[u],h[v]);</span><br><span class="line">g[u]=add(g[u],add(g[v],h[v]));</span><br><span class="line">f[u]=add(f[u],add(f[v],add(h[v],add(g[v],g[v]))));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rupd</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">h[u]=dec(h[u],h[v]);</span><br><span class="line">g[u]=dec(g[u],add(g[v],h[v]));</span><br><span class="line">f[u]=dec(f[u],add(f[v],add(h[v],add(g[v],g[v]))));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa)</span></span>&#123;</span><br><span class="line">f[u]=<span class="number">0</span>; g[u]=<span class="number">0</span>; h[u]=<span class="number">1</span>; <span class="keyword">int</span> v;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> e=Head[u];e;e=Next[e])&#123;</span><br><span class="line">v=vet[e];</span><br><span class="line"><span class="keyword">if</span> (v==fa) <span class="keyword">continue</span>;</span><br><span class="line">dfs(v,u);</span><br><span class="line">upd(u,v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa)</span></span>&#123;</span><br><span class="line">ans=add(ans,f[u]); s=add(s,g[u]);</span><br><span class="line">q[u]=g[u];</span><br><span class="line"><span class="keyword">int</span> v;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> e=Head[u];e;e=Next[e])&#123;</span><br><span class="line">v=vet[e];</span><br><span class="line"><span class="keyword">if</span> (v==fa) <span class="keyword">continue</span>;</span><br><span class="line">rupd(u,v); upd(v,u);</span><br><span class="line">dfs2(v,u);</span><br><span class="line">rupd(v,u); upd(u,v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">freopen(<span class="string">&quot;tree.in&quot;</span>,<span class="string">&quot;r&quot;</span>,<span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">&quot;tree.out&quot;</span>,<span class="string">&quot;w&quot;</span>,<span class="built_in">stdout</span>);</span><br><span class="line">n=read(); <span class="keyword">int</span> u,v;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">u=read(); v=read();</span><br><span class="line">addedge(u,v); addedge(v,u);</span><br><span class="line">&#125;</span><br><span class="line">dfs(<span class="number">1</span>,<span class="number">0</span>); dfs2(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">ans=mul(ans,inv2); s=mul(s,inv2);</span><br><span class="line">ans2=add(ans2,mul(s,s)); ans2=add(ans2,ans);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) ans2=dec(ans2,mul(q[i],q[i]));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=n<span class="number">-3</span>;i&gt;=<span class="number">1</span>;i-=<span class="number">2</span>) ans=mul(ans,i);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=n<span class="number">-5</span>;i&gt;=<span class="number">1</span>;i-=<span class="number">2</span>) ans2=mul(ans2,i);</span><br><span class="line">ans=add(ans,ans2);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;escape&quot;&gt;&lt;a href=&quot;#escape&quot; class=&quot;headerlink&quot; title=&quot;escape&quot;&gt;&lt;/a&gt;escape&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;由于要求字典序最小，所以从左到右，尽量使得每一位尽量小。&lt;/li&gt;
&lt;li&gt;交换两个字符相当于把</summary>
      
    
    
    
    <category term="NOIP模拟赛" scheme="http://hydd.cf/categories/NOIP%E6%A8%A1%E6%8B%9F%E8%B5%9B/"/>
    
    
  </entry>
  
  <entry>
    <title>20201016 模拟赛题解</title>
    <link href="http://hydd.cf/2020/10/19/sol_23/"/>
    <id>http://hydd.cf/2020/10/19/sol_23/</id>
    <published>2020-10-18T16:00:00.000Z</published>
    <updated>2020-10-19T06:11:27.196Z</updated>
    
    <content type="html"><![CDATA[<h2 id="count"><a href="#count" class="headerlink" title="count"></a>count</h2><ul><li>不想重新再手打一遍了 QAQ。</li><li>算了再打一遍吧。</li></ul><script type="math/tex; mode=display">\begin{align*}f_m(n)&=\sum_{i=0}^na_i\sum_{j=0}^n(-1)^j\binom{m}{j}\binom{n-m}{i-j}\\\\F(x)&=\sum_{i=0}^nx^i\sum_{j=0}^n(-1)^j\binom{m}{j}\binom{n-m}{i-j}\\&=\sum_{a=0}^m\sum_{b=0}^{n-m}\left(\binom{m}{a}x^a(-1)^a\right)\left(\binom{n-m}{b}x^b\right)\\&=\sum_{a=0}^m\left(\binom{m}{a}(-x)^a1^{m-a}\right)\sum_{b=0}^{n-m}\left(\binom{n-m}{b}x^b1^{n-m-b}\right)\\&=(1-x)^m(1+x)^{n-m}\\&=(2-(1+x))^m(1+x)^{n-m}\\&=\sum_{i=0}^m\binom{m}{i}2^i(1+x)^{m-i}(-1)^{m-i}(1+x)^{n-m}\\&=\sum_{i=0}^m\binom{m}{i}2^i(1+x)^{n-i}(-1)^{m-i}\\&=\sum_{i=0}^m\binom{m}{i}2^i(-1)^{m-i}\left(\sum_{j=0}^{n-i}\binom{n-i}{j}x^j\right)\\\\f_m(n)&=\sum_{i=0}^m\binom{m}{i}2^i(-1)^{m-i}\left(\sum_{j=0}^{n-i}\binom{n-i}{j}a_j\right)\\\\G(x)&=f_0(n)x^0+f_1(n)x^1+f_2(n)x^2+\cdots+f_n(n)x^n\\&=\sum_{m=0}^nf_m(n)x^m\\&=\sum_{m=0}^n x^m\sum_{i=0}^m\binom{m}{i}2^i(-1)^{n-i}\left(\sum_{j=0}^{n-i}\binom{n-i}{j}a_j\right)\\&=\sum_{m=0}^n m!\sum_{i=0}^m\frac{2^i\left(\sum_{j=0}^{n-i}\binom{n-i}{j}a_j\right)x^i}{i!}\frac{(-1)^{m-i}x^{m-i}}{(m-i)!}\\\\D(x)&=\sum_{i=0}^n2^i\left(\sum_{j=0}^{n-i}\binom{n-i}{j}a_j\right)\frac{x^i}{i!}\\E(x)&=\sum_{i=0}^n(-1)^i\frac{x^i}{i!}\\G(x)&=\sum_{m=0}^n m!x^m\sum_{i=0}^mD[x^i]E[x^{m-i}]\\&=\sum_{m=0}^n m!x^m(D\times E)[x^m]\\\\D(x)&=\sum_{i=0}^n2^i\left(\sum_{j=0}^{n-i}\binom{n-i}{j}a_j\right)\frac{x^i}{i!}\\C(x)&=\sum_{i=0}^nx^i\sum_{j=0}^{i}\binom{i}{j}a_j\\&=\sum_{i=0}^ni!\sum_{j=0}^{i}\frac{a_jx^j}{j!}\frac{x^{i-j}}{(i-j)!}\\\\A(x)&=\sum_{i=0}^{n}a_i\frac{x^i}{i!}\\B(x)&=\sum_{i=0}^{n}\frac{x^i}{i!}\\C(x)&=\sum_{i=0}^n i!x^i\sum_{j=0}^iA[x^j]B[x^{i-j}]\\&=\sum_{i=0}^n i!x^i(A\times B)[x^i]\\D(x)&=\sum_{i=0}^n2^iC[x^{n-i}]\frac{x^i}{i!}\\E(x)&=\sum_{i=0}^n(-1)^i\frac{x^i}{i!}\\G(x)&=\sum_{m=0}^n m!x^m(D\times E)[x^m]\\Ans&=G(1000000007)\end{align*}</script><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*********************************************************************</span></span><br><span class="line"><span class="comment"> * Source：安师大省选模拟2</span></span><br><span class="line"><span class="comment"> * Problem：count - T1</span></span><br><span class="line"><span class="comment"> * Author：hydd</span></span><br><span class="line"><span class="comment"> * Date：2020/10/16</span></span><br><span class="line"><span class="comment">*********************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> g=<span class="number">3</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">unsigned</span> val=<span class="number">1000000007</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;ll&gt; poly;</span><br><span class="line"><span class="keyword">int</span> n,s,m,t,rev[<span class="number">2100000</span>];</span><br><span class="line">ll fac[<span class="number">2100000</span>],inv[<span class="number">2100000</span>];</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">Getchar</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">char</span> now[<span class="number">1</span>&lt;&lt;<span class="number">20</span>],*S,*T;</span><br><span class="line">    <span class="keyword">if</span> (T==S)&#123;</span><br><span class="line">        T=(S=now)+fread(now,<span class="number">1</span>,<span class="number">1</span>&lt;&lt;<span class="number">20</span>,<span class="built_in">stdin</span>);</span><br><span class="line">        <span class="keyword">if</span> (T==S) <span class="keyword">return</span> EOF;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> *S++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> ch=Getchar();</span><br><span class="line">    <span class="keyword">while</span> (ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">-1</span>;</span><br><span class="line">        ch=Getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (ch&lt;=<span class="string">&#x27;9&#x27;</span>&amp;&amp;ch&gt;=<span class="string">&#x27;0&#x27;</span>) x=x*<span class="number">10</span>+ch-<span class="string">&#x27;0&#x27;</span>,ch=Getchar();</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">add</span><span class="params">(ll x,ll y)</span></span>&#123; <span class="keyword">return</span> x+y&gt;=Mod?x+y-Mod:x+y;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">dec</span><span class="params">(ll x,ll y)</span></span>&#123; <span class="keyword">return</span> x-y&lt;<span class="number">0</span>?x-y+Mod:x-y;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">mul</span><span class="params">(ll x,ll y)</span></span>&#123; <span class="keyword">return</span> x*y%Mod;&#125;</span><br><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll x,ll a)</span></span>&#123;</span><br><span class="line">    ll res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (a)&#123;</span><br><span class="line">        <span class="keyword">if</span> (a&amp;<span class="number">1</span>) res=res*x%Mod;</span><br><span class="line">        x=x*x%Mod; a&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">getinv</span><span class="params">(ll x)</span></span>&#123; <span class="keyword">return</span> qpow(x,Mod<span class="number">-2</span>);&#125;</span><br><span class="line"></span><br><span class="line">poly A,B,C;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">NTT</span><span class="params">(poly &amp;a,<span class="keyword">int</span> len,<span class="keyword">int</span> inv)</span></span>&#123;</span><br><span class="line">    a.resize(len);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">        <span class="keyword">if</span> (i&lt;rev[i]) swap(a[i],a[rev[i]]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> mid=<span class="number">1</span>;mid&lt;len;mid&lt;&lt;=<span class="number">1</span>)&#123;</span><br><span class="line">        ll tmp=qpow(g,(Mod<span class="number">-1</span>)/(mid&lt;&lt;<span class="number">1</span>));</span><br><span class="line">        <span class="keyword">if</span> (inv==<span class="number">-1</span>) tmp=getinv(tmp);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i+=(mid&lt;&lt;<span class="number">1</span>))&#123;</span><br><span class="line">            ll omega=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;mid;j++,omega=mul(omega,tmp))&#123;</span><br><span class="line">                ll x=a[i+j],y=mul(omega,a[i+j+mid]);</span><br><span class="line">                a[i+j]=add(x,y); a[i+j+mid]=dec(x,y);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (inv==<span class="number">-1</span>)&#123;</span><br><span class="line">        ll inv=getinv(len);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++) a[i]=mul(a[i],inv);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mult</span><span class="params">(poly a,poly b,poly &amp;c,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> bit=<span class="number">0</span>; <span class="keyword">while</span> ((<span class="number">1</span>&lt;&lt;bit)&lt;n+n) bit++;</span><br><span class="line">    <span class="keyword">int</span> len=<span class="number">1</span>&lt;&lt;bit;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++) rev[i]=(rev[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)&lt;&lt;(bit<span class="number">-1</span>));</span><br><span class="line">    NTT(a,len,<span class="number">1</span>); NTT(b,len,<span class="number">1</span>);</span><br><span class="line">    c.resize(len);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++) c[i]=mul(a[i],b[i]);</span><br><span class="line">    NTT(c,len,<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">freopen(<span class="string">&quot;count.in&quot;</span>,<span class="string">&quot;r&quot;</span>,<span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">&quot;count.out&quot;</span>,<span class="string">&quot;w&quot;</span>,<span class="built_in">stdout</span>);</span><br><span class="line">fac[<span class="number">0</span>]=<span class="number">1</span>; <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">2000000</span>;i++) fac[i]=fac[i<span class="number">-1</span>]*i%Mod;</span><br><span class="line">inv[<span class="number">1</span>]=<span class="number">1</span>; <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=<span class="number">2000000</span>;i++) inv[i]=(Mod-Mod/i)*inv[Mod%i]%Mod;</span><br><span class="line">inv[<span class="number">0</span>]=<span class="number">1</span>; <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">2000000</span>;i++) inv[i]=inv[i<span class="number">-1</span>]*inv[i]%Mod;</span><br><span class="line">n=read(); A.resize(n+<span class="number">1</span>); B.resize(n+<span class="number">1</span>);</span><br><span class="line">B[<span class="number">0</span>]=read(); s=read(); m=read(); t=read();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++) A[i]=inv[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) B[i]=((B[i<span class="number">-1</span>]^s)*m+t)%Mod;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++) B[i]=B[i]*inv[i]%Mod;</span><br><span class="line">mult(A,B,C,n+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++) C[i]=C[i]*fac[i]%Mod;</span><br><span class="line">A.resize(n+<span class="number">1</span>); B.resize(n+<span class="number">1</span>); ll now=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++)&#123;</span><br><span class="line">A[i]=C[n-i]*inv[i]%Mod*now%Mod;</span><br><span class="line">now=add(now,now);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++)&#123;</span><br><span class="line">B[i]=inv[i];</span><br><span class="line"><span class="keyword">if</span> (i&amp;<span class="number">1</span>) B[i]=(Mod-B[i])%Mod;</span><br><span class="line">&#125;</span><br><span class="line">mult(A,B,C,n+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++) C[i]=C[i]*fac[i]%Mod;</span><br><span class="line"><span class="keyword">unsigned</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=n;i&gt;=<span class="number">0</span>;i--) ans=ans*val+(<span class="keyword">unsigned</span>)C[i];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%u\n&quot;</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="path"><a href="#path" class="headerlink" title="path"></a>path</h2><h4 id="一个结论"><a href="#一个结论" class="headerlink" title="一个结论"></a>一个结论</h4><ul><li>先给出一个结论：<ul><li>一条合法的路径上，一定存在一条边 $(a,b)$，使得这条边上的顶点序列，存在相邻的两个点 $a,b$。</li><li>证明：<ul><li>考虑设函数 $f(x)$ 表示走过 $x$ 个点的时候，经过的边上的顶点序列的长度之和。</li><li>$f(1)=0,f(n)=n$，$f(x)$ 单调不降。</li><li>原命题等价于存在 $1\leq i&lt;n,f(i)&lt;i,f(i+1)\geq i+1$。 显然成立。</li></ul></li></ul></li></ul><h3 id="第一问"><a href="#第一问" class="headerlink" title="第一问"></a>第一问</h3><ul><li>我们可以对所有满足“这条边上的顶点序列上存在相邻的两个点 $a,b$”的所有边 $(a,b)$，往左右不断扩展，看是否合法。若合法，输出即可。</li></ul><h3 id="第二问"><a href="#第二问" class="headerlink" title="第二问"></a>第二问</h3><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><ul><li><p>现在，我们定义 $4$ 种路径：</p><ul><li>左开右闭：路径上的边的顶点序列接起来，没有路径上的第一个点。</li><li>左闭右开：路径上的边的顶点序列接起来，没有路径上的最后一个点。</li><li>左闭右闭：路径上的边的顶点序列接起来，有路径上的所有点。</li><li>左开右开：路径上的边的顶点序列接起来，没有路径上的第一个点和最后一个点。</li></ul></li><li><p>我们定义极短路径为：不能切割得到更短的路径拼接起来。（这个定义对以上 $4$ 种都成立）</p></li></ul><h4 id="左开右开极短路径"><a href="#左开右开极短路径" class="headerlink" title="左开右开极短路径"></a>左开右开极短路径</h4><ul><li>若一条边上顶点序列为空，那这条边就是左开右开极短路径。</li><li>如果有更长的左开右开路径，那么不是极短的。</li><li>它必定可以用 左开右开极短路径+左闭右开路径 或 左开右闭极短路径+左开右开路径表示。</li><li>取决于它的第一条边上的顶点序列是否为空。</li></ul><h4 id="左闭右开极短路径"><a href="#左闭右开极短路径" class="headerlink" title="左闭右开极短路径"></a>左闭右开极短路径</h4><ul><li>枚举这种路径的结尾边 $(u,v)$。</li><li>结尾边上的顶点序列最后一个点若为 $u$，那么往左扩展，如果合法，就是一条极短的左闭右开路径。</li><li>这个求出来的路径显然两两不同。（因为它只向一边扩展）</li><li>接下来证明它不能由 左闭右开路径+左闭右开极短路径 或 左闭右闭路径+左开右开极短路径表示。<ul><li>第一种显然不可能，现在是固定最后一个点，往左扩展，如果扩展到已经满足条件了，就不会再扩展了。</li><li>第二种也不可能，左开右开极短路径是一条顶点序列为空的边，而现在的路径要求结尾边的顶点序列最后一个点为 $u$，矛盾。</li></ul></li></ul><h4 id="左开右闭极短路径"><a href="#左开右闭极短路径" class="headerlink" title="左开右闭极短路径"></a>左开右闭极短路径</h4><ul><li>先建反图，将路径上的顶点序列也反过来。</li><li>剩下的做法和“左闭右开极短路径”一样，证明也同理。</li></ul><h4 id="左闭右闭极短路径"><a href="#左闭右闭极短路径" class="headerlink" title="左闭右闭极短路径"></a>左闭右闭极短路径</h4><ul><li>可以通过第一问的方法可以得到若干条极短的合法（左闭右闭）路径。</li><li>但是，它往两边扩展，会不会有两个满足条件的边，它们扩展出来是同一条路径呢？</li><li>可以发现，求出来的极短的合法（左闭右闭）路径是两两不重复的。</li><li>证明：<ul><li>如果有重复，那就说明有一条极短的合法路径，上面出现了两条边 $(a_1,b_1),(a_2,b_2)$ 满足条件（这条边上的顶点序列上存在相邻的两个点 $a,b$）</li><li>不妨设在路径上 $(a_1,b_1)$ 在 $(a_2,b_2)$ 之前出现。那么 $(a_2,b_2)$ 是 $(a_1,b_1)$ 向右扩展时走到的。</li><li>那么，如果要加入 $(a_2,b_2)$ 这条边，那么在加入这条边之前的时刻，剩下将要经过的顶点序列中，前两个为 $(a_2,b_2)$。现在加入这条边后，将要经过的顶点序列中有新出现了 $(a_2,b_2)$，那么路径成环了，不可能长度 $\leq 2*n$。</li></ul></li><li>由于中心边唯一，扩展出的路径必定是极短路径。</li></ul><ul><li>可以发现，每个路径只有一种极短路径分解方法，否则就和极短的定义矛盾了。</li><li>由于这些路径唯一，所以这些路径组合拼接成的更长的路径，也是不重复的。</li><li>记 $dp1[0/1][0/1][i][j][k]$ 分别表示左开/闭，右开/闭，起点为 $i$，终点为 $j$，长度为 $k$ 的极短路径条数。</li><li>记 $dp2[k][i][0/1]$ 分别表示路径长度为 $k$，当前路径最后一个点为 $i$， 是开/闭的路径条数。</li><li>答案为 $\sum_k\sum_i dp2[k][i][1]$。</li><li>时间复杂度 $O(n^2m+n^3)$。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*********************************************************************</span></span><br><span class="line"><span class="comment"> * Source：安师大省选模拟2</span></span><br><span class="line"><span class="comment"> * Problem：path - T2  （CF331E1/E2）</span></span><br><span class="line"><span class="comment"> * Author：hydd</span></span><br><span class="line"><span class="comment"> * Date：2020/10/18</span></span><br><span class="line"><span class="comment">*********************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">pair</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,num[<span class="number">110</span>][<span class="number">110</span>],v[<span class="number">110</span>];</span><br><span class="line"><span class="keyword">int</span> top,s[<span class="number">21000</span>],top2,s2[<span class="number">21000</span>];</span><br><span class="line"><span class="keyword">int</span> ans,Ans[<span class="number">21000</span>];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec[<span class="number">21000</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> x,y,k;</span><br><span class="line">&#125; a[<span class="number">21000</span>];</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">Getchar</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> now[<span class="number">1</span>&lt;&lt;<span class="number">20</span>],*S,*T;</span><br><span class="line"><span class="keyword">if</span> (T==S)&#123;</span><br><span class="line">T=(S=now)+fread(now,<span class="number">1</span>,<span class="number">1</span>&lt;&lt;<span class="number">20</span>,<span class="built_in">stdin</span>);</span><br><span class="line"><span class="keyword">if</span> (T==S) <span class="keyword">return</span> EOF;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> *S++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> ch=Getchar();</span><br><span class="line"><span class="keyword">while</span> (ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">if</span> (ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">-1</span>;</span><br><span class="line">ch=Getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (ch&lt;=<span class="string">&#x27;9&#x27;</span>&amp;&amp;ch&gt;=<span class="string">&#x27;0&#x27;</span>) x=x*<span class="number">10</span>+ch-<span class="string">&#x27;0&#x27;</span>,ch=Getchar();</span><br><span class="line"><span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">pii <span class="title">get_path</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">bool</span> rev)</span></span>&#123;<span class="comment">//从正边/反边上走</span></span><br><span class="line"><span class="keyword">int</span> now=<span class="number">0</span>,y,e;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=top&amp;&amp;top&lt;=<span class="number">2</span>*n;i++)&#123;</span><br><span class="line">y=s[i]; e=num[x][y];</span><br><span class="line"><span class="keyword">if</span> (!e||(rev&amp;&amp;e&lt;=m)||(!rev&amp;&amp;e&gt;m)) <span class="keyword">return</span> pii(<span class="number">2</span>*n+<span class="number">1</span>,<span class="number">2</span>*n+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;(<span class="keyword">int</span>)vec[e].size();j++) s[++top]=vec[e][j];</span><br><span class="line">x=y; now++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> pii(top,x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> dp1[<span class="number">2</span>][<span class="number">2</span>][<span class="number">55</span>][<span class="number">55</span>][<span class="number">110</span>],dp2[<span class="number">110</span>][<span class="number">55</span>][<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> f[<span class="number">55</span>][<span class="number">55</span>][<span class="number">110</span>],g[<span class="number">55</span>][<span class="number">55</span>][<span class="number">110</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">(<span class="keyword">bool</span> rev)</span></span>&#123;<span class="comment">//路径是否反过来了</span></span><br><span class="line"><span class="built_in">memset</span>(f,<span class="number">0</span>,<span class="keyword">sizeof</span>(f));</span><br><span class="line"><span class="built_in">memset</span>(g,<span class="number">0</span>,<span class="keyword">sizeof</span>(g));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m*<span class="number">2</span>;i++)&#123;</span><br><span class="line"><span class="keyword">if</span> ((rev&amp;&amp;i&lt;=m)||(!rev&amp;&amp;i&gt;m)) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;(<span class="keyword">int</span>)vec[i].size();j++)</span><br><span class="line"><span class="keyword">if</span> (vec[i][j]==a[i].x)&#123;</span><br><span class="line">top=<span class="number">0</span>; <span class="keyword">for</span> (<span class="keyword">int</span> k=j<span class="number">-1</span>;k&gt;=<span class="number">0</span>;k--) s[++top]=vec[i][k];</span><br><span class="line">pii res=get_path(a[i].x,!rev);</span><br><span class="line"><span class="keyword">if</span> (res.first+<span class="number">1</span>&gt;<span class="number">2</span>*n) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> (j+<span class="number">1</span>==(<span class="keyword">int</span>)vec[i].size())</span><br><span class="line">g[res.second][a[i].y][res.first+<span class="number">1</span>]++;<span class="comment">//左闭右开</span></span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span> (vec[i][j+<span class="number">1</span>]!=a[i].y) <span class="keyword">continue</span>;</span><br><span class="line">top2=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=top;i&gt;=<span class="number">1</span>;i--) s2[++top2]=s[i];</span><br><span class="line">top=<span class="number">0</span>; <span class="keyword">for</span> (<span class="keyword">int</span> k=j+<span class="number">2</span>;k&lt;(<span class="keyword">int</span>)vec[i].size();k++) s[++top]=vec[i][k];</span><br><span class="line">pii res2=get_path(a[i].y,rev);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (res2.first+<span class="number">1</span>+res.first&gt;<span class="number">2</span>*n) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> (!ans)&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=top2;i++) Ans[++ans]=s2[i];</span><br><span class="line">Ans[++ans]=a[i].x; Ans[++ans]=a[i].y;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=top;i++) Ans[++ans]=s[i];</span><br><span class="line">&#125;</span><br><span class="line">f[res.second][res2.second][res2.first+<span class="number">1</span>+res.first]++;<span class="comment">//左闭右闭</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">freopen(<span class="string">&quot;path.in&quot;</span>,<span class="string">&quot;r&quot;</span>,<span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">&quot;path.out&quot;</span>,<span class="string">&quot;w&quot;</span>,<span class="built_in">stdout</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m); <span class="keyword">int</span> x,y,k;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">x=read(); y=read(); k=read();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=k;j++) v[j]=read();</span><br><span class="line"></span><br><span class="line">a[i].x=x; a[i].y=y; a[i].k=k;</span><br><span class="line">num[x][y]=i;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=k;j++) vec[i].push_back(v[j]);</span><br><span class="line"></span><br><span class="line">a[i+m].x=y; a[i+m].y=x; a[i+m].k=k;</span><br><span class="line">num[y][x]=i+m;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=k;j++) vec[i+m].push_back(v[k-j+<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!k) dp1[<span class="number">0</span>][<span class="number">0</span>][x][y][<span class="number">1</span>]++;</span><br><span class="line">&#125;</span><br><span class="line">work(<span class="literal">false</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=n*<span class="number">2</span>;k++)&#123;</span><br><span class="line">dp1[<span class="number">1</span>][<span class="number">1</span>][i][j][k]=f[i][j][k];</span><br><span class="line">dp1[<span class="number">1</span>][<span class="number">0</span>][i][j][k]=g[i][j][k];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (ans)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;ans;i++) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,Ans[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,Ans[ans]);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">&quot;0\n&quot;</span>);</span><br><span class="line">work(<span class="literal">true</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=n*<span class="number">2</span>;k++)</span><br><span class="line">dp1[<span class="number">0</span>][<span class="number">1</span>][i][j][k]=g[j][i][k];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=n*<span class="number">2</span>;k++)&#123;</span><br><span class="line">dp2[k][j][<span class="number">0</span>]=(dp2[k][j][<span class="number">0</span>]+dp1[<span class="number">1</span>][<span class="number">0</span>][i][j][k])%Mod;</span><br><span class="line">dp2[k][j][<span class="number">1</span>]=(dp2[k][j][<span class="number">1</span>]+dp1[<span class="number">1</span>][<span class="number">1</span>][i][j][k])%Mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> p=<span class="number">1</span>;p&lt;=n*<span class="number">2</span>;p++)&#123;</span><br><span class="line"><span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">res=(res+dp2[p][i][<span class="number">1</span>])%Mod;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> m=<span class="number">0</span>;m&lt;=<span class="number">1</span>;m++)</span><br><span class="line"><span class="keyword">if</span> (dp2[p][i][m])&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> s=<span class="number">0</span>;s&lt;=<span class="number">1</span>;s++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> x=<span class="number">1</span>;x&lt;=n;x++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> q=<span class="number">1</span>;q&lt;=n*<span class="number">2</span>-p;q++)</span><br><span class="line">dp2[p+q][x][s]=(dp2[p+q][x][s]+<span class="number">1l</span>l*dp2[p][i][m]*dp1[m^<span class="number">1</span>][s][i][x][q])%Mod;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,res);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="graph"><a href="#graph" class="headerlink" title="graph"></a>graph</h2><ul><li>建立一个这样的网络模型：<ul><li>新建一个汇点 $T$（不妨设它为$(-\inf,-\inf)$），在原图上选一个点（不妨选横坐标最小的点，保证平面图的性质），将 $T$ 和这个点连边。</li><li>每个点自带一个单位的流量，流量沿着原图的边可以双向流动。</li></ul></li><li>那么原图所有点的流出量-流入量=1。</li><li>可以发现，因为原图是个平面图，所以一个环内的点数是从环上流出环的流量总和-从环外流入环的流量总和。</li><li>如何求一个可行的流量呢？就直接随便搞一颗以 $T$ 为根的生成树即可，每个点往父亲的流量就是这个点的子树大小。</li><li>从环外流入环的流量总和=父亲在环上，自己在环外的点的子树大小之和。</li><li>从环上流出环的流量总和=父亲在环外，自己在环上的点的子树大小之和。</li><li>*这个大小就是边上的流量。</li></ul><ul><li>由于是平面图，所以对于环上的任意点，把它的所有出边按极角排序，那么往环外走的边是一段连续的区间。</li><li>答案=环上流出环的流量总和-从环外流入环的流量总和。对于每个在环上的点：<ul><li>“从环上流出环的流量总和=父亲在环外，自己在环上的点的子树大小之和”。当前点在环上，若父亲在环外，有贡献 $+sz[fa]$。</li><li>“从环外流入环的流量总和=父亲在环上，自己在环外的点的子树大小之和”。当前点在环上，若儿子在环外，有贡献 $-sz[son]$。</li><li>*流出为负，流入为正，类似于正向边和反向边。</li></ul></li><li>可以将每个点的出边极角排序，父亲的贡献设为 $+sz[]$，儿子的贡献设为 $-sz[]$，由于往环外走的边是一段连续的区间，求这个区间贡献之和即可。</li><li>怎么求这个区间呢？这个可以将每条边极角排序的排名记录下来，就可以得到区间的两个端点。（具体实现可以看代码）</li><li>因为题目没有说是顺时针还是逆时针方向，所以求出了区间的两个端点后，不知道哪一部分是在环内，哪一部分是在环外，所以我们要规定方向。</li><li>随便在环上选一个点 $O$，对环上的任意一条边，求出 $O$ 和它围成三角形的有向面积（叉积 $ab\sin\theta$），求和看正负即可判断是顺时针还是逆时针。</li><li>比如我们统一为逆时针，给出的是顺时针，就把给出的点 $reverse$ 一下即可。（具体实现看代码）</li></ul><ul><li>时间复杂度：<ul><li>预处理，求生成树 $O(n)$。</li><li>将每个点的出边极角排序，最坏情况下为 $O(m\log m)$。</li><li>求答案 $O(\sum k)$。</li></ul></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*********************************************************************</span></span><br><span class="line"><span class="comment"> * Source：安师大省选模拟2</span></span><br><span class="line"><span class="comment"> * Problem：graph - T3  （CF223E）</span></span><br><span class="line"><span class="comment"> * Author：hydd</span></span><br><span class="line"><span class="comment"> * Date：2020/10/17</span></span><br><span class="line"><span class="comment">*********************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">pair</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">int</span> n,m,q,k,a[<span class="number">110000</span>],cnt,tmp[<span class="number">110000</span>];</span><br><span class="line"><span class="keyword">int</span> edgenum=<span class="number">1</span>,vet[<span class="number">610000</span>],val[<span class="number">610000</span>],Next[<span class="number">610000</span>],Head[<span class="number">110000</span>];</span><br><span class="line"><span class="keyword">double</span> ang[<span class="number">610000</span>]; <span class="keyword">bool</span> vis[<span class="number">110000</span>];</span><br><span class="line"><span class="built_in">map</span>&lt;pii,<span class="keyword">int</span>&gt; rnk;</span><br><span class="line"><span class="built_in">vector</span>&lt;ll&gt; sum[<span class="number">110000</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line">node()&#123;&#125;</span><br><span class="line">node(<span class="keyword">int</span> _x,<span class="keyword">int</span> _y):x(_x),y(_y)&#123;&#125;</span><br><span class="line">&#125; p[<span class="number">110000</span>];</span><br><span class="line">node <span class="keyword">operator</span>-(<span class="keyword">const</span> node &amp;a,<span class="keyword">const</span> node &amp;b)&#123; <span class="keyword">return</span> node(a.x-b.x,a.y-b.y);&#125;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">Getchar</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> now[<span class="number">1</span>&lt;&lt;<span class="number">20</span>],*S,*T;</span><br><span class="line"><span class="keyword">if</span> (T==S)&#123;</span><br><span class="line">T=(S=now)+fread(now,<span class="number">1</span>,<span class="number">1</span>&lt;&lt;<span class="number">20</span>,<span class="built_in">stdin</span>);</span><br><span class="line"><span class="keyword">if</span> (T==S) <span class="keyword">return</span> EOF;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> *S++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> ch=Getchar();</span><br><span class="line"><span class="keyword">while</span> (ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">if</span> (ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">-1</span>;</span><br><span class="line">ch=Getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (ch&lt;=<span class="string">&#x27;9&#x27;</span>&amp;&amp;ch&gt;=<span class="string">&#x27;0&#x27;</span>) x=x*<span class="number">10</span>+ch-<span class="string">&#x27;0&#x27;</span>,ch=Getchar();</span><br><span class="line"><span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">    vet[++edgenum]=v;</span><br><span class="line">    Next[edgenum]=Head[u];</span><br><span class="line">Head[u]=edgenum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">vis[u]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">int</span> flow=<span class="number">1</span>,tmp;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> e=Head[u];e;e=Next[e])</span><br><span class="line"><span class="keyword">if</span> (!vis[vet[e]])&#123;</span><br><span class="line">tmp=dfs(vet[e]);</span><br><span class="line">val[e]+=tmp; val[e^<span class="number">1</span>]-=tmp;</span><br><span class="line">flow+=tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> flow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123; <span class="keyword">return</span> ang[a]&lt;ang[b];&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">cross</span><span class="params">(node x,node y)</span></span>&#123; <span class="keyword">return</span> <span class="number">1l</span>l*x.x*y.y<span class="number">-1l</span>l*x.y*y.x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">freopen(<span class="string">&quot;graph.in&quot;</span>,<span class="string">&quot;r&quot;</span>,<span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">&quot;graph.out&quot;</span>,<span class="string">&quot;w&quot;</span>,<span class="built_in">stdout</span>);</span><br><span class="line">n=read(); m=read(); <span class="keyword">int</span> u,v;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">u=read(); v=read();</span><br><span class="line">addedge(u,v); addedge(v,u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) p[i].x=read(),p[i].y=read();</span><br><span class="line">p[n+<span class="number">1</span>].x=<span class="number">-1e9</span>; p[n+<span class="number">1</span>].y=<span class="number">-1e9</span>;</span><br><span class="line"><span class="keyword">int</span> rt=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">if</span> (p[i].x&lt;p[rt].x) rt=i;</span><br><span class="line">addedge(n+<span class="number">1</span>,rt);</span><br><span class="line">dfs(n+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> u=<span class="number">1</span>;u&lt;=n;u++)&#123;</span><br><span class="line">cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> e=Head[u];e;e=Next[e])&#123;</span><br><span class="line">tmp[++cnt]=e; v=vet[e];</span><br><span class="line">ang[e]=<span class="built_in">atan2</span>(p[v].y-p[u].y,p[v].x-p[u].x);</span><br><span class="line">&#125;</span><br><span class="line">sort(tmp+<span class="number">1</span>,tmp+cnt+<span class="number">1</span>,cmp);</span><br><span class="line">sum[u].push_back(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)&#123;</span><br><span class="line">rnk[pii(u,vet[tmp[i]])]=i;</span><br><span class="line">sum[u].push_back(sum[u].back()+val[tmp[i]]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">q=read(); <span class="keyword">int</span> l,r;</span><br><span class="line"><span class="keyword">while</span> (q--)&#123;</span><br><span class="line">k=read();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++) a[i]=read();</span><br><span class="line">ll s=<span class="number">0</span>,ans=k;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;k;i++) s+=cross(p[a[i]]-p[a[<span class="number">1</span>]],p[a[i+<span class="number">1</span>]]-p[a[<span class="number">1</span>]]);</span><br><span class="line"><span class="keyword">if</span> (s&lt;<span class="number">0</span>) reverse(a+<span class="number">1</span>,a+k+<span class="number">1</span>);</span><br><span class="line"><span class="comment">//现在必定是逆时针</span></span><br><span class="line">a[<span class="number">0</span>]=a[k]; a[k+<span class="number">1</span>]=a[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++)&#123;</span><br><span class="line">l=rnk[pii(a[i],a[i+<span class="number">1</span>])];</span><br><span class="line">r=rnk[pii(a[i],a[i<span class="number">-1</span>])];</span><br><span class="line">ans+=sum[a[i]][r]-sum[a[i]][l<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">if</span> (l&gt;r) ans+=sum[a[i]][(<span class="keyword">int</span>)sum[a[i]].size()<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;count&quot;&gt;&lt;a href=&quot;#count&quot; class=&quot;headerlink&quot; title=&quot;count&quot;&gt;&lt;/a&gt;count&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;不想重新再手打一遍了 QAQ。&lt;/li&gt;
&lt;li&gt;算了再打一遍吧。&lt;/li&gt;
&lt;/ul&gt;
&lt;script</summary>
      
    
    
    
    <category term="省选模拟赛" scheme="http://hydd.cf/categories/%E7%9C%81%E9%80%89%E6%A8%A1%E6%8B%9F%E8%B5%9B/"/>
    
    
  </entry>
  
  <entry>
    <title>CF1188D</title>
    <link href="http://hydd.cf/2020/10/14/sol_22/"/>
    <id>http://hydd.cf/2020/10/14/sol_22/</id>
    <published>2020-10-13T16:00:00.000Z</published>
    <updated>2020-11-13T01:32:46.858Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><ul><li>给定 $n$ 个数字 $a_1,a_2,\cdots,a_n$，每次操作可以给某个 $a_i$ 加上 $2$ 的非负整数次幂。</li><li>求最少的操作次数使得 $n$ 个数相等。</li><li>$1\leq n\leq 10^5,0\leq a_i\leq 10^{17}$</li></ul><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><ul><li>不妨先将 $a$ 从小到大排序。</li><li>设最后每个数都等于 $a_n+x(x\geq 0)$。那么总代价为 $\sum\limits_{i=1}^n popcount(a_n+x-a_i)$。</li><li>现在要找一个 $x$ 使得答案最小。不妨先将 $a_i$ 变为原先的 $a_n-a_i$。</li><li>那么现在总代价为 $\sum\limits_{i=1}^n popcount(x+a_i)$。</li></ul><ul><li>从低到高考虑每一位，那么 $x+a_i$ 的第 $k$ 位是 $0/1$ 由以下三个条件决定：<ol><li>$x$ 的第 $k$ 位是 $0$ 还是 $1$。</li><li>$a_i$ 的第 $k$ 位是 $0$ 还是 $1$。</li><li>$x+a_i$ 的第 $k-1$ 位有没有向前进位。</li></ol></li><li>暴力的做法是从低到高枚举每一位，用 $2^n$ 的状态记录每个数有没有进位，显然复杂度接受不了。</li><li>但是可以发现，由于每个 $a_i$ 加的都是 $x$，所以 $a_i$ 的后 $k-1$ 位越大，越可能向第 $k$ 位进位。</li><li>所以，“每个数有没有进位”的状态数只有 $O(n)$ 个，每个进位状态为后 $k-1$ 位从小到大排序后的一个后缀。</li></ul><ul><li>记 $f[k][i]$ 表示考虑了后 $k$ 位，后 $k$ 位最大的 $i$ 个数进位的最小代价。</li><li>如何转移？考虑当前这一位 $x$ 是 $0$ 还是 $1$。</li><li>0：<ul><li>对答案的贡献：“前一位没进位且第 $k$ 位为 $1$ 的数“的个数 + ”前一位进位且第 $k$ 位为 $0$ 的数“的个数（$x+a_i$ 在这一位为 $1$）。</li><li>进位的数量：”前一位进位且第 $k$ 位为 $1$ 的数”的个数。</li></ul></li><li>1：<ul><li>对答案的贡献：“前一位进位且第 $k$ 位为 $1$ 的数“的个数 + ”前一位没进位且第 $k$ 位为 $0$ 的数“的个数（$x+a_i$ 在这一位为 $1$）。</li><li>进位的数量：$n-$”前一位没进位且第 $k$ 位为 $0$ 的数”的个数。</li></ul></li></ul><ul><li>至于如何求这些“个数”，就记个前缀和，存下后 $k$ 位从小到大前 $i$ 个中没进位数的个数和进位的数的个数即可。</li><li>可以用类似于基数排序的方法优化每次的排序，时间复杂度 $O(n \log V)$，其中 $V=\max{a_i}$。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll INF=<span class="number">1l</span>l&lt;&lt;<span class="number">60</span>;</span><br><span class="line"><span class="keyword">int</span> n,p[<span class="number">510000</span>],sum[<span class="number">2</span>][<span class="number">510000</span>];</span><br><span class="line"><span class="keyword">int</span> tmp1[<span class="number">510000</span>],tmp2[<span class="number">510000</span>];</span><br><span class="line">ll dp[<span class="number">60</span>][<span class="number">510000</span>],c1,c2,c3,p1,p2,m;</span><br><span class="line">ll sta,a[<span class="number">510000</span>];</span><br><span class="line"><span class="comment">/*bool cmp(int x,int y)&#123;</span></span><br><span class="line"><span class="comment">return (a[x]&amp;sta)&lt;(a[y]&amp;sta);</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//freopen(&quot;equal.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line"><span class="comment">//freopen(&quot;equal.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;a[i]);</span><br><span class="line">sort(a+<span class="number">1</span>,a+n+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) a[i]=a[n]-a[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> w=<span class="number">0</span>;w&lt;=<span class="number">58</span>;w++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++)</span><br><span class="line">dp[w][i]=INF;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) p[i]=i;</span><br><span class="line">dp[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> w=<span class="number">0</span>;w&lt;<span class="number">58</span>;w++)&#123;</span><br><span class="line">sta=(<span class="number">1l</span>l&lt;&lt;w)<span class="number">-1</span>;</span><br><span class="line"><span class="comment">//sort(p+1,p+n+1,cmp);</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">sum[<span class="number">0</span>][i]=sum[<span class="number">0</span>][i<span class="number">-1</span>];</span><br><span class="line">sum[<span class="number">1</span>][i]=sum[<span class="number">1</span>][i<span class="number">-1</span>];</span><br><span class="line">sum[(a[p[i]]&gt;&gt;w)&amp;<span class="number">1</span>][i]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> tmp=(sum[<span class="number">0</span>][n]-sum[<span class="number">0</span>][n-i])+sum[<span class="number">1</span>][n-i];</span><br><span class="line"><span class="keyword">int</span> sta=sum[<span class="number">1</span>][n]-sum[<span class="number">1</span>][n-i];</span><br><span class="line">dp[w+<span class="number">1</span>][sta]=min(dp[w+<span class="number">1</span>][sta],dp[w][i]+tmp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> tmp=(sum[<span class="number">1</span>][n]-sum[<span class="number">1</span>][n-i])+sum[<span class="number">0</span>][n-i];</span><br><span class="line"><span class="keyword">int</span> sta=n-sum[<span class="number">0</span>][n-i];</span><br><span class="line">dp[w+<span class="number">1</span>][sta]=min(dp[w+<span class="number">1</span>][sta],dp[w][i]+tmp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> cnt1=<span class="number">0</span>,cnt2=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">if</span> ((a[p[i]]&gt;&gt;w)&amp;<span class="number">1</span>) tmp1[++cnt1]=p[i];</span><br><span class="line"><span class="keyword">else</span> tmp2[++cnt2]=p[i];</span><br><span class="line"><span class="keyword">int</span> k=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt2;i++) p[++k]=tmp2[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt1;i++) p[++k]=tmp1[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,dp[<span class="number">58</span>][<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;给定 $n$ 个数字 $a_1,a_2,\cdots,a_n$，每次操作可以给某个 $a_i$ 加上 $2$ 的非负整数次幂。&lt;</summary>
      
    
    
    
    <category term="Codeforces" scheme="http://hydd.cf/categories/Codeforces/"/>
    
    
  </entry>
  
  <entry>
    <title>20201003 模拟赛题解</title>
    <link href="http://hydd.cf/2020/10/03/sol_21/"/>
    <id>http://hydd.cf/2020/10/03/sol_21/</id>
    <published>2020-10-02T16:00:00.000Z</published>
    <updated>2020-10-14T01:27:06.980Z</updated>
    
    <content type="html"><![CDATA[<h2 id="整肃"><a href="#整肃" class="headerlink" title="整肃"></a>整肃</h2><ul><li>可以发现，最后剩下一定是原矩阵的一个子矩形。</li><li>直接枚举左上角和右下角的时间复杂度是 $O(Tn^4)$ 的。</li><li>由于求的是矩形中 $1$ 的个数 $=k$，而矩形中 $1$ 的个数在上边界 $i$，下边界 $x$，左边界 $j$ 后，关于右边界 $y$ 从左到右是单调递增的，所以可以 $two\ pointers$，计算个数可以直接二维前缀和。需要步数即为 $\min(i-1,n-x)+\min(j-1,m-y)+(i-1)+(j-1)+(n-x)+(m-y)$</li><li>考场上由于一些细节只得了 $50pts$，因为有可能有 $k=0$ 的情况，此时矩形可能为空，即上边界可能大于下边界，左边界可能大于右边界，所以枚举的时候，下边界要从上边界减 $1$ 开始枚举。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> T,n,m,k,ans,s[<span class="number">210</span>][<span class="number">210</span>];</span><br><span class="line"><span class="keyword">char</span> t[<span class="number">210</span>];</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">Getchar</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> now[<span class="number">1</span>&lt;&lt;<span class="number">20</span>],*S,*T;</span><br><span class="line"><span class="keyword">if</span> (T==S)&#123;</span><br><span class="line">T=(S=now)+fread(now,<span class="number">1</span>,<span class="number">1</span>&lt;&lt;<span class="number">20</span>,<span class="built_in">stdin</span>);</span><br><span class="line"><span class="keyword">if</span> (T==S) <span class="keyword">return</span> EOF;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> *S++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> ch=Getchar();</span><br><span class="line"><span class="keyword">while</span> (ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">if</span> (ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">-1</span>;</span><br><span class="line">ch=Getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=x*<span class="number">10</span>+(ch-<span class="string">&#x27;0&#x27;</span>),ch=Getchar();</span><br><span class="line"><span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getsum</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j,<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> s[x][y]-s[x][j<span class="number">-1</span>]-s[i<span class="number">-1</span>][y]+s[i<span class="number">-1</span>][j<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">freopen(<span class="string">&quot;a.in&quot;</span>,<span class="string">&quot;r&quot;</span>,<span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">&quot;a.out&quot;</span>,<span class="string">&quot;w&quot;</span>,<span class="built_in">stdout</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;T);</span><br><span class="line"><span class="keyword">while</span> (T--)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;n,&amp;m,&amp;k);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,t+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">s[i][j]=s[i<span class="number">-1</span>][j]+s[i][j<span class="number">-1</span>]-s[i<span class="number">-1</span>][j<span class="number">-1</span>]+(t[j]-<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">ans=INF;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line"><span class="keyword">int</span> y=m;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> x=i<span class="number">-1</span>;x&lt;=n;x++)&#123;<span class="comment">//注意为下界为i-1</span></span><br><span class="line"><span class="keyword">while</span> (y&gt;=j&amp;&amp;getsum(i,j,x,y)&gt;k) y--;<span class="comment">//注意是&gt;=j而不是&gt;j</span></span><br><span class="line"><span class="keyword">if</span> (getsum(i,j,x,y)==k) ans=min(ans,min(i<span class="number">-1</span>,n-x)+min(j<span class="number">-1</span>,m-y)+(i<span class="number">-1</span>)+(j<span class="number">-1</span>)+(n-x)+(m-y));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (ans==INF) ans=<span class="number">-1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="情报"><a href="#情报" class="headerlink" title="情报"></a>情报</h2><p>将每个点按与初始有情报的点之间的最短路长分层。如果不连通则无解。</p><p>将初始有情报的点所在的层数设为 $0$，设层数最大的点的层数为 $d$。</p><p>结论1：答案 $\leqslant d+1$。</p><p>具体的方法是每个点收到情报后，都按照先（上）后（下）的顺序传，即在第一天，第 $0$ 层的点传（上），在第二天，第 $0$ 层的点传（下），第 $1$ 层的点传（上），在第三天，第 $1$ 层的点传（下），第 $2$ 层的点传（上），以此类推。那么 $d+1$ 天所有点都收到了情报。</p><p>结论2：答案 $\geqslant d$。</p><p>不管怎样，一份情报如果要传到层数最大的点，至少需要 $d$ 天。</p><p>我们 $2^n$ 枚举每个点是先传（上）还是先传（下），如果当前没有先传的情报就等着，否则就传先传的情报，然后传后传的情报。</p><p>再考虑答案 $=d$ 需要什么条件：对于所有层数 $=d$ 的点，都得有一条从初始有情报的点到当前点的 path，满足长度为 $d$，且路径上所有点都先传（上），还得有一条从初始有情报的点到当前点的 path，满足长度为 $d$，且路径上所有点都先传（下）。</p><p>为什么呢？</p><ul><li>如果不存在这样一条路径，那么到当前点的情报不能每天都往下走一层（因为分层图的定义，后传的话相当于停传一天）。那么答案就不可能达到 $d$ 了。</li><li>如果都存在，那么每个深度最深的点都可以在 $d$ 天得到情报。将不在任何 path 上的点，把它都当做先传（上）。而深度为 $c&lt;d$ 的点，必定有一条长度 $c$ 的路径，使得路径为（下）（下）…（下）（上）（上）…（上）或为（上）（上）…（上），那么答案不超过 $c+1\leqslant d$，所以必定合法。</li></ul><p>所以看是否有满足条件的状态即可。而怎么判定呢？</p><p>我们记 $trans[sta]$ 表示 $sta$ 中的点，通过一步可以走到哪些点。</p><p>将为（上）的点或深度 $=d$ 的点的状态记为 $t1$，为（下）的点或深度 $=d$ 的点的状态记为 $t2$，深度 $=d$ 的状态为 $t$。</p><p>将初始有情报的（上）记作 $sta1$，每次令 $sta1=trans[sta1]\operatorname{And} t1$，最后如果 $sta1\operatorname{And} t=t$，那么说明所有层数 $=d$ 的点都有（上）的路径，同理做（下）的情况，判断即可。</p><p>考场上由于一些细节只得了 $20pts$，原因是 $trans$ 没清空。</p><p>时间复杂度 $O(2^nn)$。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> T,n,sta,d,now,dep[<span class="number">25</span>];</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">25</span>],trans[<span class="number">1100000</span>]; <span class="keyword">char</span> t[<span class="number">25</span>];</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; que;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getdep</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">dep[i]=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">if</span> (sta&amp;(<span class="number">1</span>&lt;&lt;i))&#123;</span><br><span class="line">que.push(i);</span><br><span class="line">dep[i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> res=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">while</span> (!que.empty())&#123;</span><br><span class="line"><span class="keyword">int</span> u=que.front(); que.pop();</span><br><span class="line">res=dep[u];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line"><span class="keyword">if</span> ((a[u]&amp;(<span class="number">1</span>&lt;&lt;i))&amp;&amp;dep[i]==<span class="number">-1</span>)&#123;</span><br><span class="line">que.push(i);</span><br><span class="line">dep[i]=dep[u]+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">now=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span> (dep[i]==<span class="number">-1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">if</span> (dep[i]==res) now|=(<span class="number">1</span>&lt;&lt;i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span> S)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=d;i++) s=trans[s]&amp;S;</span><br><span class="line"><span class="keyword">return</span> ((s&amp;now)==now);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">freopen(<span class="string">&quot;b.in&quot;</span>,<span class="string">&quot;r&quot;</span>,<span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">&quot;b.out&quot;</span>,<span class="string">&quot;w&quot;</span>,<span class="built_in">stdout</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;T);</span><br><span class="line"><span class="keyword">while</span> (T--)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,t); sta=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line"><span class="keyword">if</span> (t[i]==<span class="string">&#x27;Y&#x27;</span>) sta|=(<span class="number">1</span>&lt;&lt;i);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,t);</span><br><span class="line">t[i]=<span class="string">&#x27;Y&#x27;</span>; a[i]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line"><span class="keyword">if</span> (t[j]==<span class="string">&#x27;Y&#x27;</span>) a[i]|=(<span class="number">1</span>&lt;&lt;j);</span><br><span class="line">&#125;</span><br><span class="line">d=getdep();</span><br><span class="line"><span class="keyword">if</span> (d==<span class="number">-1</span>)&#123; <span class="built_in">puts</span>(<span class="string">&quot;-1&quot;</span>); <span class="keyword">continue</span>;&#125;</span><br><span class="line"><span class="keyword">if</span> (d==<span class="number">0</span>)&#123; <span class="built_in">puts</span>(<span class="string">&quot;0&quot;</span>); <span class="keyword">continue</span>;&#125;</span><br><span class="line"><span class="keyword">int</span> upperlim=(<span class="number">1</span>&lt;&lt;n)<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=upperlim;i++)&#123;</span><br><span class="line">trans[i]=<span class="number">0</span>;<span class="comment">//!!!!!!!!</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line"><span class="keyword">if</span> (i&amp;(<span class="number">1</span>&lt;&lt;j)) trans[i]|=a[j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans=d+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=upperlim;i++)</span><br><span class="line"><span class="keyword">if</span> (check(i&amp;sta,i|now)&amp;&amp;check((~i)&amp;sta,(~i)|now))&#123;</span><br><span class="line">ans=d;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="研发"><a href="#研发" class="headerlink" title="研发"></a>研发</h2><p>首先题目的要求相当于对于每一位，所有 $w$ 里只有一个这一位为 $1$。</p><p>题目里规定了上界，我们就记每个数有没有压上界。</p><p>设 $dp[i][sta]$ 表示，从高到低考虑到第 $i$ 位，$sta$ 中的数压上界的方案数。</p><p>然后就转移，一种是这一位没有 $1$，一种是有 $1$ 在不压上界的数上，一种是有 $1$ 在压上界且上界为 $1$ 的数上，分别转移即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Mod=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"><span class="keyword">int</span> n,dp[<span class="number">64</span>][<span class="number">131072</span>]; ll r[<span class="number">32</span>];</span><br><span class="line"><span class="keyword">int</span> cnt,tmp[<span class="number">32</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123; <span class="keyword">return</span> x+y&gt;=Mod?x+y-Mod:x+y;&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">freopen(<span class="string">&quot;c.in&quot;</span>,<span class="string">&quot;r&quot;</span>,<span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">&quot;c.out&quot;</span>,<span class="string">&quot;w&quot;</span>,<span class="built_in">stdout</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;r[i]);</span><br><span class="line"><span class="keyword">int</span> upperlim=(<span class="number">1</span>&lt;&lt;n)<span class="number">-1</span>;</span><br><span class="line">dp[<span class="number">60</span>][upperlim]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">59</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> s=<span class="number">0</span>;s&lt;=upperlim;s++)&#123;</span><br><span class="line"><span class="keyword">int</span> now=dp[i+<span class="number">1</span>][s]; <span class="keyword">if</span> (!now) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">int</span> cnt=<span class="number">0</span>,news=<span class="number">0</span>,tot=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;n;k++)</span><br><span class="line"><span class="keyword">if</span> (!(s&amp;(<span class="number">1</span>&lt;&lt;k))) tot++;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!(r[k]&amp;(<span class="number">1l</span>l&lt;&lt;i))) news|=(<span class="number">1</span>&lt;&lt;k);<span class="comment">//这个数压上界0</span></span><br><span class="line"><span class="keyword">else</span> tmp[++cnt]=k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=cnt;k++) dp[i][news|(<span class="number">1</span>&lt;&lt;tmp[k])]=add(dp[i][news|(<span class="number">1</span>&lt;&lt;tmp[k])],now);<span class="comment">//这个数压上界1</span></span><br><span class="line">dp[i][news]=(dp[i][news]+<span class="number">1l</span>l*tot*now)%Mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*for (int i=0;i&lt;4;i++,puts(&quot;&quot;))</span></span><br><span class="line"><span class="comment">for (int j=0;j&lt;=upperlim;j++)</span></span><br><span class="line"><span class="comment">printf(&quot;%d &quot;,dp[i][j]);*/</span></span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> s=<span class="number">0</span>;s&lt;=upperlim;s++) ans=add(ans,dp[<span class="number">0</span>][s]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="检阅"><a href="#检阅" class="headerlink" title="检阅"></a>检阅</h2><p>首先算出从 $(1,1)$ 到每个点所能经过的最多的重要点的个数和每个点到 $(n,m)$ 所能经过的最多的重要点的个数，分别记为 $f[]$ 和 $g[]$。在求出从 $(1,1)$ 到 $(n,m)$ 所能经过的最多的重要点的个数，记作 $mx$。具体做法是先离散化，然后按照坐标排序，之后从前往后/从后往前，做两遍，树状数组维护前/后缀 $max$ 即可。</p><p>如果 $f[u]+g[u]=mx$，那么这个点可以在路径上。将这些点的 $tot[f[u]]++$。</p><p>在扫一遍 $f[u]+g[u]=mx$ 的点，如果 $tot[f[u]]=1$，那么它是路径上的必经点，否则不是。</p><p>最后输出符合条件的点数即可。</p><p>考场上由于一些细节只得了 $10pts$，我树状数组的时候把数给加了上去。。。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> r,c,k,tree[<span class="number">110000</span>];</span><br><span class="line"><span class="keyword">int</span> f[<span class="number">110000</span>],g[<span class="number">110000</span>],tot[<span class="number">110000</span>];</span><br><span class="line"><span class="keyword">int</span> cntx,tmpx[<span class="number">110000</span>],cnty,tmpy[<span class="number">110000</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> node &amp;a) <span class="keyword">const</span>&#123; <span class="keyword">return</span> x&lt;a.x||(x==a.x&amp;&amp;y&lt;a.y);&#125;</span><br><span class="line">&#125; a[<span class="number">110000</span>];</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">Getchar</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> now[<span class="number">1</span>&lt;&lt;<span class="number">20</span>],*S,*T;</span><br><span class="line"><span class="keyword">if</span> (T==S)&#123;</span><br><span class="line">T=(S=now)+fread(now,<span class="number">1</span>,<span class="number">1</span>&lt;&lt;<span class="number">20</span>,<span class="built_in">stdin</span>);</span><br><span class="line"><span class="keyword">if</span> (T==S) <span class="keyword">return</span> EOF;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> *S++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> ch=Getchar();</span><br><span class="line"><span class="keyword">while</span> (ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">if</span> (ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">-1</span>;</span><br><span class="line">ch=Getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=x*<span class="number">10</span>+(ch-<span class="string">&#x27;0&#x27;</span>),ch=Getchar();</span><br><span class="line"><span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (;x&lt;=cnty;x+=x&amp;-x) tree[x]=max(tree[x],y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (;x;x-=x&amp;-x) res=max(res,tree[x]);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">freopen(<span class="string">&quot;d.in&quot;</span>,<span class="string">&quot;r&quot;</span>,<span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">&quot;d.out&quot;</span>,<span class="string">&quot;w&quot;</span>,<span class="built_in">stdout</span>);</span><br><span class="line">r=read(); c=read();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> n=read(),x,y;n;n--)&#123;</span><br><span class="line">x=read(); y=read();</span><br><span class="line"><span class="keyword">if</span> (x&lt;<span class="number">1</span>||y&lt;<span class="number">1</span>||x&gt;r||y&gt;c) <span class="keyword">continue</span>;</span><br><span class="line">k++; a[k].x=x; a[k].y=y;</span><br><span class="line">tmpx[++cntx]=a[k].x; tmpy[++cnty]=a[k].y;</span><br><span class="line">&#125;</span><br><span class="line">sort(tmpx+<span class="number">1</span>,tmpx+cntx+<span class="number">1</span>); cntx=unique(tmpx+<span class="number">1</span>,tmpx+cntx+<span class="number">1</span>)-tmpx<span class="number">-1</span>;</span><br><span class="line">sort(tmpy+<span class="number">1</span>,tmpy+cnty+<span class="number">1</span>); cnty=unique(tmpy+<span class="number">1</span>,tmpy+cnty+<span class="number">1</span>)-tmpy<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++)&#123;</span><br><span class="line">a[i].x=lower_bound(tmpx+<span class="number">1</span>,tmpx+cntx+<span class="number">1</span>,a[i].x)-tmpx;</span><br><span class="line">a[i].y=lower_bound(tmpy+<span class="number">1</span>,tmpy+cnty+<span class="number">1</span>,a[i].y)-tmpy;</span><br><span class="line">&#125;</span><br><span class="line">sort(a+<span class="number">1</span>,a+k+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnty;i++) tree[i]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++)&#123;</span><br><span class="line">f[i]=query(a[i].y)+<span class="number">1</span>;</span><br><span class="line">add(a[i].y,f[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnty;i++) tree[i]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=k;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line">g[i]=query(cnty-a[i].y+<span class="number">1</span>)+<span class="number">1</span>;</span><br><span class="line">add(cnty-a[i].y+<span class="number">1</span>,g[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mx=<span class="number">0</span>,ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++) mx=max(mx,f[i]+g[i]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++)</span><br><span class="line"><span class="keyword">if</span> (f[i]+g[i]==mx) tot[f[i]]++;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++)</span><br><span class="line"><span class="keyword">if</span> (f[i]+g[i]==mx&amp;&amp;tot[f[i]]==<span class="number">1</span>) ans++;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;整肃&quot;&gt;&lt;a href=&quot;#整肃&quot; class=&quot;headerlink&quot; title=&quot;整肃&quot;&gt;&lt;/a&gt;整肃&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;可以发现，最后剩下一定是原矩阵的一个子矩形。&lt;/li&gt;
&lt;li&gt;直接枚举左上角和右下角的时间复杂度是 $O(Tn^4)$ 的。&lt;</summary>
      
    
    
    
    <category term="CSP-S模拟赛" scheme="http://hydd.cf/categories/CSP-S%E6%A8%A1%E6%8B%9F%E8%B5%9B/"/>
    
    
  </entry>
  
  <entry>
    <title>一些有趣的题</title>
    <link href="http://hydd.cf/2020/09/30/some_problem/"/>
    <id>http://hydd.cf/2020/09/30/some_problem/</id>
    <published>2020-09-29T16:00:00.000Z</published>
    <updated>2020-11-16T07:16:16.916Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概率题"><a href="#概率题" class="headerlink" title="概率题"></a>概率题</h3><h4 id="problem-1"><a href="#problem-1" class="headerlink" title="problem 1"></a>problem 1</h4><p>一个圆中等概率随机选取 $4$ 个点，那么存在一条直径，使得点全在直径一侧的概率是？</p><p>解答参考：<a href="https://www.zhihu.com/question/339701586/answer/789026122">https://www.zhihu.com/question/339701586/answer/789026122</a></p><ul><li>不妨设没有两个点 $A,B$，使得 $O,A,B$ 三点共线。因为这样的概率$\rightarrow 0$。</li><li>定义点 $A$ 为 “最右点” 当且仅当剩下三个点的圆心角都在 $A$ 的圆心角+90°之内。</li><li>我们不妨来研究一下“最右点”和答案的关系。<ol><li>如果四个点处于同一半圆，当且仅当存在“最右点”。</li><li>“最右点”要么没有，要么只有一个，所以每个点是“最右点”是互斥的。</li><li>第一次、第二次选的点、第三次、第四次选的点，成为“最右点”的概率都是$\frac 18$，且它们互不影响。</li></ol></li><li>那么，概率为 $4\times \frac 18=\frac 12$。</li><li>这个问题可以推广到随机选取 $n$ 个点，概率为 $\frac n{2^{n-1}}$。</li></ul><h4 id="problem-2"><a href="#problem-2" class="headerlink" title="problem 2"></a>problem 2</h4><p>$S$ 是集合 $1,2,\cdots,2004$ 的子集，$S$ 中的任意两个数的差不等于 $4$ 或 $7$，问 $S$ 中最多含有多少个元素？</p><p>解答参考：<a href="https://wenku.baidu.com/view/e634ddcc69eae009581becc1.html">https://wenku.baidu.com/view/e634ddcc69eae009581becc1.html</a></p><ul><li>我们将任意连续 $11$ 个数排成一圈，如右图所示：<img src="/pic2.png" alt=""></li><li>显然，由题目条件，相邻的两个数不能同时选，那么最多只能选 $5$ 个数。即每 $11$ 个数至多只能选 $5$ 个数。又因为 $2004=182\times 11+2$，所以至多能选 $182\times 5+2=912$ 个数。</li><li>其次，令 $S=\{x|x=11k+t,k\in \mathcal{Z},t=1,2,4,7,10,1\leqslant x\leqslant 2004\}$ ，那么 $S$ 满足题目条件，且 $|S|=912$。故答案为 $912$。</li></ul><h3 id="通信题"><a href="#通信题" class="headerlink" title="通信题"></a>通信题</h3><h4 id="problem-1-1"><a href="#problem-1-1" class="headerlink" title="problem 1"></a>problem 1</h4><p>解答参考：<a href="https://www.bilibili.com/video/BV1UD4y1U7or">https://www.bilibili.com/video/BV1UD4y1U7or</a></p><p>有一个 $64$ 个格子的棋盘，每个格子上放着一个正面朝上或反面朝上的棋子。有一个格子下有硬币。</p><p>有两个人想得到这枚硬币。开始前，两人均不知道棋盘上每个棋子的正反，只知道是个 $8\times 8$ 的棋盘，但他们可以商量一个策略。</p><p>第一个人先可以看到棋盘上每个棋子的正反，同时裁判会告诉第一个人钥匙在哪个棋子的下面。然后这个人必须要翻转且仅翻转一枚棋子，然后离开。</p><p>然后，第二个人再看到棋盘，他只知道现在棋盘上每个棋子的正反，要说出硬币的位置。</p><p>问是否有固定策略。</p><ul><li>首先考虑只有 $2$ 个格子怎么做。不妨设 $0$ 为正面，$1$ 为反面。</li><li>对于第一个人，如果硬币在第一个位置，它要翻成 $0,0$ 或 $0,1$ 中的一种。如果在第二个位置，他要翻成 $1,0$ 或 $1,1$ 中的一种。可以发现，不管初始局面如何，第一个人都可以通过一步达到要求。</li><li>为什么呢，<img src="/pic.png" alt="">，因为每个点都可以通过走一条边到达一个红点和蓝点，点代表的是局面，颜色代表的是硬币的位置。</li><li>我们可以轻易得到 $3$ 个格子是无解的。$3$ 个格子相当于一个立方体，每个顶点有三条边，相邻的点分别为红、绿、蓝三种颜色，每个点最多影响 $3$ 个点的相邻点，所以至少有 $3$ 个红顶点，$3$ 个绿顶点，$3$ 个蓝顶点。而总共只有 $8$ 个顶点，所以不合法。发现只有当 $\frac{2^n}n\in\mathcal Z$ 合法，即 $n\mid 2^n$，也就是说 $n$ 为 $2$ 的次幂。</li><li>那么显然 $64$ 个格子是合法的。</li><li>那么具体策略是什么呢？</li><li>不妨将每个位置标号为 $0,1,2,\cdots,63$，设有硬币的格子为 $x$。将反面棋子的位置异或起来，记为 $y$。</li><li>将 $x\oplus y$ 翻转，那么硬币的位置为当前状态下反面棋子的位置的异或和。</li><li>为什么呢？因为 $y\oplus(x\oplus y)=x$，就做完了。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;概率题&quot;&gt;&lt;a href=&quot;#概率题&quot; class=&quot;headerlink&quot; title=&quot;概率题&quot;&gt;&lt;/a&gt;概率题&lt;/h3&gt;&lt;h4 id=&quot;problem-1&quot;&gt;&lt;a href=&quot;#problem-1&quot; class=&quot;headerlink&quot; title=&quot;pro</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>城市</title>
    <link href="http://hydd.cf/2020/09/24/sol_3/"/>
    <id>http://hydd.cf/2020/09/24/sol_3/</id>
    <published>2020-09-23T16:00:00.000Z</published>
    <updated>2020-10-01T04:55:53.258Z</updated>
    
    <content type="html"><![CDATA[<p>设答案乘 $n^i$ 后的值为 $ans_i$。则：</p><script type="math/tex; mode=display">\begin{align*}ans_i&=\sum_{i\texttt{次操作后得到的}\\\texttt{可重有序点集}S}\quad\quad\quad\sum_{\texttt{连通块}P}[S\texttt{中的点都在}P\texttt{中}]\\&=\sum_{\texttt{连通块}P}\sum_{i\texttt{次操作后得到的}\\\texttt{可重有序点集}S}\quad[S\texttt{中的点都在}P\texttt{中}]\\&=\sum_{\texttt{连通块}P}|P|^i\end{align*}</script><p>如果直接要求这个 $|P|^i$，要维护所有大小的连通块个数，而连通块大小可以达到 $O(n)$ 级别。</p><p>然后这里有个套路，将 $P^i$ 用斯特林数展开。展开公式：$x^k=\sum \limits_{i=1}^{x}S(k,i)C(x,i)i! $。（下界也可以从 $0$ 开始）</p><p>考虑证明：$x^k$ 可以理解为有 $x$ 个不同的盒子，把 $k$ 个不同的球放入盒子中的方案数，允许空盒。</p><p>现在把”允许空盒“转化成”不允许空盒“（所有盒子都至少放入一个球）</p><p>首先枚举非空的盒子个数，设为 $i$，那么存在 $k−i$ 个空盒。</p><p>选出这 $i$ 个不同的非空盒子有 $C(x,i)$ 种方案，将 $k$ 个不同的球放入 $i$ 个无序非空盒子有 $S(k,i)$ 种方案，现在这些盒子是有序的，再乘上 $i!$ 就是结果。</p><script type="math/tex; mode=display">\begin{align*}ans_i&=\sum_{\texttt{连通块}P}|P|^i\\&=\sum_{\texttt{连通块}P}\sum_{j=0}^iS(i,j)C(|P|,j)j!\\&=\sum_{j=0}^iS(i,j)j!\sum_{\texttt{连通块}P}C(|P|,j)\\\end{align*}</script><p>那么现在就要求 $\sum\limits_{\texttt{连通块}P}C(|P|,i),\forall 0\leqslant i\leqslant k$。</p><p><br/></p><p>考虑树形 $dp$，设 $dp[u][i]$ 表示以 $u$ 为根的所有连通块 $P$ 的 $C(|P|,i)$ 之和。</p><p>观察大小为 $a$ 的连通块和大小为 $b$ 的连通块合并后，现在的 $C(|P|,i)$ 的值和原来的值有什么关系，有$C(|a|+|b|,i)=\sum\limits_{j=0}^{|a|+|b|} C(|a|,j)C(|b|,|a|+|b|-j)$，可以直接背包合并（卷积），时间复杂度 $O(nk)$。</p><p><br/></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*********************************************************************</span></span><br><span class="line"><span class="comment"> * Source：zr09 - day2</span></span><br><span class="line"><span class="comment"> * Problem：city - T4</span></span><br><span class="line"><span class="comment"> * Author：hydd</span></span><br><span class="line"><span class="comment"> * Date：2020/9/22</span></span><br><span class="line"><span class="comment">*********************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="comment">//#define File(x) freopen(x&quot;.in&quot;,&quot;r&quot;,stdin);freopen(x&quot;.out&quot;,&quot;w&quot;,stdout)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">int</span> n,k,dp[<span class="number">200005</span>][<span class="number">105</span>],S[<span class="number">105</span>][<span class="number">105</span>],sz[<span class="number">200005</span>],f[<span class="number">200005</span>],tmp[<span class="number">200005</span>];</span><br><span class="line"><span class="keyword">int</span> edgenum,vet[<span class="number">400005</span>],Next[<span class="number">400005</span>],Head[<span class="number">200005</span>];</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">Getchar</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> now[<span class="number">1</span>&lt;&lt;<span class="number">20</span>],*S,*T;</span><br><span class="line"><span class="keyword">if</span> (T==S)&#123;</span><br><span class="line">T=(S=now)+fread(now,<span class="number">1</span>,<span class="number">1</span>&lt;&lt;<span class="number">20</span>,<span class="built_in">stdin</span>);</span><br><span class="line"><span class="keyword">if</span> (T==S) <span class="keyword">return</span> EOF;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> *S++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> ch=Getchar();</span><br><span class="line"><span class="keyword">while</span> (ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">if</span> (ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">-1</span>;</span><br><span class="line">ch=Getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (ch&lt;=<span class="string">&#x27;9&#x27;</span>&amp;&amp;ch&gt;=<span class="string">&#x27;0&#x27;</span>) x=x*<span class="number">10</span>+ch-<span class="string">&#x27;0&#x27;</span>,ch=Getchar();</span><br><span class="line"><span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll x,ll a)</span></span>&#123;</span><br><span class="line">ll res=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (a)&#123;</span><br><span class="line"><span class="keyword">if</span> (a&amp;<span class="number">1</span>) res=res*x%Mod;</span><br><span class="line">x=x*x%Mod; a&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">vet[++edgenum]=v;</span><br><span class="line">Next[edgenum]=Head[u];</span><br><span class="line">Head[u]=edgenum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa)</span></span>&#123;</span><br><span class="line">dp[u][<span class="number">0</span>]=<span class="number">1</span>; dp[u][<span class="number">1</span>]=<span class="number">1</span>; sz[u]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> e=Head[u];e;e=Next[e])</span><br><span class="line"><span class="keyword">if</span> (vet[e]!=fa)&#123;</span><br><span class="line">dfs(vet[e],u);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=k&amp;&amp;i&lt;=sz[u]+sz[vet[e]];i++) tmp[i]=dp[u][i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=k&amp;&amp;i&lt;=sz[u];i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;i+j&lt;=k&amp;&amp;j&lt;=sz[vet[e]];j++)</span><br><span class="line">tmp[i+j]=(tmp[i+j]+<span class="number">1l</span>l*dp[u][i]*dp[vet[e]][j])%Mod;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=k&amp;&amp;i&lt;=sz[u]+sz[vet[e]];i++) dp[u][i]=tmp[i];</span><br><span class="line">sz[u]+=sz[vet[e]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=k&amp;&amp;i&lt;=sz[u];i++) f[i]=(f[i]+dp[u][i])%Mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">freopen(<span class="string">&quot;city.in&quot;</span>,<span class="string">&quot;r&quot;</span>,<span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">&quot;city.out&quot;</span>,<span class="string">&quot;w&quot;</span>,<span class="built_in">stdout</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;k); <span class="keyword">int</span> u,v;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">u=read(); v=read();</span><br><span class="line">addedge(u,v); addedge(v,u);</span><br><span class="line">&#125;</span><br><span class="line">S[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=k;j++)</span><br><span class="line">S[i][j]=(S[i<span class="number">-1</span>][j<span class="number">-1</span>]+<span class="number">1l</span>l*S[i<span class="number">-1</span>][j]*j)%Mod;</span><br><span class="line">dfs(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">int</span> invn=qpow(n,Mod<span class="number">-2</span>),tmp=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>,mul=<span class="number">1</span>; tmp=<span class="number">1l</span>l*tmp*invn%Mod;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=i;j++)&#123;</span><br><span class="line">mul=<span class="number">1l</span>l*mul*j%Mod;</span><br><span class="line">ans=(ans+<span class="number">1l</span>l*mul*S[i][j]%Mod*f[j])%Mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,<span class="number">1l</span>l*ans*tmp%Mod);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;设答案乘 $n^i$ 后的值为 $ans_i$。则：&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;
\begin{align*}
ans_i&amp;=\sum_{i\texttt{次操作后得到的}\\\texttt{可重有序点集}S}\qu</summary>
      
    
    
    
    <category term="CSP-S模拟赛" scheme="http://hydd.cf/categories/CSP-S%E6%A8%A1%E6%8B%9F%E8%B5%9B/"/>
    
    
    <category term="树形dp" scheme="http://hydd.cf/tags/%E6%A0%91%E5%BD%A2dp/"/>
    
    <category term="概率/期望" scheme="http://hydd.cf/tags/%E6%A6%82%E7%8E%87-%E6%9C%9F%E6%9C%9B/"/>
    
    <category term="斯特林数" scheme="http://hydd.cf/tags/%E6%96%AF%E7%89%B9%E6%9E%97%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>ckw的树</title>
    <link href="http://hydd.cf/2020/09/24/sol_4/"/>
    <id>http://hydd.cf/2020/09/24/sol_4/</id>
    <published>2020-09-23T16:00:00.000Z</published>
    <updated>2020-10-13T01:36:06.601Z</updated>
    
    <content type="html"><![CDATA[<p>设 $f[u]$ 表示从 $u$ 开始游走的期望时间。不妨设 $f[u]=a_uf[fa(fa(u))]+b_uf[fa(u)]+c_usum[fa(u)]+d_u$。</p><p>不妨设 $fa(1)=0,fa(0)=0$，$f[0]=0$。设 $t_u$ 为与 $u$ 距离不超过 $2$ 的点的个数。</p><p>若它的子树中每个点的 $f[v]$ 都可以用 $a_v,b_v,c_v,d_v$ 表示出来，考虑怎么将 $f[u]$ 用 $a_u,b_u,c_u,d_u$ 表示出来。</p><p>根据题意，每次可以从 $u$ 到距离不超过 $2$ 的任意一个节点，记 $sum[u]=\sum\limits_{v\in son(u)}f[v]$，那么满足：</p><ul><li>$t_uf[u]=f[fa(fa(u))]+f[fa(u)]+sum[fa(u)]+sum[u]+\sum\limits_{v\in son(u)}sum[v]$（这个点不是标记点）</li><li>$f[u]=0$（这个点是标记点）</li></ul><p>若这个点是标记点，则 $a_u=0,b_u=0,c_u=0,d_u=0$，以下考虑不是标记点的情况。</p><p>我们发现这个 $sum[u]$ 和 $sum[v]$ 比较恶心，我们考虑把它拆开：</p><script type="math/tex; mode=display">\begin{align*}sum[u]&=\sum_{v\in son(u)} f[v]\\&=\sum_{v\in son(u)}(a_vf[fa(fa(v))]+b_vf[fa(v)]+c_vsum[fa(v)]+d_v)\\&=\sum_{v\in son(u)}(a_vf[fa(u)]+b_vf[u]+c_vsum[u]+d_v)\\&=\sum_{v\in son(u)}a_vf[fa(u)]+\sum_{v\in son(u)}b_vf[u]+\sum_{v\in son(u)}c_vsum[u]+\sum_{v\in son(u)}d_v\end{align*}</script><p>记 $sum_a=\sum\limits_{v\in son(u)}a_v,sum_b=\sum\limits_{v\in son(u)}b_v,sum_c=\sum\limits_{v\in son(u)}c_v,sum_d=\sum\limits_{v\in son(u)}d_v$。</p><p>则 $sum[u]=sum_a\cdot f[fa(u)]+sum_b\cdot f[u]+sum_c\cdot sum[u]+sum_d$。</p><p>移项： $(1-sum_c)\cdot sum[u]=sum_a\cdot f[fa(u)]+sum_b\cdot f[u]+sum_d$。</p><p>两边同除 $1-sum_c$ 可得：$sum[u]=\dfrac{sum_a\cdot f[fa(u)]+sum_b\cdot f[u]+sum_d}{1-sum_c}$</p><p>令 $sa[u]=\dfrac{sum_a}{1-sum_c},sb[u]=\dfrac{sum_b}{1-sum_c},sd[u]=\dfrac{sum_d}{1-sum_c}$。</p><p>那么：$sum[u]=sa[u]f[fa(u)]+sb[u]f[u]+sd[u]$。由于 $a_v,b_v,c_v,d_v$ 已知，那么 $sa[u],sb[u],sd[u]$ 已知，即可求出 $sum[u],sum[v]$ 的表达式。</p><p>先将 $sum[v]$ 拆开，代入 $f[u]$ 所满足的式子：<br>$t_uf[u]=f[fa(fa(u))]+f[fa(u)]+sum[fa(u)]+sum[u]+\sum\limits_{v\in son(u)}(sa[v]f[u]+sb[v]f[v]+sd[v])$</p><p>将和式拆分：$t_uf[u]=f[fa(fa(u))]+f[fa(u)]+sum[fa(u)]+sum[u]+f[u]\sum\limits_{v\in son(u)}sa[v]+\sum\limits_{v\in son(u)}sb[v]f[v]+\sum\limits_{v\in son(u)} sd[v]$</p><p>再将 $f[v]$ 拆开：$t_uf[u]=f[fa(fa(u))]+f[fa(u)]+sum[fa(u)]+sum[u]+f[u]\sum\limits_{v\in son(u)}sa[v]+\sum\limits_{v\in son(u)} sd[v]+\sum\limits_{v\in son(u)} sb[v]\cdot (a_vf[fa(u)]+b_vf[u]+c_vsum[u]+d_v)$</p><p>整理：$t_uf[u]=f[fa(fa(u))]+f[fa(u)]+sum[fa(u)]+sum[u]+f[u]\sum\limits_{v\in son(u)}sa[v]+\sum\limits_{v\in son(u)} sd[v]+\sum\limits_{v\in son(u)} sb[v]a_vf[fa(u)]+\sum\limits_{v\in son(u)}sb[v]b_vf[u]+\sum\limits_{v\in son(u)}sb[v]c_vsum[u]+\sum\limits_{v\in son(u)}sb[v]d_v$</p><p>移项：$f[fa(fa(u))]+(1+\sum\limits_{v\in son(u)} sb[v]a_v)f[fa(u)]+sum[fa(u)]+(\sum\limits_{v\in son(u)}sb[v]d_v+\sum\limits_{v\in son(u)} sd[v])+(\sum\limits_{v\in son(u)}sa[v]+\sum\limits_{v\in son(u)}sb[v]b_v-t_u)f[u]+(1+\sum\limits_{v\in son(u)}sb[v]c_v)sum[u]=0$</p><p>再将 $sum[u]$ 拆开：</p><p>$f[fa(fa(u))]+(1+\sum\limits_{v\in son(u)} sb[v]a_v)f[fa(u)]+sum[fa(u)]+(\sum\limits_{v\in son(u)}sb[v]d_v+\sum\limits_{v\in son(u)} sd[v])+(\sum\limits_{v\in son(u)}sa[v]+\sum\limits_{v\in son(u)}sb[v]b_v-t_u)f[u]+(1+\sum\limits_{v\in son(u)}sb[v]c_v)(sa[u]f[fa(u)]+sb[u]f[u]+sd[u])=0$</p><p>记 $su=(1+\sum\limits_{v\in son(u)}sb[v]c_v)$，可得：</p><p>$f[fa(fa(u))]+(1+(\sum\limits_{v\in son(u)} sb[v]a_v)+su\cdot sa[u])f[fa(u)]+sum[fa(u)]+((\sum\limits_{v\in son(u)}sa[v])+(\sum\limits_{v\in son(u)}sb[v]b_v)-t_u+su\cdot sb[u])f[u]+((\sum\limits_{v\in son(u)}sb[v]d_v)+(\sum\limits_{v\in son(u)} sd[v])+su\cdot sd[u])=0$</p><p>令 $c_1=t_u-(\sum\limits_{v\in son(u)}sa[v])-(\sum\limits_{v\in son(u)}sb[v]b_v)-su\cdot sb[u],c_2=1+(\sum\limits_{v\in son(u)} sb[v]a_v)+su\cdot sa[u],c_3=(\sum\limits_{v\in son(u)}sb[v]d_v)+(\sum\limits_{v\in son(u)} sd[v])+su\cdot sd[u]$</p><p>整理：$c_1f[u]=f[fa(fa(u))]+c_2f[fa(u)]+sum[fa(u)]+c_3$</p><p>两边同除 $c_1$：$f[u]=\frac{1}{c_1}f[fa(fa(u))]+\frac{c_2}{c_1}f[fa(u)]+\frac{1}{c_1}sum[fa(u)]+\frac{c_3}{c_1}$。</p><p>可得：$a_u=\frac{1}{c_1},b_u=\frac{c_2}{c_1},c_u=\frac{1}{c_1},d_u=\frac{c_3}{c_1}$。</p><p>至此可以求出所有点 $f$ 都可以用 $a,b,c,d$ 表达出来，同时也把所有点的 $sa,sb,sc,sd$ 也都求出来了。</p><p>$f[u]=a_uf[fa(fa(u))]+b_uf[fa(u)]+c_usum[fa(u)]+d_u$，那么可以将 $sum[fa(u)]$ 拆开，可得：</p><p>$f[u]=a_uf[fa(fa(u))]+b_uf[fa(u)]+c_u(sa[fa(u)]f[fa(fa(u))]+sb[fa(u)]f[fa(u)]+sd[fa(u)])+d_u$</p><p>整理：$f[u]=(a_u+c_usa[fa(u)])f[fa(fa(u))]+(b_u+c_usb[fa(u)])f[fa(u)]+(c_u\cdot sd[fa(u)]+d_u)$。</p><p>令 $f[u]=a’_uf[fa(fa(u))]+b’_uf[fa(u)]+d’_u$</p><p>则 $a’_u=a_u+c_usa[fa(u)],b’_u=b_u+c_usb[fa(u)],d’_u=c_u\cdot sd[fa(u)]+d_u$。</p><p>注意，这个地方 $f[1]$ 不能这样拆开，因为 $fa(1)=0,sa[0],sb[0],sd[0]$ 没有处理，而 $sum[0]=f[1]$，解一下：</p><p>$f[1]=c_1f[1]+d_1$，而 $(1-c_1)f[1]=d_1$，则 $f[1]=\frac{d_1}{1-c_1}$。所有点的 $f$ 值可以用一遍从上到下的 $dfs$ 求得。</p><p>这样这道题就做完了，不过注意若一个点是标记点也要处理 $sa,sb,sc,sd$，它们会在转移它的父亲的时候用到。</p><p>时间复杂度 $O(n)$，空间复杂度 $O(n)$。</p><p><br/></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*********************************************************************</span></span><br><span class="line"><span class="comment"> * Source：zr09 - day3</span></span><br><span class="line"><span class="comment"> * Problem：tree</span></span><br><span class="line"><span class="comment"> * Author：hydd</span></span><br><span class="line"><span class="comment"> * Date：2020/9/24</span></span><br><span class="line"><span class="comment">*********************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="comment">//#define File(x) freopen(x&quot;.in&quot;,&quot;r&quot;,stdin);freopen(x&quot;.out&quot;,&quot;w&quot;,stdout)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">int</span> n,m,tot[<span class="number">110000</span>],f[<span class="number">110000</span>]; <span class="keyword">bool</span> vis[<span class="number">110000</span>];</span><br><span class="line"><span class="keyword">int</span> sa[<span class="number">110000</span>],sb[<span class="number">110000</span>],sd[<span class="number">110000</span>];</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">110000</span>],b[<span class="number">110000</span>],c[<span class="number">110000</span>],d[<span class="number">110000</span>];</span><br><span class="line"><span class="keyword">int</span> edgenum,vet[<span class="number">210000</span>],Next[<span class="number">210000</span>],Head[<span class="number">110000</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> y)</span></span>&#123; x+=y; <span class="keyword">if</span> (x&gt;=Mod) x-=Mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">vet[++edgenum]=v;</span><br><span class="line">Next[edgenum]=Head[u];</span><br><span class="line">Head[u]=edgenum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">Getchar</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> now[<span class="number">1</span>&lt;&lt;<span class="number">20</span>],*S,*T;</span><br><span class="line"><span class="keyword">if</span> (T==S)&#123;</span><br><span class="line">T=(S=now)+fread(now,<span class="number">1</span>,<span class="number">1</span>&lt;&lt;<span class="number">20</span>,<span class="built_in">stdin</span>);</span><br><span class="line"><span class="keyword">if</span> (T==S) <span class="keyword">return</span> EOF;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> *S++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> ch=Getchar();</span><br><span class="line"><span class="keyword">while</span> (ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">if</span> (ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">-1</span>;</span><br><span class="line">ch=Getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (ch&lt;=<span class="string">&#x27;9&#x27;</span>&amp;&amp;ch&gt;=<span class="string">&#x27;0&#x27;</span>) x=x*<span class="number">10</span>+ch-<span class="string">&#x27;0&#x27;</span>,ch=Getchar();</span><br><span class="line"><span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll x,<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line">    ll res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (a)&#123;</span><br><span class="line">        <span class="keyword">if</span> (a&amp;<span class="number">1</span>) res=res*x%Mod;</span><br><span class="line">        x=x*x%Mod; a&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getinv</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123; <span class="keyword">return</span> qpow(x,Mod<span class="number">-2</span>);&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa)</span></span>&#123;</span><br><span class="line">tot[u]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> e=Head[u];e;e=Next[e])&#123;</span><br><span class="line"><span class="keyword">if</span> (vet[e]==fa) <span class="keyword">continue</span>;</span><br><span class="line">tot[u]++;</span><br><span class="line">dfs(vet[e],u);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dp</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa,<span class="keyword">int</span> fa_2)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> cnt=(fa?tot[fa]:<span class="number">1</span>)+(fa_2!=<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> e=Head[u];e;e=Next[e])&#123;</span><br><span class="line"><span class="keyword">if</span> (vet[e]==fa) <span class="keyword">continue</span>;</span><br><span class="line">cnt+=tot[vet[e]]; dp(vet[e],u,fa);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> fu=Mod-cnt,ffa=<span class="number">1</span>,ffafa=<span class="number">1</span>,sfa=<span class="number">1</span>,fc=cnt,su=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> e=Head[u];e;e=Next[e])&#123;</span><br><span class="line"><span class="keyword">if</span> (vet[e]==fa) <span class="keyword">continue</span>;</span><br><span class="line">add(fu,sa[vet[e]]); <span class="comment">//sb[vet[e]]*f[vet[e]];</span></span><br><span class="line">add(ffa,<span class="number">1l</span>l*a[vet[e]]*sb[vet[e]]%Mod);</span><br><span class="line">add(fu,<span class="number">1l</span>l*b[vet[e]]*sb[vet[e]]%Mod);</span><br><span class="line">add(su,<span class="number">1l</span>l*c[vet[e]]*sb[vet[e]]%Mod);</span><br><span class="line">add(fc,<span class="number">1l</span>l*d[vet[e]]*sb[vet[e]]%Mod);</span><br><span class="line">add(fc,sd[vet[e]]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> suma=<span class="number">0</span>,sumb=<span class="number">0</span>,sumc=<span class="number">0</span>,sumd=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> e=Head[u];e;e=Next[e])&#123;</span><br><span class="line"><span class="keyword">if</span> (vet[e]==fa) <span class="keyword">continue</span>;</span><br><span class="line">add(suma,a[vet[e]]); add(sumb,b[vet[e]]);</span><br><span class="line">add(sumc,c[vet[e]]); add(sumd,d[vet[e]]);</span><br><span class="line">&#125;</span><br><span class="line">ll inv=getinv(Mod+<span class="number">1</span>-sumc);</span><br><span class="line">sa[u]=inv*suma%Mod; sb[u]=inv*sumb%Mod; sd[u]=inv*sumd%Mod;</span><br><span class="line">add(ffa,<span class="number">1l</span>l*su*sa[u]%Mod);</span><br><span class="line">add(fu,<span class="number">1l</span>l*su*sb[u]%Mod);</span><br><span class="line">add(fc,<span class="number">1l</span>l*su*sd[u]%Mod);</span><br><span class="line">fu=(Mod-fu)%Mod; inv=getinv(fu);</span><br><span class="line">fu=inv*fu%Mod; ffa=inv*ffa%Mod; ffafa=inv*ffafa%Mod; sfa=inv*sfa%Mod; fc=inv*fc%Mod;</span><br><span class="line">a[u]=ffafa; b[u]=ffa; c[u]=sfa; d[u]=fc;</span><br><span class="line"><span class="keyword">if</span> (vis[u]) a[u]=<span class="number">0</span>,b[u]=<span class="number">0</span>,c[u]=<span class="number">0</span>,d[u]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> e=Head[u];e;e=Next[e])&#123;</span><br><span class="line"><span class="keyword">if</span> (vet[e]==fa) <span class="keyword">continue</span>;</span><br><span class="line">add(a[vet[e]],<span class="number">1l</span>l*c[vet[e]]*sa[u]%Mod);</span><br><span class="line">add(b[vet[e]],<span class="number">1l</span>l*c[vet[e]]*sb[u]%Mod);</span><br><span class="line">add(d[vet[e]],<span class="number">1l</span>l*c[vet[e]]*sd[u]%Mod);</span><br><span class="line">dfs2(vet[e],u);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getans</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> e=Head[u];e;e=Next[e])&#123;</span><br><span class="line"><span class="keyword">if</span> (vet[e]==fa) <span class="keyword">continue</span>;</span><br><span class="line">f[vet[e]]=(<span class="number">1l</span>l*a[vet[e]]*f[fa]+<span class="number">1l</span>l*b[vet[e]]*f[u]+d[vet[e]])%Mod;</span><br><span class="line">getans(vet[e],u);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">freopen(<span class="string">&quot;tree.in&quot;</span>,<span class="string">&quot;r&quot;</span>,<span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">&quot;tree.out&quot;</span>,<span class="string">&quot;w&quot;</span>,<span class="built_in">stdout</span>);</span><br><span class="line">n=read(); m=read(); <span class="keyword">int</span> u,v;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">u=read(); v=read();</span><br><span class="line">addedge(u,v); addedge(v,u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">x=read();</span><br><span class="line">vis[x]=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">dfs(<span class="number">1</span>,<span class="number">0</span>); dp(<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">dfs2(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">f[<span class="number">1</span>]=<span class="number">1l</span>l*getinv(Mod+<span class="number">1</span>-c[<span class="number">1</span>])*d[<span class="number">1</span>]%Mod;</span><br><span class="line">getans(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,f[i]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;设 $f[u]$ 表示从 $u$ 开始游走的期望时间。不妨设 $f[u]=a_uf[fa(fa(u))]+b_uf[fa(u)]+c_usum[fa(u)]+d_u$。&lt;/p&gt;
&lt;p&gt;不妨设 $fa(1)=0,fa(0)=0$，$f[0]=0$。设 $t_u$ 为与 $u$</summary>
      
    
    
    
    <category term="CSP-S模拟赛" scheme="http://hydd.cf/categories/CSP-S%E6%A8%A1%E6%8B%9F%E8%B5%9B/"/>
    
    
    <category term="树形dp" scheme="http://hydd.cf/tags/%E6%A0%91%E5%BD%A2dp/"/>
    
    <category term="概率/期望" scheme="http://hydd.cf/tags/%E6%A6%82%E7%8E%87-%E6%9C%9F%E6%9C%9B/"/>
    
  </entry>
  
  <entry>
    <title>20200924 模拟赛题解</title>
    <link href="http://hydd.cf/2020/09/24/sol_5/"/>
    <id>http://hydd.cf/2020/09/24/sol_5/</id>
    <published>2020-09-23T16:00:00.000Z</published>
    <updated>2020-10-01T04:56:41.888Z</updated>
    
    <content type="html"><![CDATA[<h2 id="number"><a href="#number" class="headerlink" title="number"></a>number</h2><script type="math/tex; mode=display">\begin{align*}ans&=\sum_{i=1}^n\sum_{j=i}^n\sum_{p\in \mathcal{P}} [p\mid\prod_{k=i}^ja_k]\\&=\sum_{p\in \mathcal{P}}\sum_{i=1}^n\sum_{j=i}^n [p\mid\prod_{k=i}^ja_k]\\&=\sum_{p\in \mathcal{P}}\sum_{i=1}^n\sum_{j=i}^n [(p\mid a_i) \lor (p\mid a_{i+1}) \lor (p\mid a_{i+2})\lor\cdots\lor(p\mid a_j)]\\&=\sum_{p\in \mathcal{P}}\sum_{i=1}^n\sum_{j=i}^n \sum_{k=i}^j[(p\nmid a_i) \land (p\nmid a_{i+1}) \land\cdots\land (p\nmid a_{k-1})\land (p\mid a_{k})]\\&=\sum_{p\in \mathcal{P}}\sum_{i=1}^n\sum_{k=i}^n \sum_{j=k}^n[(p\nmid a_i) \land (p\nmid a_{i+1}) \land\cdots\land (p\nmid a_{k-1})\land (p\mid a_{k})]\\&=\sum_{p\in \mathcal{P}}\sum_{i=1}^n\sum_{k=i}^n [(p\nmid a_i) \land (p\nmid a_{i+1}) \land\cdots\land (p\nmid a_{k-1})\land (p\mid a_{k})]\sum_{j=k}^n1\\&=\sum_{p\in \mathcal{P}}\sum_{i=1}^n\sum_{k=i}^n [(p\nmid a_i) \land (p\nmid a_{i+1}) \land\cdots\land (p\nmid a_{k-1})\land (p\mid a_{k})]\cdot (n-k+1)\\&=\sum_{p\in \mathcal{P}}\sum_{k=1}^n(\sum_{i=1}^k [(p\nmid a_i) \land (p\nmid a_{i+1}) \land\cdots\land (p\nmid a_{k-1})\land (p\mid a_{k})])\cdot (n-k+1)\\&=\sum_{k=1}^n\sum_{p\in \mathcal{P},p\mid a_k}(n-k+1)(\sum_{i=1}^k [(p\nmid a_i) \land (p\nmid a_{i+1}) \land\cdots\land (p\nmid a_{k-1})])\end{align*}</script><p>注意到，求出最大的 $j&lt;k$ 满足 $p\mid a_j$，那么上式 $\sum\limits_{i=1}^k [(p\nmid a_i) \land (p\nmid a_{i+1}) \land\cdots\land (p\nmid a_{k-1})]=k-j$</p><p>从左往右扫，对于每个 $p$ 记录满足条件的 $j$，就做完了。时间复杂度 $O(n \ln n)$。</p><p><br/></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*********************************************************************</span></span><br><span class="line"><span class="comment"> * Source：zr09 - day4</span></span><br><span class="line"><span class="comment"> * Problem：number</span></span><br><span class="line"><span class="comment"> * Author：hydd</span></span><br><span class="line"><span class="comment"> * Date：2020/9/24</span></span><br><span class="line"><span class="comment">*********************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="comment">//#define File(x) freopen(x&quot;.in&quot;,&quot;r&quot;,stdin);freopen(x&quot;.out&quot;,&quot;w&quot;,stdout)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">int</span> n,lst[<span class="number">1100000</span>],num[<span class="number">1100000</span>];</span><br><span class="line"><span class="keyword">int</span> cnt,prime[<span class="number">1100000</span>];</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">Getchar</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> now[<span class="number">1</span>&lt;&lt;<span class="number">20</span>],*S,*T;</span><br><span class="line"><span class="keyword">if</span> (T==S)&#123;</span><br><span class="line">T=(S=now)+fread(now,<span class="number">1</span>,<span class="number">1</span>&lt;&lt;<span class="number">20</span>,<span class="built_in">stdin</span>);</span><br><span class="line"><span class="keyword">if</span> (T==S) <span class="keyword">return</span> EOF;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> *S++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> ch=Getchar();</span><br><span class="line"><span class="keyword">while</span> (ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">if</span> (ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">-1</span>;</span><br><span class="line">ch=Getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (ch&lt;=<span class="string">&#x27;9&#x27;</span>&amp;&amp;ch&gt;=<span class="string">&#x27;0&#x27;</span>) x=x*<span class="number">10</span>+ch-<span class="string">&#x27;0&#x27;</span>,ch=Getchar();</span><br><span class="line"><span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span> (!lst[i])&#123;</span><br><span class="line">        lst[i]=i;</span><br><span class="line">        prime[++cnt]=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=cnt&amp;&amp;i*prime[j]&lt;=n;j++)&#123;</span><br><span class="line">        lst[i*prime[j]]=prime[j];</span><br><span class="line">        <span class="keyword">if</span> (i%prime[j]==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">freopen(<span class="string">&quot;number.in&quot;</span>,<span class="string">&quot;r&quot;</span>,<span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">&quot;number.out&quot;</span>,<span class="string">&quot;w&quot;</span>,<span class="built_in">stdout</span>);</span><br><span class="line">init(<span class="number">1000000</span>); n=read();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=<span class="number">1000000</span>;i++) num[i]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> x,y; ll ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">x=read(); y=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">while</span> (x!=<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">if</span> (y!=lst[x])&#123;</span><br><span class="line">ans+=<span class="number">1l</span>l*(i-num[lst[x]])*(n-i+<span class="number">1</span>);</span><br><span class="line">num[lst[x]]=i;</span><br><span class="line">&#125;</span><br><span class="line">y=lst[x]; x/=lst[x];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="seq"><a href="#seq" class="headerlink" title="seq"></a>seq</h2><p>这个数列是个一阶递推数列。</p><p>又因为每个值都在 $[0,m)$ 内（除了 $x_0$ 有可能为 $m$）。</p><p>所以我们可以通过倍增轻易求出 $x_0=k,\forall k\in[0,m]$ 时，$x_i,\forall i\in[0,t]$ 的值。</p><p>然后，我们考虑每个 $k$，对于所有的 $t_1+t_2=k$，可能的 $|t_1-t_2|$ 的值。</p><p>若 $k\leqslant m$</p><ul><li>若 $k$ 是偶数，可能为 $k,k-2,\cdots ,2,0,2,\cdots k-2,k$。即 $0,2,2,4,4,6,6,\cdots,k,k$。</li><li>若 $k$ 是奇数，可能为 $k,k-2,\cdots ,3,1,1,3,\cdots k-2,k$。即 $1,1,3,3,5,5,\cdots,k,k$。</li></ul><p>若 $m+1\leqslant k\leqslant 2m$</p><ul><li>若 $k$ 是偶数，可能为 $2m-k,2m-k-2,\cdots ,2,0,2,\cdots 2m-k-2,2m-k$。即 $0,2,2,4,4,6,6,\cdots,2m-k,2m-k$。</li><li>若 $k$ 是奇数，可能为 $2m-k,2m-k-2,\cdots ,3,1,1,3,\cdots 2m-k-2,2m-k$。即 $1,1,3,3,5,5,\cdots,2m-k,2m-k$。</li></ul><p>我们可以倍增记录 $x_0=a,\forall 0\leqslant l\leqslant m,x_0+x_2+x_4+\cdots,x_{2l}$。</p><p>那么偶数的答案可以轻松的算出，奇数的答案的话，先将 $x’_0$ 变为 $x_1$，再类似的做即可。</p><p>时间复杂度 $O(n\log n)$。</p><p><br/></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*********************************************************************</span></span><br><span class="line"><span class="comment"> * Source：zr09 - day4</span></span><br><span class="line"><span class="comment"> * Problem：seq</span></span><br><span class="line"><span class="comment"> * Author：hydd</span></span><br><span class="line"><span class="comment"> * Date：2020/9/24</span></span><br><span class="line"><span class="comment">*********************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="comment">//#define File(x) freopen(x&quot;.in&quot;,&quot;r&quot;,stdin);freopen(x&quot;.out&quot;,&quot;w&quot;,stdout)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> t,a,c,m,k,f[<span class="number">1100000</span>],fa[<span class="number">1100000</span>][<span class="number">21</span>],sum[<span class="number">1100000</span>][<span class="number">21</span>];</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">Getchar</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> now[<span class="number">1</span>&lt;&lt;<span class="number">20</span>],*S,*T;</span><br><span class="line"><span class="keyword">if</span> (T==S)&#123;</span><br><span class="line">T=(S=now)+fread(now,<span class="number">1</span>,<span class="number">1</span>&lt;&lt;<span class="number">20</span>,<span class="built_in">stdin</span>);</span><br><span class="line"><span class="keyword">if</span> (T==S) <span class="keyword">return</span> EOF;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> *S++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> ch=Getchar();</span><br><span class="line"><span class="keyword">while</span> (ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">if</span> (ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">-1</span>;</span><br><span class="line">ch=Getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (ch&lt;=<span class="string">&#x27;9&#x27;</span>&amp;&amp;ch&gt;=<span class="string">&#x27;0&#x27;</span>) x=x*<span class="number">10</span>+ch-<span class="string">&#x27;0&#x27;</span>,ch=Getchar();</span><br><span class="line"><span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getsum</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> d)</span></span>&#123;</span><br><span class="line">d++;</span><br><span class="line"><span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">20</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line"><span class="keyword">if</span> (d&amp;(<span class="number">1</span>&lt;&lt;i))&#123;</span><br><span class="line">res=(res+sum[x][i])%Mod;</span><br><span class="line">x=fa[x][i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">freopen(<span class="string">&quot;seq.in&quot;</span>,<span class="string">&quot;r&quot;</span>,<span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">&quot;seq.out&quot;</span>,<span class="string">&quot;w&quot;</span>,<span class="built_in">stdout</span>);</span><br><span class="line">t=read(); a=read(); c=read(); m=read(); k=read();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=m;i++) f[i]=(<span class="number">1l</span>l*a*i+c)%m;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=m;i++)&#123;</span><br><span class="line">fa[i][<span class="number">0</span>]=f[f[i]];</span><br><span class="line">sum[i][<span class="number">0</span>]=i%k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">20</span>;j++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=m;i++)&#123;</span><br><span class="line">fa[i][j]=fa[fa[i][j<span class="number">-1</span>]][j<span class="number">-1</span>];</span><br><span class="line">sum[i][j]=((sum[i][j<span class="number">-1</span>]+sum[fa[i][j<span class="number">-1</span>]][j<span class="number">-1</span>])%Mod)%Mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=t;i++)</span><br><span class="line"><span class="keyword">if</span> (i&amp;<span class="number">1</span>) ans=(ans+<span class="number">2l</span>l*getsum(f[i],(i<span class="number">-1</span>)/<span class="number">2</span>))%Mod;</span><br><span class="line"><span class="keyword">else</span> ans=(ans+<span class="number">2l</span>l*getsum(i,i/<span class="number">2</span>)-i%k)%Mod;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=t+<span class="number">1</span>;i&lt;=t+t;i++)</span><br><span class="line"><span class="keyword">if</span> (i&amp;<span class="number">1</span>) ans=(ans+<span class="number">2l</span>l*getsum(f[i],(<span class="number">2</span>*t-i<span class="number">-1</span>)/<span class="number">2</span>))%Mod;</span><br><span class="line"><span class="keyword">else</span> ans=(ans+<span class="number">2l</span>l*getsum(i,(<span class="number">2</span>*t-i)/<span class="number">2</span>)-i%k)%Mod;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="kth"><a href="#kth" class="headerlink" title="kth"></a>kth</h2><p>将相同的数也钦定一个大小关系，不妨设相同的情况下越靠后的数越大。</p><p>将数从大到小排序，求出当前数左边最靠右的 $k$ 个比它大的数和当前数右边靠左的 $k$ 个比它大的数。</p><p>这个可以用个链表串起来（直接 $set$ 暴力查是 $k\log n$ 的，链表的话少个 $\log$）然后求。</p><p>之后就随便求就好了，枚举左边有多少个比它大的即可。</p><p>时间复杂度 $O(n\log n+nk)$。</p><p><br/></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*********************************************************************</span></span><br><span class="line"><span class="comment"> * Source：zr09 - day4</span></span><br><span class="line"><span class="comment"> * Problem：kth</span></span><br><span class="line"><span class="comment"> * Author：hydd</span></span><br><span class="line"><span class="comment"> * Date：2020/9/24</span></span><br><span class="line"><span class="comment">*********************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="comment">//#define File(x) freopen(x&quot;.in&quot;,&quot;r&quot;,stdin);freopen(x&quot;.out&quot;,&quot;w&quot;,stdout)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">pair</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">int</span> n,k,a[<span class="number">210000</span>];</span><br><span class="line"><span class="keyword">int</span> num1[<span class="number">210000</span>],num2[<span class="number">210000</span>];</span><br><span class="line"><span class="keyword">int</span> nxt[<span class="number">210000</span>],lst[<span class="number">210000</span>];</span><br><span class="line">pii tmp[<span class="number">210000</span>]; <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">Getchar</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> now[<span class="number">1</span>&lt;&lt;<span class="number">20</span>],*S,*T;</span><br><span class="line"><span class="keyword">if</span> (T==S)&#123;</span><br><span class="line">T=(S=now)+fread(now,<span class="number">1</span>,<span class="number">1</span>&lt;&lt;<span class="number">20</span>,<span class="built_in">stdin</span>);</span><br><span class="line"><span class="keyword">if</span> (T==S) <span class="keyword">return</span> EOF;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> *S++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> ch=Getchar();</span><br><span class="line"><span class="keyword">while</span> (ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">if</span> (ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">-1</span>;</span><br><span class="line">ch=Getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (ch&lt;=<span class="string">&#x27;9&#x27;</span>&amp;&amp;ch&gt;=<span class="string">&#x27;0&#x27;</span>) x=x*<span class="number">10</span>+ch-<span class="string">&#x27;0&#x27;</span>,ch=Getchar();</span><br><span class="line"><span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">freopen(<span class="string">&quot;kth.in&quot;</span>,<span class="string">&quot;r&quot;</span>,<span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">&quot;kth.out&quot;</span>,<span class="string">&quot;w&quot;</span>,<span class="built_in">stdout</span>);</span><br><span class="line">n=read(); k=read();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n+<span class="number">1</span>;i++) nxt[i]=i,lst[i]=i;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) tmp[i].first=read(),tmp[i].second=i;</span><br><span class="line">sort(tmp+<span class="number">1</span>,tmp+n+<span class="number">1</span>,greater&lt;pii&gt;());</span><br><span class="line"></span><br><span class="line">s.insert(<span class="number">0</span>); s.insert(n+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> x,l,r,ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">x=tmp[i].second;</span><br><span class="line">l=*--s.lower_bound(x); r=*s.upper_bound(x); s.insert(x);</span><br><span class="line">nxt[l]=x; lst[x]=l; lst[r]=x; nxt[x]=r;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k+<span class="number">1</span>;i++) num1[i]=<span class="number">0</span>,num2[i]=n+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> cnt1=<span class="number">0</span>,cnt2=<span class="number">0</span>,now;</span><br><span class="line">now=x; <span class="keyword">while</span> (cnt1&lt;=k&amp;&amp;now)&#123; num1[++cnt1]=now; now=lst[now];&#125;</span><br><span class="line">now=nxt[x]; <span class="keyword">while</span> (cnt2&lt;=k&amp;&amp;now)&#123; num2[++cnt2]=now; now=nxt[now];&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> l=<span class="number">1</span>;l&lt;=k;l++)&#123;</span><br><span class="line"><span class="keyword">int</span> r=k-l+<span class="number">1</span>;</span><br><span class="line">ans=(ans+<span class="number">1l</span>l*(num1[l]-num1[l+<span class="number">1</span>])*(num2[r]-x)%Mod*tmp[i].first)%Mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//printf(&quot;%d\n&quot;,ans);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">6 2</span></span><br><span class="line"><span class="comment">96 29 71 28 91 64</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="subseq"><a href="#subseq" class="headerlink" title="subseq"></a>subseq</h2><p>一般子序列的 $dp$，就是 $dp[i][j]=\begin{cases}<br>   1+\sum\limits_k dp[i-1][k] &amp; j=s_i \\<br>   dp[i-1][j] &amp; j\neq s_i<br>\end{cases}$</p><p>现在要求 $\bmod 2$ 的值，那就是 $dp[i][j]=\begin{cases}<br>   1\oplus\bigoplus\limits_k dp[i-1][k] &amp; j=s_i \\<br>   dp[i-1][j] &amp; j\neq s_i<br>\end{cases}$</p><p>可以发现一些性质：</p><ol><li>若原来 $dp[i-1]$ 有奇数个 $1$，现在是一个 $dp[i-1][c]=0$ 的字符 $c$，那么 $dp[i-1][c]$ 没有任何变化。</li><li>若原来 $dp[i-1]$ 有奇数个 $1$，现在是一个 $dp[i-1][c]=1$ 的字符 $c$，那么 $dp[i-1][c]$ 变为了 $0$。</li><li>若原来 $dp[i-1]$ 有偶数个 $1$，现在是一个 $dp[i-1][c]=0$ 的字符 $c$，那么 $dp[i-1][c]$ 变为了 $1$。</li><li>若原来 $dp[i-1]$ 有偶数个 $1$，现在是一个 $dp[i-1][c]=1$ 的字符 $c$，那么 $dp[i-1][c]$ 没有任何变化。</li></ol><p>那么，我们会发现，$dp[i-1]$ 中只有一个字符 $c$ 满足 $dp[i][c]=1$，其余位置都为 $0$。不妨记录这个字符。</p><p>考虑加入一个字符 $s_i$：</p><ul><li>若 $c=\emptyset$，由性质 3.，$c’=s_i$。</li><li>若 $c=s_i$，由性质 2.，$c’=\emptyset$。</li><li>否则，由性质 1.，$c’=c$。</li></ul><p>由于我们要合并两个字符串，所有需要知道所有 $c$ 作为初始时，每个字符串最后会变成哪个 $c’$。</p><p>然后直接设 $dp[i][j]$ 表示已经选了状态为 $i$ 的字符串，现在的 $c=j$ 的方案数，直接转移即可。</p><p>时间复杂度 $O(2^nn|\Sigma|)$。</p><p><br/></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*********************************************************************</span></span><br><span class="line"><span class="comment"> * Source：zr09 - day4</span></span><br><span class="line"><span class="comment"> * Problem：subseq</span></span><br><span class="line"><span class="comment"> * Author：hydd</span></span><br><span class="line"><span class="comment"> * Date：2020/9/24</span></span><br><span class="line"><span class="comment">*********************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="comment">//#define File(x) freopen(x&quot;.in&quot;,&quot;r&quot;,stdin);freopen(x&quot;.out&quot;,&quot;w&quot;,stdout)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">int</span> n,trans[<span class="number">31</span>][<span class="number">31</span>];</span><br><span class="line">ll f[<span class="number">1100000</span>][<span class="number">31</span>];</span><br><span class="line"><span class="keyword">int</span> len,s[<span class="number">110000</span>];</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">Getchar</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> now[<span class="number">1</span>&lt;&lt;<span class="number">20</span>],*S,*T;</span><br><span class="line"><span class="keyword">if</span> (T==S)&#123;</span><br><span class="line">T=(S=now)+fread(now,<span class="number">1</span>,<span class="number">1</span>&lt;&lt;<span class="number">20</span>,<span class="built_in">stdin</span>);</span><br><span class="line"><span class="keyword">if</span> (T==S) <span class="keyword">return</span> EOF;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> *S++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> ch=Getchar();</span><br><span class="line"><span class="keyword">while</span> (ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">if</span> (ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">-1</span>;</span><br><span class="line">ch=Getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (ch&lt;=<span class="string">&#x27;9&#x27;</span>&amp;&amp;ch&gt;=<span class="string">&#x27;0&#x27;</span>) x=x*<span class="number">10</span>+ch-<span class="string">&#x27;0&#x27;</span>,ch=Getchar();</span><br><span class="line"><span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">readst</span><span class="params">()</span></span>&#123;</span><br><span class="line">len=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> ch=Getchar();</span><br><span class="line"><span class="keyword">while</span> (ch&lt;<span class="string">&#x27;a&#x27;</span>||ch&gt;<span class="string">&#x27;z&#x27;</span>) ch=Getchar();</span><br><span class="line"><span class="keyword">while</span> (ch&lt;=<span class="string">&#x27;z&#x27;</span>&amp;&amp;ch&gt;=<span class="string">&#x27;a&#x27;</span>) s[++len]=ch-<span class="string">&#x27;a&#x27;</span>,ch=Getchar();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">freopen(<span class="string">&quot;subseq.in&quot;</span>,<span class="string">&quot;r&quot;</span>,<span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">&quot;subseq.out&quot;</span>,<span class="string">&quot;w&quot;</span>,<span class="built_in">stdout</span>);</span><br><span class="line">n=read();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">readst();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> c=<span class="number">0</span>;c&lt;=<span class="number">26</span>;c++)&#123;</span><br><span class="line"><span class="keyword">int</span> now=c;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=len;j++)</span><br><span class="line"><span class="keyword">if</span> (now==<span class="number">26</span>) now=s[j];</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (now==s[j]) now=<span class="number">26</span>;</span><br><span class="line">trans[i][c]=now;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> upperlim=(<span class="number">1</span>&lt;&lt;n)<span class="number">-1</span>;</span><br><span class="line">f[<span class="number">0</span>][<span class="number">26</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;upperlim;i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line"><span class="keyword">if</span> (!(i&amp;(<span class="number">1</span>&lt;&lt;j)))</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> c=<span class="number">0</span>;c&lt;=<span class="number">26</span>;c++)</span><br><span class="line">f[i|(<span class="number">1</span>&lt;&lt;j)][trans[j][c]]+=f[i][c];</span><br><span class="line">ll ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> c=<span class="number">0</span>;c&lt;=<span class="number">25</span>;c++) ans+=f[upperlim][c];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;number&quot;&gt;&lt;a href=&quot;#number&quot; class=&quot;headerlink&quot; title=&quot;number&quot;&gt;&lt;/a&gt;number&lt;/h2&gt;&lt;script type=&quot;math/tex; mode=display&quot;&gt;
\begin{align*}
ans</summary>
      
    
    
    
    <category term="CSP-S模拟赛" scheme="http://hydd.cf/categories/CSP-S%E6%A8%A1%E6%8B%9F%E8%B5%9B/"/>
    
    
  </entry>
  
  <entry>
    <title>CF555E</title>
    <link href="http://hydd.cf/2020/09/24/sol_6/"/>
    <id>http://hydd.cf/2020/09/24/sol_6/</id>
    <published>2020-09-23T16:00:00.000Z</published>
    <updated>2020-11-13T01:33:18.171Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定一个 $n$ 个点 $m$ 条边的无向图。有 $q$ 个人，第 $i$ 个人要从 $s_i$ 到 $t_i$。</p><p>现在你要给无向图的每条边定向。问是否存在一种定向方法使得所有人都能够到达目的地。</p><p>$n,m,q\leqslant 2\times 10^5,u_i\neq v_i,s_i\neq t_i$</p><ul><li>subtask1（1-8，20pts）：$n\leqslant 8,m\leqslant 15,q\leqslant 8$。</li><li>subtask2（11-13，10pts）：保证原图是一个菊花图，$m=n-1$。（即有且仅有一个点 $u$，它向其它所有点都有一条边）</li><li>subtask3（14-15，10pts）：保证图是一条链，$m=n-1$。</li><li>subtask4（16-20，30pts）：保证图是一棵树，$m=n-1$。（依赖subtask 2,3）</li><li>subtask5（20-30,9,10，30pts）：无特殊限制。（依赖subtask 1,2,3,4）</li></ul><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><h4 id="我的做法（186ms）"><a href="#我的做法（186ms）" class="headerlink" title="我的做法（186ms）"></a>我的做法（186ms）</h4><p>可以发现，对于一个边双来说，一定存在一种定向方法，使得边数内两两点之间均可到达。</p><p>所以一个边双相当于一个点。那么我们缩点，把图变成一颗树。这样，$s$ 到 $t$ 只能走树上简单路径。</p><p>我们把 $s\rightarrow LCA$ 的路径打向上的标记，把 $LCA\rightarrow t$ 的路径打向下的标记。$LCA$ 可以通过倍增预处理。</p><p>只要没有一条边同时有两种标记，就是合法的。打标记使用树上差分实现。</p><p>时间复杂度：$ O(n+m+q\log n)$。</p><p>有一些细节：</p><ol><li>原图不保证连通，所以在缩点，预处理倍增，判断答案的时候要在每个连通块都做一次。</li><li>原图可能有重边，所以 $\rm tarjan$ 的时候要记上一条边的编号而不是父亲节点。</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*********************************************************************</span></span><br><span class="line"><span class="comment"> * Source：互测</span></span><br><span class="line"><span class="comment"> * Problem：CF555E</span></span><br><span class="line"><span class="comment"> * Author：hydd</span></span><br><span class="line"><span class="comment"> * Date：2020/8/30 - 2020/8/31</span></span><br><span class="line"><span class="comment"> * Encoding：Simplified Chinese (GB2312)</span></span><br><span class="line"><span class="comment">*********************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="comment">//#define File(x) freopen(x&quot;.in&quot;,&quot;r&quot;,stdin);freopen(x&quot;.out&quot;,&quot;w&quot;,stdout)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">210000</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXM=<span class="number">410000</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,q,u[MAXN],v[MAXN];</span><br><span class="line"><span class="keyword">int</span> top,st[MAXN],fr[MAXN],dep[MAXN];</span><br><span class="line"><span class="keyword">int</span> cnt2,fa[MAXN][<span class="number">19</span>]; <span class="keyword">bool</span> vis[MAXN];</span><br><span class="line"><span class="keyword">int</span> cnt,num[MAXN],up[MAXN],dw[MAXN];</span><br><span class="line"><span class="keyword">int</span> dtime,dfn[MAXN],low[MAXN];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec[MAXN];</span><br><span class="line"><span class="keyword">int</span> edgenum=<span class="number">1</span>,vet[MAXM],Next[MAXM],Head[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">vet[++edgenum]=v;</span><br><span class="line">Next[edgenum]=Head[u];</span><br><span class="line">Head[u]=edgenum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">Getchar</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> now[<span class="number">1</span>&lt;&lt;<span class="number">20</span>],*S,*T;</span><br><span class="line"><span class="keyword">if</span> (T==S)&#123;</span><br><span class="line">T=(S=now)+fread(now,<span class="number">1</span>,<span class="number">1</span>&lt;&lt;<span class="number">20</span>,<span class="built_in">stdin</span>);</span><br><span class="line"><span class="keyword">if</span> (T==S) <span class="keyword">return</span> EOF;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> *S++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> ch=Getchar();</span><br><span class="line"><span class="keyword">while</span> (ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">if</span> (ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">-1</span>;</span><br><span class="line">ch=Getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (ch&lt;=<span class="string">&#x27;9&#x27;</span>&amp;&amp;ch&gt;=<span class="string">&#x27;0&#x27;</span>) x=x*<span class="number">10</span>+ch-<span class="string">&#x27;0&#x27;</span>,ch=Getchar();</span><br><span class="line"><span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> le)</span></span>&#123;<span class="comment">//2.</span></span><br><span class="line">dfn[u]=low[u]=++dtime;</span><br><span class="line">st[++top]=u; <span class="keyword">int</span> v;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> e=Head[u];e;e=Next[e])&#123;</span><br><span class="line">v=vet[e];</span><br><span class="line"><span class="keyword">if</span> (e==(le^<span class="number">1</span>)) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> (!dfn[v])&#123;</span><br><span class="line">tarjan(v,e);</span><br><span class="line">low[u]=min(low[u],low[v]);</span><br><span class="line">&#125; <span class="keyword">else</span> low[u]=min(low[u],dfn[v]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (dfn[u]==low[u])&#123;</span><br><span class="line">cnt++;</span><br><span class="line"><span class="keyword">while</span> (st[top]!=u)&#123; num[st[top]]=cnt; top--;&#125;</span><br><span class="line">num[st[top]]=cnt; top--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> f)</span></span>&#123;</span><br><span class="line">fr[u]=cnt2; dep[u]=dep[f]+<span class="number">1</span>; fa[u][<span class="number">0</span>]=f;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;(<span class="number">1</span>&lt;&lt;i)&lt;dep[u];i++) fa[u][i]=fa[fa[u][i<span class="number">-1</span>]][i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> v:vec[u])&#123;</span><br><span class="line"><span class="keyword">if</span> (v==f) <span class="keyword">continue</span>;</span><br><span class="line">dfs(v,u);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> f)</span></span>&#123;</span><br><span class="line">vis[u]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> v:vec[u])&#123;</span><br><span class="line"><span class="keyword">if</span> (v==f) <span class="keyword">continue</span>;</span><br><span class="line">dfs2(v,u);</span><br><span class="line">up[u]+=up[v]; dw[u]+=dw[v];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LCA</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (dep[x]&lt;dep[y]) swap(x,y);</span><br><span class="line"><span class="keyword">int</span> d=dep[x]-dep[y];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">18</span>;i++)</span><br><span class="line"><span class="keyword">if</span> (d&amp;(<span class="number">1</span>&lt;&lt;i)) x=fa[x][i];</span><br><span class="line"><span class="keyword">if</span> (x==y) <span class="keyword">return</span> x;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">18</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line"><span class="keyword">if</span> (fa[x][i]!=fa[y][i])&#123;</span><br><span class="line">x=fa[x][i];</span><br><span class="line">y=fa[y][i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> fa[x][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> s,t;</span><br><span class="line"><span class="keyword">while</span> (q--)&#123;</span><br><span class="line">s=read(); t=read();</span><br><span class="line">s=num[s]; t=num[t];</span><br><span class="line"><span class="keyword">if</span> (fr[s]!=fr[t]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">int</span> w=LCA(s,t);</span><br><span class="line">up[s]++; up[w]--;</span><br><span class="line">dw[t]++; dw[w]--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">if</span> (!vis[i]) dfs2(i,<span class="number">0</span>);<span class="comment">//1.</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)</span><br><span class="line"><span class="keyword">if</span> (up[i]&amp;&amp;dw[i]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">n=read(); m=read(); q=read();</span><br><span class="line">edgenum=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">u[i]=read(); v[i]=read();</span><br><span class="line">addedge(u[i],v[i]); addedge(v[i],u[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">if</span> (!dfn[i]) tarjan(i,<span class="number">0</span>);<span class="comment">//1.</span></span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">x=num[u[i]]; y=num[v[i]];</span><br><span class="line"><span class="keyword">if</span> (x==y) <span class="keyword">continue</span>;</span><br><span class="line">vec[x].push_back(y);</span><br><span class="line">vec[y].push_back(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)</span><br><span class="line"><span class="keyword">if</span> (!fr[i])&#123; cnt2++; dfs(i,<span class="number">0</span>);&#125;<span class="comment">//1.</span></span><br><span class="line"><span class="keyword">if</span> (check()) <span class="built_in">puts</span>(<span class="string">&quot;Yes&quot;</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">&quot;No&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="CodeForces-最快做法（124ms）"><a href="#CodeForces-最快做法（124ms）" class="headerlink" title="CodeForces 最快做法（124ms）"></a>CodeForces 最快做法（124ms）</h4><p>思路与前述相同。</p><p>使用了 $\rm tarjan$ 求 $LCA$，时间复杂度 $O(n+m+q)$。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 200002</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> E 400003</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Spush(x) (in[sk[++sp]=x]=true)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Spop() (in[sk[sp--]]=false)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Stop() (sk[sp])</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Dp (puts(<span class="meta-string">&quot;&quot;</span>))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Dw printf</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Df(i,s,t) for(int i=s;i&lt;=t;i++)</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span><span class="keyword">int</span> y,t;&#125;e[E];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Query</span>&#123;</span><span class="keyword">int</span> y,t,ans;&#125;Q[E];</span><br><span class="line"><span class="keyword">bool</span> in[N],used[N],done[N],vis[N],IsPos[N];</span><br><span class="line"><span class="keyword">char</span> ch;</span><br><span class="line"><span class="keyword">int</span> n,m,q,x[N],y[N],qx,qy,h[N],ep=<span class="number">1</span>,sk[N],sp,dfn[N],low[N],tm,color[N],cp,hq[N],qp=<span class="number">1</span>,f[N],djw,djf,djt,dep[N],fa[N],pos[N],neg[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span></span>&#123;x=<span class="number">0</span>;<span class="keyword">do</span>&#123;ch=getchar();&#125;<span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||<span class="string">&#x27;9&#x27;</span>&lt;ch);<span class="keyword">do</span>&#123;x=x*<span class="number">10</span>+ch-<span class="string">&#x27;0&#x27;</span>;ch=getchar();&#125;<span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">AddEdge</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp;x,<span class="keyword">const</span> <span class="keyword">int</span> &amp;y)</span></span>&#123;e[++ep].y=y;e[ep].t=h[x];h[x]=ep;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">AddQuery</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp;x,<span class="keyword">const</span> <span class="keyword">int</span> &amp;y)</span></span>&#123;Q[++qp].y=y;Q[qp].t=hq[x];hq[x]=qp;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">F</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">djw=x;<span class="keyword">while</span>(f[djw]!=djw)djw=f[djw];djf=djw;</span><br><span class="line">djw=x;<span class="keyword">while</span>(djw!=djf)&#123;djt=f[djw];f[djw]=djf;djw=djt;&#125;</span><br><span class="line"><span class="keyword">return</span> djf;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TarjanSCC</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">dfn[x]=low[x]=++tm;</span><br><span class="line">Spush(x);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=h[x];i;i=e[i].t)</span><br><span class="line"><span class="keyword">if</span>(!used[i&gt;&gt;<span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!dfn[e[i].y])</span><br><span class="line">&#123;</span><br><span class="line">used[i&gt;&gt;<span class="number">1</span>]=<span class="literal">true</span>;</span><br><span class="line">TarjanSCC(e[i].y);</span><br><span class="line">low[x]=min(low[x],low[e[i].y]);</span><br><span class="line">used[i&gt;&gt;<span class="number">1</span>]=<span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(in[e[i].y])low[x]=min(low[x],dfn[e[i].y]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(dfn[x]==low[x])</span><br><span class="line">&#123;</span><br><span class="line">color[x]=++cp;</span><br><span class="line"><span class="keyword">while</span>(Stop()!=x)</span><br><span class="line">&#123;</span><br><span class="line">color[Stop()]=cp;</span><br><span class="line">Spop();</span><br><span class="line">&#125;</span><br><span class="line">Spop();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TarjanLCA</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">done[x]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=h[x];i;i=e[i].t)</span><br><span class="line"><span class="keyword">if</span>(!done[e[i].y])TarjanLCA(e[i].y),f[e[i].y]=x;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=hq[x];i;i=Q[i].t)</span><br><span class="line"><span class="keyword">if</span>(done[Q[i].y])Q[i|<span class="number">1</span>].ans=F(Q[i].y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=h[x];i;i=e[i].t)</span><br><span class="line"><span class="keyword">if</span>(e[i].y!=fa[x])</span><br><span class="line">&#123;</span><br><span class="line">fa[e[i].y]=x;</span><br><span class="line">dep[e[i].y]=dep[x]+<span class="number">1</span>;</span><br><span class="line">dfs(e[i].y);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GetPosUp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vis[x]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=h[x];i;i=e[i].t)</span><br><span class="line"><span class="keyword">if</span>(!vis[e[i].y])</span><br><span class="line">&#123;</span><br><span class="line">GetPosUp(e[i].y);</span><br><span class="line">pos[x]=max(pos[x],pos[e[i].y]<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(pos[x])IsPos[x]=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GetNegUp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vis[x]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=h[x];i;i=e[i].t)</span><br><span class="line"><span class="keyword">if</span>(!vis[e[i].y])</span><br><span class="line">&#123;</span><br><span class="line">GetNegUp(e[i].y);</span><br><span class="line">neg[x]=max(neg[x],neg[e[i].y]<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(neg[x])<span class="keyword">if</span>(IsPos[x])&#123;<span class="built_in">puts</span>(<span class="string">&quot;No&quot;</span>);<span class="built_in">exit</span>(<span class="number">0</span>);&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">read(n),read(m),read(q);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)read(x[i]),read(y[i]),AddEdge(x[i],y[i]),AddEdge(y[i],x[i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="keyword">if</span>(!dfn[i])TarjanSCC(i);</span><br><span class="line"><span class="built_in">memset</span>(e,<span class="number">0</span>,<span class="keyword">sizeof</span>(e));</span><br><span class="line"><span class="built_in">memset</span>(h,<span class="number">0</span>,<span class="keyword">sizeof</span>(h));</span><br><span class="line">ep=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)<span class="keyword">if</span>(color[x[i]]!=color[y[i]])AddEdge(color[x[i]],color[y[i]]),AddEdge(color[y[i]],color[x[i]]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=q;i++)</span><br><span class="line">&#123;</span><br><span class="line">read(qx),read(qy);</span><br><span class="line"><span class="keyword">if</span>(color[qx]!=color[qy])AddQuery(color[qx],color[qy]),AddQuery(color[qy],color[qx]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cp;i++)f[i]=i;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cp;i++)<span class="keyword">if</span>(!done[i])TarjanLCA(i);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cp;i++)<span class="keyword">if</span>(!dep[i])dep[i]=<span class="number">1</span>,dfs(i);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=qp;i+=<span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">pos[Q[i|<span class="number">1</span>].y]=dep[Q[i|<span class="number">1</span>].y]-dep[Q[i|<span class="number">1</span>].ans];</span><br><span class="line">neg[Q[i].y]=dep[Q[i].y]-dep[Q[i|<span class="number">1</span>].ans];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="keyword">if</span>(!vis[i])GetPosUp(i);</span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="keyword">if</span>(!vis[i])GetNegUp(i);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;Yes&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h3&gt;&lt;p&gt;给定一个 $n$ 个点 $m$ 条边的无向图。有 $q$ 个人，第 $i$ 个人要从 $s_i$ 到 $t_i$。&lt;/p&gt;
&lt;p&gt;现在你要给</summary>
      
    
    
    
    <category term="Codeforces" scheme="http://hydd.cf/categories/Codeforces/"/>
    
    
    <category term="Tarjan" scheme="http://hydd.cf/tags/Tarjan/"/>
    
    <category term="树上差分" scheme="http://hydd.cf/tags/%E6%A0%91%E4%B8%8A%E5%B7%AE%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>20200825 day2题解</title>
    <link href="http://hydd.cf/2020/08/25/sol_9/"/>
    <id>http://hydd.cf/2020/08/25/sol_9/</id>
    <published>2020-08-24T16:00:00.000Z</published>
    <updated>2020-10-01T04:58:00.519Z</updated>
    
    <content type="html"><![CDATA[<h3 id="树状数组"><a href="#树状数组" class="headerlink" title="树状数组"></a>树状数组</h3><ul><li>考场 $AC$。</li><li>首先，对于一个点 $x$，它管辖的点数为 $lowbit(x)$，如下图：<img src="/pic4.png" alt=""></li><li>$1$ 管辖了 $[1,1]$，$2$ 管辖了 $[1,2]$，$3$ 管辖了 $[3,3]$，$4$ 管辖了 $[1,4]\cdots$。</li><li>首先先从 $S$ 个数中选出不同的 $m$ 个数，方案数为 $\binom Sm$，之后我们只考虑这 $m$ 个数。算这个可以直接 $\frac{(S-m+1)(S-m+2)\cdots S}{m!}$ 暴力 $O(m)$ 计算。</li></ul><ul><li>题目要求的是计数器上和值的和，不妨对每个点的贡献分开来考虑，下面我们计算点 $x$ 对答案的贡献。</li><li>记 $u=lowbit(x)$（即管辖的点数），那么贡献应为 $\sum\limits_{i=0}^m \binom mi\binom mi\times u^i (n-u)^{m-i}\times f(i)\times(m-i)!$</li><li>解释一下：枚举的 $i$ 表示有 $i$ 次操作在 $\rm mdf$ 时经过了 $x$。</li><li>在 $m$ 次操作中，选出一些操作，使得这几次操作经过了 $x$，其它操作不经过 $x$，所以有 $\binom mi$ 种方案。</li><li>在 $m$ 次操作中，选出 $i$ 次经过 $x$ 的操作使用的 $b_i$，所以有 $\binom mi$ 种方案。</li><li>选 $[x-u+1,x]$ 这些点中的任一点都会经过 $x$ ，所以有 $u$ 种方案，$i$ 次操作共有 $u^i$ 种方案。</li><li>同理，选除了 $[x-u+1,x]$ 这些点外的任一点都不会经过 $x$，所以有 $n-u$ 种方案，$m-i$ 次操作共有 $(n-u)^{m-i}$ 种方案。</li><li>$f(i)$ 表示所有长度为 $i$ 的排列，当前值为前缀最大值的位置数量之和，也就是 $x$ 点的贡献。</li><li>而剩下的 $(m-i)!$ 即为剩下的不经过 $x$ 的操作，它们的 $b_i$ 可以随便排列。</li></ul><ul><li>现在比较重要的是这个 $f(i)$ 怎么算，考虑递推。</li><li>如果现在知道了 $f(i-1)$，设它排列中的数均在 $[2,i]$ 之间。那么，我们在长度为 $i$ 的排列中任意的位置插入一个 $1$，那么它对其它位置的贡献没有影响，依旧为 $f(i-1)$，因为它是最小的数，而插入有 $i$ 种方案。</li><li>而 $1$ 本身有没有贡献呢？可以发现，只有 $1$ 在第一个位置才会有 $1$ 的贡献，在其它位置没有贡献。而 $1$ 在第一个位置有 $(n-1)!$ 种方案。</li><li>所以，$f(i)=i\times f(i-1)+(i-1)!$。</li><li>官方题解用的是第一类斯特林数 $n\brack m$ 表示将 $n$ 个数的序列划分为 $m$ 个圆排列的方案数，顺便提一句，第二类斯特林数 $n\brace m$ 表示将 $n$ 个数的序列划分为 $m$ 个非空集合的方案数。</li><li>$n$ 个数的排列，有 $m$ 个数满足这个数是前缀中最大的的方案数为 $n\brack m$。原因是把 $n$ 个数分成了 $m$ 段，每段中最大数一定在最前面，即每一段内的排列，只有相对位置不同，才算不同的排列，就是圆排列。而 $f(i)=\sum_{j=0}^i {i\brack j}\times j$，通过 ${n\brack m}={n-1 \brack m-1}+{n-1\brack m}\times (n-1)$ 也可推出相同的结果，这里不再赘述。</li></ul><ul><li>这样直接模拟的复杂度是 $O(nm)$，还是过不去。但是我们可以发现，它们的 $lowbit$ 只有 $\log n$ 种。</li><li>于是我们可以计算出 $lowbit(x)=2^i$ 的 $1\leqslant x\leqslant n$ 的个数一起计算。可以发现即为 $\lfloor \frac{\lfloor \frac n{2^i}\rfloor+1}2\rfloor$。（即要保证后 $i-1$ 位为 $0$，$i$ 位为 $1$）。</li><li>时间复杂度 $O(m\log n)$。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*********************************************************************</span></span><br><span class="line"><span class="comment"> * Source：FOI2020算法高级培训第2试</span></span><br><span class="line"><span class="comment"> * Problem：bit</span></span><br><span class="line"><span class="comment"> * Author：hydd</span></span><br><span class="line"><span class="comment"> * Date：2020/8/25</span></span><br><span class="line"><span class="comment"> * Encoding：Simplified Chinese (GB2312)</span></span><br><span class="line"><span class="comment">*********************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> File(x) freopen(x<span class="meta-string">&quot;.in&quot;</span>,<span class="meta-string">&quot;r&quot;</span>,stdin);freopen(x<span class="meta-string">&quot;.out&quot;</span>,<span class="meta-string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,S; ll ans,sum,s;</span><br><span class="line">ll fac[<span class="number">510000</span>],inv[<span class="number">510000</span>],num[<span class="number">510000</span>];</span><br><span class="line">ll p1[<span class="number">510000</span>],p2[<span class="number">510000</span>];</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">Getchar</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> now[<span class="number">1</span>&lt;&lt;<span class="number">20</span>],*S,*T;</span><br><span class="line"><span class="keyword">if</span> (T==S)&#123;</span><br><span class="line">T=(S=now)+fread(now,<span class="number">1</span>,<span class="number">1</span>&lt;&lt;<span class="number">20</span>,<span class="built_in">stdin</span>);</span><br><span class="line"><span class="keyword">if</span> (T==S) <span class="keyword">return</span> EOF;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> *S++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> ch=Getchar();</span><br><span class="line"><span class="keyword">while</span> (ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">if</span> (ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">-1</span>;</span><br><span class="line">ch=Getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (ch&lt;=<span class="string">&#x27;9&#x27;</span>&amp;&amp;ch&gt;=<span class="string">&#x27;0&#x27;</span>) x=x*<span class="number">10</span>+ch-<span class="string">&#x27;0&#x27;</span>,ch=Getchar();</span><br><span class="line"><span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">C</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n&lt;m) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> fac[n]*inv[m]%Mod*inv[n-m]%Mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">freopen(<span class="string">&quot;bit.in&quot;</span>,<span class="string">&quot;r&quot;</span>,<span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">&quot;bit.out&quot;</span>,<span class="string">&quot;w&quot;</span>,<span class="built_in">stdout</span>);</span><br><span class="line">n=read(); m=read(); S=read();</span><br><span class="line">fac[<span class="number">0</span>]=<span class="number">1</span>; <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) fac[i]=fac[i<span class="number">-1</span>]*i%Mod;</span><br><span class="line">inv[<span class="number">1</span>]=<span class="number">1</span>; <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=m;i++) inv[i]=(Mod-Mod/i)*inv[Mod%i]%Mod;</span><br><span class="line">inv[<span class="number">0</span>]=<span class="number">1</span>; <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) inv[i]=inv[i<span class="number">-1</span>]*inv[i]%Mod;</span><br><span class="line">num[<span class="number">0</span>]=<span class="number">0</span>; <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) num[i]=(num[i<span class="number">-1</span>]*i+fac[i<span class="number">-1</span>])%Mod;</span><br><span class="line">ans=inv[m]; sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=S-m+<span class="number">1</span>;i&lt;=S;i++) ans=ans*i%Mod;</span><br><span class="line"><span class="keyword">if</span> (!ans)&#123; <span class="built_in">puts</span>(<span class="string">&quot;0&quot;</span>); <span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line"><span class="keyword">int</span> u,tot;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;(<span class="number">1</span>&lt;&lt;i)&lt;=n;i++)&#123;<span class="comment">//lowbit(x)==2^i,1&lt;=x&lt;=n</span></span><br><span class="line">u=(<span class="number">1</span>&lt;&lt;i); tot=(((n&gt;&gt;i)+<span class="number">1</span>)&gt;&gt;<span class="number">1</span>); s=<span class="number">0</span>;<span class="comment">//tot_x</span></span><br><span class="line">p1[<span class="number">0</span>]=<span class="number">1</span>; <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++) p1[j]=p1[j<span class="number">-1</span>]*u%Mod;</span><br><span class="line">p2[<span class="number">0</span>]=<span class="number">1</span>; <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++) p2[j]=p2[j<span class="number">-1</span>]*(n-u)%Mod;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=m;j++) s=(s+p1[j]*p2[m-j]%Mod*num[j]%Mod*C(m,j)%Mod*C(m,j)%Mod*fac[m-j])%Mod;</span><br><span class="line">sum=(sum+s*tot)%Mod;</span><br><span class="line">&#125;</span><br><span class="line">ans=ans*sum%Mod;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="矩形计数"><a href="#矩形计数" class="headerlink" title="矩形计数"></a>矩形计数</h3><ul><li>考场上没有想到这种类似根号分治的做法，得了 $60pts$。</li><li>设 $blo=\sqrt n$。</li><li>按每列点的个数分类：第一种 $\leqslant blo$，第二种 $&gt;blo$。分情况考虑：</li></ul><ol><li>矩形左右两边的列都是第一类的方案数：<ul><li>对于所有第一类的列，将列中所有点两两横坐标组成的二元组的数量 $+1$。由于点都不同，所以同一列中不会有重复的二元组。</li><li>执行完之后，每个二元组的数量即有这个二元组的列的个数</li><li>然后看每个二元组的数量，若数量为 $u$，则对答案贡献 $\binom u2$。因为它们两两之间都可以组成矩形，$x_1,x_2$ 为二元组中的两个数，$y_1,y_2$ 为这两列的编号。</li><li>这个复杂度为 $\sum a_i^2$，满足 $\sum a_i\leqslant n，a_i\leqslant blo$。推导一下可以发现它不超过 $blo^2\times \frac n{blo}=n\times blo$。</li></ul></li><li>矩形左右两边的列至少有一种是第二类的方案数：<ul><li>枚举第二类的列，将列中所有横坐标的位置标记。标记后枚举其它所有列，对于某一列，看它有的横坐标有多少个被标记，若数量为 $u$，则对答案贡献 $\binom u2$。因为它们两两之间都可以组成矩形，$x_1,x_2$ 为 $u$ 中的两个数，$y_1,y_2$ 为这两列的编号。（注意，若两列都是第二类，则有可能算重，可以钦定两列的编号大小，比如只在编号大的列统计编号小的对它的贡献）</li><li>对于一个第二类的列，复杂度为 $O(n)$。（点数之和为 $n$）。而第二类的列最多有 $\frac n{blo}$ 个，复杂度为 $O(\frac{n^2}{blo})$。</li></ul></li></ol><ul><li>而 $blo=\sqrt n$，故时间复杂度为 $O(n\sqrt n)$。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*********************************************************************</span></span><br><span class="line"><span class="comment"> * Source：FOI2020算法高级培训第2试</span></span><br><span class="line"><span class="comment"> * Problem：rec</span></span><br><span class="line"><span class="comment"> * Author：hydd</span></span><br><span class="line"><span class="comment"> * Date：2020/8/25</span></span><br><span class="line"><span class="comment"> * Encoding：Simplified Chinese (GB2312)</span></span><br><span class="line"><span class="comment">*********************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> File(x) freopen(x<span class="meta-string">&quot;.in&quot;</span>,<span class="meta-string">&quot;r&quot;</span>,stdin);freopen(x<span class="meta-string">&quot;.out&quot;</span>,<span class="meta-string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">int</span> n,x[<span class="number">110000</span>],y[<span class="number">110000</span>],tmp[<span class="number">110000</span>],s[<span class="number">110000</span>];</span><br><span class="line"><span class="keyword">int</span> cnt1,a[<span class="number">110000</span>],cnt2,b[<span class="number">110000</span>]; ll ans;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec[<span class="number">110000</span>],num[<span class="number">110000</span>];</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">Getchar</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> now[<span class="number">1</span>&lt;&lt;<span class="number">20</span>],*S,*T;</span><br><span class="line"><span class="keyword">if</span> (T==S)&#123;</span><br><span class="line">T=(S=now)+fread(now,<span class="number">1</span>,<span class="number">1</span>&lt;&lt;<span class="number">20</span>,<span class="built_in">stdin</span>);</span><br><span class="line"><span class="keyword">if</span> (T==S) <span class="keyword">return</span> EOF;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> *S++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> ch=Getchar();</span><br><span class="line"><span class="keyword">while</span> (ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">if</span> (ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">-1</span>;</span><br><span class="line">ch=Getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (ch&lt;=<span class="string">&#x27;9&#x27;</span>&amp;&amp;ch&gt;=<span class="string">&#x27;0&#x27;</span>) x=x*<span class="number">10</span>+ch-<span class="string">&#x27;0&#x27;</span>,ch=Getchar();</span><br><span class="line"><span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">calc</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123; <span class="keyword">return</span> <span class="number">1l</span>l*x*(x<span class="number">-1</span>)/<span class="number">2</span>;&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">freopen(<span class="string">&quot;rec.in&quot;</span>,<span class="string">&quot;r&quot;</span>,<span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">&quot;rec.out&quot;</span>,<span class="string">&quot;w&quot;</span>,<span class="built_in">stdout</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n); <span class="keyword">int</span> blo=(<span class="keyword">int</span>)<span class="built_in">sqrt</span>(n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;x[i],&amp;y[i]);</span><br><span class="line">a[++cnt1]=x[i]; b[++cnt2]=y[i];</span><br><span class="line">&#125;</span><br><span class="line">sort(a+<span class="number">1</span>,a+cnt1+<span class="number">1</span>); cnt1=unique(a+<span class="number">1</span>,a+cnt1+<span class="number">1</span>)-a<span class="number">-1</span>;</span><br><span class="line">sort(b+<span class="number">1</span>,b+cnt2+<span class="number">1</span>); cnt2=unique(b+<span class="number">1</span>,b+cnt2+<span class="number">1</span>)-b<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">x[i]=lower_bound(a+<span class="number">1</span>,a+cnt1+<span class="number">1</span>,x[i])-a;</span><br><span class="line">y[i]=lower_bound(b+<span class="number">1</span>,b+cnt2+<span class="number">1</span>,y[i])-b;</span><br><span class="line">vec[x[i]].push_back(y[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt1;i++) sort(vec[i].begin(),vec[i].end());</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt1;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> len=vec[i].size();</span><br><span class="line"><span class="keyword">if</span> (len&gt;blo) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> a=<span class="number">0</span>;a&lt;len;a++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> b=a+<span class="number">1</span>;b&lt;len;b++)</span><br><span class="line">num[vec[i][a]].push_back(vec[i][b]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt2;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> len=num[i].size(),cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;len;j++)&#123;</span><br><span class="line"><span class="keyword">if</span> (!tmp[num[i][j]]) s[++cnt]=num[i][j];</span><br><span class="line">tmp[num[i][j]]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)&#123;</span><br><span class="line">ans+=calc(tmp[s[i]]);</span><br><span class="line">tmp[s[i]]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt1;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> len=vec[i].size();</span><br><span class="line"><span class="keyword">if</span> (len&lt;=blo) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;len;j++) tmp[vec[i][j]]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> a=<span class="number">1</span>;a&lt;=cnt1;a++)&#123;</span><br><span class="line"><span class="keyword">int</span> len2=vec[a].size();</span><br><span class="line"><span class="keyword">if</span> (len2&gt;blo&amp;&amp;i&lt;=a) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">int</span> tot=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> b=<span class="number">0</span>;b&lt;len2;b++)</span><br><span class="line"><span class="keyword">if</span> (tmp[vec[a][b]]) tot++;</span><br><span class="line">ans+=calc(tot);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;len;j++) tmp[vec[i][j]]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分果汁"><a href="#分果汁" class="headerlink" title="分果汁"></a>分果汁</h3><ul><li>考场上没有想到合并 $k$，得了 $60pts$。</li><li>首先要证明几个定理：</li><li>定理一：$n(n&gt;1)$ 种果汁必能分入 $n-1$ 个瓶子。<ul><li>这个类似于 $NOI2020$ 制作菜品。设 $sum$ 为总体积，$k$  为每个瓶子的容积。有以下关系：$k=\frac{sum}{n-1}$。</li><li>每次选择体积最小的和体积最大的果汁，它们之和必定 $&gt;k$（如果 $\leqslant k$，那么剩下的果汁的体积也必定 $&lt;k$，所以总体积 $&lt; k+(n-2)k=(n-1)k=sum$，矛盾）。</li><li>那么必定有剩余，将剩余的当做一种新的果汁，即变成了 $n-1$ 种果汁分入 $n-2$ 个瓶子。</li><li>而 $2$ 种果汁必能分入 $1$ 个瓶子，归纳得证。</li></ul></li><li>定理二：$m=n−p(p\geqslant 1)$ 的问题有解当且仅当能划分为 $p$ 个 $m=n−1$ 的问题<ul><li>考虑建图，把果汁看成点，将放入同一个瓶子的果汁连边。</li><li>$n$ 个点，$\leqslant n-p$ 条边，必定存在一个连通块满足 边数$=$点数$-1$。（否则所有连通块边数 $\geqslant$ 点数，那么总边数$\geqslant$总点数，即 $n-p\geqslant n(p\geqslant 1)$，矛盾。将这个连通块删去，变为 $m’=n’-(p-1)$ 的问题。</li><li>当 $p=1$ 时显然成立，归纳得证。</li></ul></li><li>记 $f_(S,j)$ 为果汁集合为 $S$，分成了 $j$ 个 $m=n-1$ 的子问题，用一个长度为 $n$ 的 $01$ 串表示（$n$ 个位置代表的是不同的 $k$）。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*********************************************************************</span></span><br><span class="line"><span class="comment"> * Source：FOI2020算法高级培训第2试</span></span><br><span class="line"><span class="comment"> * Problem：juice</span></span><br><span class="line"><span class="comment"> * Author：hydd</span></span><br><span class="line"><span class="comment"> * Date：2020/8/25</span></span><br><span class="line"><span class="comment"> * Encoding：Simplified Chinese (GB2312)</span></span><br><span class="line"><span class="comment">*********************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> File(x) freopen(x<span class="meta-string">&quot;.in&quot;</span>,<span class="meta-string">&quot;r&quot;</span>,stdin);freopen(x<span class="meta-string">&quot;.out&quot;</span>,<span class="meta-string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">int</span> n,a[<span class="number">22</span>],f[<span class="number">1100000</span>],ans;</span><br><span class="line">ll sum[<span class="number">1100000</span>],tot[<span class="number">1100000</span>];</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">Getchar</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> now[<span class="number">1</span>&lt;&lt;<span class="number">20</span>],*S,*T;</span><br><span class="line"><span class="keyword">if</span> (T==S)&#123;</span><br><span class="line">T=(S=now)+fread(now,<span class="number">1</span>,<span class="number">1</span>&lt;&lt;<span class="number">20</span>,<span class="built_in">stdin</span>);</span><br><span class="line"><span class="keyword">if</span> (T==S) <span class="keyword">return</span> EOF;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> *S++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> ch=Getchar();</span><br><span class="line"><span class="keyword">while</span> (ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">if</span> (ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">-1</span>;</span><br><span class="line">ch=Getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (ch&lt;=<span class="string">&#x27;9&#x27;</span>&amp;&amp;ch&gt;=<span class="string">&#x27;0&#x27;</span>) x=x*<span class="number">10</span>+ch-<span class="string">&#x27;0&#x27;</span>,ch=Getchar();</span><br><span class="line"><span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">freopen(<span class="string">&quot;juice.in&quot;</span>,<span class="string">&quot;r&quot;</span>,<span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">&quot;juice.out&quot;</span>,<span class="string">&quot;w&quot;</span>,<span class="built_in">stdout</span>);</span><br><span class="line">n=read(); ans=n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) a[i]=read();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">1</span>&lt;&lt;n;i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line"><span class="keyword">if</span> (i&amp;(<span class="number">1</span>&lt;&lt;j))&#123;</span><br><span class="line">tot[i]++;</span><br><span class="line">sum[i]+=a[j];</span><br><span class="line">&#125;</span><br><span class="line">f[<span class="number">0</span>]=(<span class="number">1</span>&lt;&lt;(n+<span class="number">1</span>))<span class="number">-1</span>; <span class="keyword">int</span> upperlim=(<span class="number">1</span>&lt;&lt;n)<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> now=<span class="number">1</span>;now&lt;n;now++)&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=upperlim;j++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;n;k++) f[j|(<span class="number">1</span>&lt;&lt;k)]|=f[j];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=upperlim;i++)&#123;<span class="comment">//K=sum[(1&lt;&lt;n)-1]/m,sum[i]==(tot[i]-now)*K  ===&gt; m=p/q 要分出n-m个，答案为m</span></span><br><span class="line">ll p=sum[(<span class="number">1</span>&lt;&lt;n)<span class="number">-1</span>]*(tot[i]-now),q=sum[i];</span><br><span class="line"><span class="keyword">if</span> (i&amp;&amp;p&gt;<span class="number">0</span>&amp;&amp;p%q==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">int</span> x=max(n-p/q,<span class="number">0l</span>l);</span><br><span class="line">f[i]&amp;=(<span class="number">1</span>&lt;&lt;x);<span class="comment">//原来符合条件，并且现在也符合条件才行，否则不行。</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> f[i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (f[(<span class="number">1</span>&lt;&lt;n)<span class="number">-1</span>]&amp;(<span class="number">1</span>&lt;&lt;now)) ans=n-now;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;树状数组&quot;&gt;&lt;a href=&quot;#树状数组&quot; class=&quot;headerlink&quot; title=&quot;树状数组&quot;&gt;&lt;/a&gt;树状数组&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;考场 $AC$。&lt;/li&gt;
&lt;li&gt;首先，对于一个点 $x$，它管辖的点数为 $lowbit(x)$，如下图：&lt;</summary>
      
    
    
    
    <category term="FOI2020高级培训" scheme="http://hydd.cf/categories/FOI2020%E9%AB%98%E7%BA%A7%E5%9F%B9%E8%AE%AD/"/>
    
    
  </entry>
  
  <entry>
    <title>僵尸</title>
    <link href="http://hydd.cf/2020/08/23/sol_1/"/>
    <id>http://hydd.cf/2020/08/23/sol_1/</id>
    <published>2020-08-22T16:00:00.000Z</published>
    <updated>2020-11-13T01:33:36.015Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h3><blockquote><p>给定一棵 $n$ 个点的无根树，每条边有一堵墙，高度在 $[l_i,r_i]$ 等概率出现。</p><p>有 $m$ 个僵尸，第 $i$ 只僵尸初始出生在 $x_i$ 点，能力值为 $h_i$，表示可以走过墙的高度 $&lt;h_i$ 的边。</p><p>称一个点是安全的，当且仅当它不能被任何一个僵尸走到。</p><p>求树上至少有一个点是安全的概率，对 $998244353$ 取模，有 $T$ 组数据。</p><p>$T\leqslant 5,1\leqslant n,m\leqslant 2000,1\leqslant x_i\leqslant n,1\leqslant l_i,r_i,h_i\leqslant 10^9$，保证 $r_i-l_i+1\neq 998244353$。</p><p>$\texttt{source:[Nowcoder2018 ACM多校第十场 I] Rikka with Zombies}$。</p></blockquote><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>先说说考场的思路：</p><ul><li>首先，因为所有高度都是等概率的，所以可以用 $p=\frac{\texttt{至少有一个点是安全的方案数}}{\texttt{总方案数}}$ 得到答案，而 $1-p=\frac{\texttt{所有点都不安全的方案数}}{\texttt{总方案数}}$，所以我们可以算所有点都不安全的方案数。</li><li>这个东西并不容易直接算，而这种树上计数问题一般考虑树形 $dp$。</li><li>所以，我当时设的是 $dp[u][i]$ 表示以 $u$ 为根，$u$ 子树内的所有点都是不安全的，且 $u$ 子树内能走到 $u$ 的能力值最大的僵尸编号。然后我们会发现，$u$ 子树内的一些点可能可以从子树外的僵尸走到，所以就不行了。</li></ul><p>正解：</p><ul><li>一般的树形 $dp$ 是只考虑子树内的，但是这题是要考虑子树外的。</li><li>设的是 $dp[u][i]$ 表示以 $u$ 为根，$u$ 子树内的所有点都是不安全的，子树外皆有可能，且能走到 $u$ 的能力值最大的僵尸编号（可以在子树外）。</li><li>考虑 $f[v][b]$ 对 $f[u][a]$ 的贡献， $v$ 是 $u$ 的一个孩子。</li><li>若 $a=b$，不论 $a$ 在 $v$ 子树内还是子树外，都必须能跨过 $(u,v)$。那么 $f[u][a]+=f[u][a]\times f[v][b]\times(a\texttt{能跨过}(u,v)\texttt{的方案数})$。</li><li>若 $a\neq b$，那么 $a,b$ 必定不同时在 $v$ 子树内或 $v$ 子树外，且它们两者能力值较大的必定不能跨过 $(u,v)$。</li><li>具体来说，若 $a &lt; b$，且 $a$ 在子树 $v$ 外，$b$ 在子树 $v$ 内，那么 $f[u][a]+=f[u][a]\times f[v][b]\times(b\texttt{不能跨过}(u,v)\texttt{的方案数})$。若 $a &gt; b$，且 $a$ 在子树 $v$ 外，$b$ 在子树 $v$ 内，那么 $f[u][a]+=f[u][a]\times f[v][b]\times(a\texttt{不能跨过}(u,v)\texttt{的方案数})$。</li><li>初值怎么设呢？设 $u$ 点出生的能力值最大的僵尸为 $k$（没有则为 $1$）， 则对于所有 $i\geqslant k$，$f[u][i]=1$。</li><li>但是，如果 $x[a]..u$ 之间的最小的 $l$ 都 $\geqslant h_a$ 的话，那贡献应该为 $0$，那它在 $dp$ 中会不会有贡献？</li><li>而在它们两个的 $LCA$ 的时候，贡献必定已经消失了，因为必定有一条边不能跨过，贡献是乘起来的，所以就是 $0$。也就是，它在 $LCA$ 的时候才能保证 $dp$ 值是正确的，在其他位置有可能是错误的，比较奇怪。显然的是， $f[1]$ 的值是对的，答案显然是 $\sum_i f[1][i]$。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*********************************************************************</span></span><br><span class="line"><span class="comment"> * Source：CSP-S模拟赛</span></span><br><span class="line"><span class="comment"> * Problem：zombie</span></span><br><span class="line"><span class="comment"> * Author：hydd</span></span><br><span class="line"><span class="comment"> * Date：2020/8/21</span></span><br><span class="line"><span class="comment"> * Encoding：Simplified Chinese (GB2312)</span></span><br><span class="line"><span class="comment">*********************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">2100</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXE=<span class="number">4100</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">int</span> T,n,m,l[MAXN],r[MAXN],f[MAXN][MAXN],tmp[MAXN];</span><br><span class="line"><span class="keyword">int</span> edgenum,vet[MAXE],Next[MAXE],Head[MAXN];</span><br><span class="line"><span class="built_in">bitset</span>&lt;MAXN&gt; vis[MAXN];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> x,v;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> node &amp;a) <span class="keyword">const</span>&#123; <span class="keyword">return</span> v&lt;a.v;&#125;</span><br><span class="line">&#125; a[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getnum</span><span class="params">(<span class="keyword">int</span> t,<span class="keyword">int</span> v)</span></span>&#123; <span class="keyword">return</span> max(<span class="number">0</span>,min(v<span class="number">-1</span>,r[t])-l[t]+<span class="number">1</span>);&#125;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">Getchar</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> now[<span class="number">1</span>&lt;&lt;<span class="number">20</span>],*S,*T;</span><br><span class="line"><span class="keyword">if</span> (T==S)&#123;</span><br><span class="line">T=(S=now)+fread(now,<span class="number">1</span>,<span class="number">1</span>&lt;&lt;<span class="number">20</span>,<span class="built_in">stdin</span>);</span><br><span class="line"><span class="keyword">if</span> (T==S) <span class="keyword">return</span> EOF;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> *S++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> ch=Getchar();</span><br><span class="line"><span class="keyword">while</span> (ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">if</span> (ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">-1</span>;</span><br><span class="line">ch=Getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (ch&lt;=<span class="string">&#x27;9&#x27;</span>&amp;&amp;ch&gt;=<span class="string">&#x27;0&#x27;</span>) x=x*<span class="number">10</span>+ch-<span class="string">&#x27;0&#x27;</span>,ch=Getchar();</span><br><span class="line"><span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll x,<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line">ll res=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (a)&#123;</span><br><span class="line"><span class="keyword">if</span> (a&amp;<span class="number">1</span>) res=res*x%Mod;</span><br><span class="line">x=x*x%Mod; a&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">vet[++edgenum]=v;</span><br><span class="line">Next[edgenum]=Head[u];</span><br><span class="line">Head[u]=edgenum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> pos=<span class="number">1</span>,v,sum;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line"><span class="keyword">if</span> (a[i].x==u) vis[u][i]=<span class="number">1</span>,pos=i;</span><br><span class="line"><span class="keyword">else</span> vis[u][i]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> e=Head[u];e;e=Next[e])&#123;</span><br><span class="line">v=vet[e]; <span class="keyword">if</span> (v==fa) <span class="keyword">continue</span>;</span><br><span class="line">dfs(v,u); vis[u]|=vis[v];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) f[u][i]=(i&gt;=pos);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> e=Head[u];e;e=Next[e])&#123;</span><br><span class="line">v=vet[e]; <span class="keyword">if</span> (v==fa) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">int</span> t=e&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) tmp[i]=f[u][i],f[u][i]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;<span class="comment">//i=j</span></span><br><span class="line"><span class="keyword">int</span> k=getnum(t,a[i].v);</span><br><span class="line">f[u][i]=(f[u][i]+<span class="number">1l</span>l*tmp[i]*f[v][i]%Mod*k)%Mod;</span><br><span class="line">&#125;</span><br><span class="line">sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;<span class="comment">//i&gt;j，i在子树外，j在子树内</span></span><br><span class="line"><span class="keyword">int</span> k=getnum(t,a[i].v);</span><br><span class="line"><span class="keyword">if</span> (vis[v][i]) sum=(sum+f[v][i])%Mod;<span class="comment">//在子树内，记录前缀和</span></span><br><span class="line"><span class="keyword">else</span> f[u][i]=(f[u][i]+<span class="number">1l</span>l*tmp[i]*sum%Mod*(r[t]-l[t]+<span class="number">1</span>-k))%Mod;</span><br><span class="line">&#125;</span><br><span class="line">sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=m;i&gt;=<span class="number">1</span>;i--)&#123;<span class="comment">//i&lt;j，i在子树外，j在子树内</span></span><br><span class="line"><span class="keyword">int</span> k=getnum(t,a[i].v);</span><br><span class="line"><span class="keyword">if</span> (vis[v][i]) sum=(sum+<span class="number">1l</span>l*f[v][i]*(r[t]-l[t]+<span class="number">1</span>-k))%Mod;<span class="comment">//在子树内，记录前缀和</span></span><br><span class="line"><span class="keyword">else</span> f[u][i]=(f[u][i]+<span class="number">1l</span>l*tmp[i]*sum)%Mod;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">freopen(<span class="string">&quot;zombie.in&quot;</span>,<span class="string">&quot;r&quot;</span>,<span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">&quot;zombie.out&quot;</span>,<span class="string">&quot;w&quot;</span>,<span class="built_in">stdout</span>);</span><br><span class="line">T=read();</span><br><span class="line"><span class="keyword">while</span> (T--)&#123;</span><br><span class="line">n=read(); m=read(); <span class="keyword">int</span> ans=<span class="number">0</span>,ans2=<span class="number">1</span>;</span><br><span class="line">edgenum=<span class="number">1</span>; <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) Head[i]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> u,v;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">u=read(); v=read();</span><br><span class="line">l[i]=read(); r[i]=read();</span><br><span class="line">ans2=<span class="number">1l</span>l*ans2*(r[i]-l[i]+<span class="number">1</span>)%Mod;</span><br><span class="line">addedge(u,v); addedge(v,u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) a[i].x=read(),a[i].v=read();</span><br><span class="line">sort(a+<span class="number">1</span>,a+m+<span class="number">1</span>); dfs(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) ans=(ans+f[<span class="number">1</span>][i])%Mod;</span><br><span class="line">ans=<span class="number">1l</span>l*ans*qpow(ans2,Mod<span class="number">-2</span>)%Mod;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,(Mod+<span class="number">1</span>-ans)%Mod);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;题目大意&quot;&gt;&lt;a href=&quot;#题目大意&quot; class=&quot;headerlink&quot; title=&quot;题目大意&quot;&gt;&lt;/a&gt;题目大意&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;给定一棵 $n$ 个点的无根树，每条边有一堵墙，高度在 $[l_i,r_i]$ 等概率出现。&lt;/p</summary>
      
    
    
    
    <category term="CSP-S模拟赛" scheme="http://hydd.cf/categories/CSP-S%E6%A8%A1%E6%8B%9F%E8%B5%9B/"/>
    
    
    <category term="树形dp" scheme="http://hydd.cf/tags/%E6%A0%91%E5%BD%A2dp/"/>
    
    <category term="概率/期望" scheme="http://hydd.cf/tags/%E6%A6%82%E7%8E%87-%E6%9C%9F%E6%9C%9B/"/>
    
  </entry>
  
</feed>
