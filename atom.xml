<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>hydd&#39;s blog</title>
  
  
  <link href="http://hydd.cf/atom.xml" rel="self"/>
  
  <link href="http://hydd.cf/"/>
  <updated>2020-10-01T04:54:07.104Z</updated>
  <id>http://hydd.cf/</id>
  
  <author>
    <name>hydd</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>一些有趣的题</title>
    <link href="http://hydd.cf/2020/09/30/funny/"/>
    <id>http://hydd.cf/2020/09/30/funny/</id>
    <published>2020-09-29T16:00:00.000Z</published>
    <updated>2020-10-01T04:54:07.104Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概率"><a href="#概率" class="headerlink" title="概率"></a>概率</h3><h4 id="problem-1"><a href="#problem-1" class="headerlink" title="problem 1"></a>problem 1</h4><p>一个圆中等概率随机选取 $4$ 个点，那么存在一条直径，使得点全在直径一侧的概率是？</p><p>解答参考：<a href="https://www.zhihu.com/question/339701586/answer/789026122">https://www.zhihu.com/question/339701586/answer/789026122</a></p><ul><li>不妨设没有两个点 $A,B$，使得 $O,A,B$ 三点共线。因为这样的概率$\rightarrow 0$。</li><li>定义点 $A$ 为 “最右点” 当且仅当剩下三个点的圆心角都在 $A$ 的圆心角+90°之内。</li><li>我们不妨来研究一下“最右点”和答案的关系。<ol><li>如果四个点处于同一半圆，当且仅当存在“最右点”。</li><li>“最右点”要么没有，要么只有一个，所以每个点是“最右点”是互斥的。</li><li>第一次、第二次选的点、第三次、第四次选的点，成为“最右点”的概率都是$\frac 18$，且它们互不影响。</li></ol></li><li>那么，概率为 $4\times \frac 18=\frac 12$。</li><li>这个问题可以推广到随机选取 $n$ 个点，概率为 $\frac n{2^{n-1}}$。</li></ul><h4 id="problem-2"><a href="#problem-2" class="headerlink" title="problem 2"></a>problem 2</h4><p>$S$ 是集合 $1,2,\cdots,2004$ 的子集，$S$ 中的任意两个数的差不等于 $4$ 或 $7$，问 $S$ 中最多含有多少个元素？</p><p>解答参考：<a href="https://wenku.baidu.com/view/e634ddcc69eae009581becc1.html">https://wenku.baidu.com/view/e634ddcc69eae009581becc1.html</a></p><ul><li>我们将任意连续 $11$ 个数排成一圈，如右图所示：<img src="/pic2.png" alt=""></li><li>显然，由题目条件，相邻的两个数不能同时选，那么最多只能选 $5$ 个数。即每 $11$ 个数至多只能选 $5$ 个数。又因为 $2004=182\times 11+2$，所以至多能选 $182\times 5+2=912$ 个数。</li><li>其次，令 $S=\{x|x=11k+t,k\in \mathcal{Z},t=1,2,4,7,10,1\leqslant x\leqslant 2004\}$ ，那么 $S$ 满足题目条件，且 $|S|=912$。故答案为 $912$。</li></ul><h3 id="有趣的题"><a href="#有趣的题" class="headerlink" title="有趣的题"></a>有趣的题</h3><h4 id="problem-1-1"><a href="#problem-1-1" class="headerlink" title="problem 1"></a>problem 1</h4><p>解答参考：<a href="https://www.bilibili.com/video/BV1UD4y1U7or">https://www.bilibili.com/video/BV1UD4y1U7or</a></p><p>有一个 $64$ 个格子的棋盘，每个格子上放着一个正面朝上或反面朝上的棋子。有一个格子下有硬币。</p><p>有两个人想得到这枚硬币。开始前，两人均不知道棋盘上每个棋子的正反，只知道是个 $8\times 8$ 的棋盘，但他们可以商量一个策略。</p><p>第一个人先可以看到棋盘上每个棋子的正反，同时裁判会告诉第一个人钥匙在哪个棋子的下面。然后这个人必须要翻转且仅翻转一枚棋子，然后离开。</p><p>然后，第二个人再看到棋盘，他只知道现在棋盘上每个棋子的正反，要说出硬币的位置。</p><p>问是否有固定策略。</p><ul><li>首先考虑只有 $2$ 个格子怎么做。不妨设 $0$ 为正面，$1$ 为反面。</li><li>对于第一个人，如果硬币在第一个位置，它要翻成 $0,0$ 或 $0,1$ 中的一种。如果在第二个位置，他要翻成 $1,0$ 或 $1,1$ 中的一种。可以发现，不管初始局面如何，第一个人都可以通过一步达到要求。</li><li>为什么呢，<img src="/pic.png" alt="">，因为每个点都可以通过走一条边到达一个红点和蓝点，点代表的是局面，颜色代表的是硬币的位置。</li><li>我们可以轻易得到 $3$ 个格子是无解的。$3$ 个格子相当于一个立方体，每个顶点有三条边，相邻的点分别为红、绿、蓝三种颜色，每个点最多影响 $3$ 个点的相邻点，所以至少有 $3$ 个红顶点，$3$ 个绿顶点，$3$ 个蓝顶点。而总共只有 $8$ 个顶点，所以不合法。发现只有当 $\frac{2^n}n\in\mathcal Z$ 合法，即 $n\mid 2^n$，也就是说 $n$ 为 $2$ 的次幂。</li><li>那么显然 $64$ 个格子是合法的。</li><li>那么具体策略是什么呢？</li><li>不妨将每个位置标号为 $0,1,2,\cdots,63$，设有硬币的格子为 $x$。将反面棋子的位置异或起来，记为 $y$。</li><li>将 $x\oplus y$ 翻转，那么硬币的位置为当前状态下反面棋子的位置的异或和。</li><li>为什么呢？因为 $y\oplus(x\oplus y)=x$，就做完了。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;概率&quot;&gt;&lt;a href=&quot;#概率&quot; class=&quot;headerlink&quot; title=&quot;概率&quot;&gt;&lt;/a&gt;概率&lt;/h3&gt;&lt;h4 id=&quot;problem-1&quot;&gt;&lt;a href=&quot;#problem-1&quot; class=&quot;headerlink&quot; title=&quot;problem</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>城市</title>
    <link href="http://hydd.cf/2020/09/24/sol_3/"/>
    <id>http://hydd.cf/2020/09/24/sol_3/</id>
    <published>2020-09-23T16:00:00.000Z</published>
    <updated>2020-10-01T04:55:53.258Z</updated>
    
    <content type="html"><![CDATA[<p>设答案乘 $n^i$ 后的值为 $ans_i$。则：</p><script type="math/tex; mode=display">\begin{align*}ans_i&=\sum_{i\texttt{次操作后得到的}\\\texttt{可重有序点集}S}\quad\quad\quad\sum_{\texttt{连通块}P}[S\texttt{中的点都在}P\texttt{中}]\\&=\sum_{\texttt{连通块}P}\sum_{i\texttt{次操作后得到的}\\\texttt{可重有序点集}S}\quad[S\texttt{中的点都在}P\texttt{中}]\\&=\sum_{\texttt{连通块}P}|P|^i\end{align*}</script><p>如果直接要求这个 $|P|^i$，要维护所有大小的连通块个数，而连通块大小可以达到 $O(n)$ 级别。</p><p>然后这里有个套路，将 $P^i$ 用斯特林数展开。展开公式：$x^k=\sum \limits_{i=1}^{x}S(k,i)C(x,i)i! $。（下界也可以从 $0$ 开始）</p><p>考虑证明：$x^k$ 可以理解为有 $x$ 个不同的盒子，把 $k$ 个不同的球放入盒子中的方案数，允许空盒。</p><p>现在把”允许空盒“转化成”不允许空盒“（所有盒子都至少放入一个球）</p><p>首先枚举非空的盒子个数，设为 $i$，那么存在 $k−i$ 个空盒。</p><p>选出这 $i$ 个不同的非空盒子有 $C(x,i)$ 种方案，将 $k$ 个不同的球放入 $i$ 个无序非空盒子有 $S(k,i)$ 种方案，现在这些盒子是有序的，再乘上 $i!$ 就是结果。</p><script type="math/tex; mode=display">\begin{align*}ans_i&=\sum_{\texttt{连通块}P}|P|^i\\&=\sum_{\texttt{连通块}P}\sum_{j=0}^iS(i,j)C(|P|,j)j!\\&=\sum_{j=0}^iS(i,j)j!\sum_{\texttt{连通块}P}C(|P|,j)\\\end{align*}</script><p>那么现在就要求 $\sum\limits_{\texttt{连通块}P}C(|P|,i),\forall 0\leqslant i\leqslant k$。</p><p><br/></p><p>考虑树形 $dp$，设 $dp[u][i]$ 表示以 $u$ 为根的所有连通块 $P$ 的 $C(|P|,i)$ 之和。</p><p>观察大小为 $a$ 的连通块和大小为 $b$ 的连通块合并后，现在的 $C(|P|,i)$ 的值和原来的值有什么关系，有$C(|a|+|b|,i)=\sum\limits_{j=0}^{|a|+|b|} C(|a|,j)C(|b|,|a|+|b|-j)$，可以直接背包合并（卷积），时间复杂度 $O(nk)$。</p><p><br/></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*********************************************************************</span></span><br><span class="line"><span class="comment"> * Source：zr09 - day2</span></span><br><span class="line"><span class="comment"> * Problem：city - T4</span></span><br><span class="line"><span class="comment"> * Author：hydd</span></span><br><span class="line"><span class="comment"> * Date：2020/9/22</span></span><br><span class="line"><span class="comment">*********************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="comment">//#define File(x) freopen(x&quot;.in&quot;,&quot;r&quot;,stdin);freopen(x&quot;.out&quot;,&quot;w&quot;,stdout)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">int</span> n,k,dp[<span class="number">200005</span>][<span class="number">105</span>],S[<span class="number">105</span>][<span class="number">105</span>],sz[<span class="number">200005</span>],f[<span class="number">200005</span>],tmp[<span class="number">200005</span>];</span><br><span class="line"><span class="keyword">int</span> edgenum,vet[<span class="number">400005</span>],Next[<span class="number">400005</span>],Head[<span class="number">200005</span>];</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">Getchar</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> now[<span class="number">1</span>&lt;&lt;<span class="number">20</span>],*S,*T;</span><br><span class="line"><span class="keyword">if</span> (T==S)&#123;</span><br><span class="line">T=(S=now)+fread(now,<span class="number">1</span>,<span class="number">1</span>&lt;&lt;<span class="number">20</span>,<span class="built_in">stdin</span>);</span><br><span class="line"><span class="keyword">if</span> (T==S) <span class="keyword">return</span> EOF;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> *S++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> ch=Getchar();</span><br><span class="line"><span class="keyword">while</span> (ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">if</span> (ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">-1</span>;</span><br><span class="line">ch=Getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (ch&lt;=<span class="string">&#x27;9&#x27;</span>&amp;&amp;ch&gt;=<span class="string">&#x27;0&#x27;</span>) x=x*<span class="number">10</span>+ch-<span class="string">&#x27;0&#x27;</span>,ch=Getchar();</span><br><span class="line"><span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll x,ll a)</span></span>&#123;</span><br><span class="line">ll res=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (a)&#123;</span><br><span class="line"><span class="keyword">if</span> (a&amp;<span class="number">1</span>) res=res*x%Mod;</span><br><span class="line">x=x*x%Mod; a&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">vet[++edgenum]=v;</span><br><span class="line">Next[edgenum]=Head[u];</span><br><span class="line">Head[u]=edgenum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa)</span></span>&#123;</span><br><span class="line">dp[u][<span class="number">0</span>]=<span class="number">1</span>; dp[u][<span class="number">1</span>]=<span class="number">1</span>; sz[u]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> e=Head[u];e;e=Next[e])</span><br><span class="line"><span class="keyword">if</span> (vet[e]!=fa)&#123;</span><br><span class="line">dfs(vet[e],u);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=k&amp;&amp;i&lt;=sz[u]+sz[vet[e]];i++) tmp[i]=dp[u][i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=k&amp;&amp;i&lt;=sz[u];i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;i+j&lt;=k&amp;&amp;j&lt;=sz[vet[e]];j++)</span><br><span class="line">tmp[i+j]=(tmp[i+j]+<span class="number">1l</span>l*dp[u][i]*dp[vet[e]][j])%Mod;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=k&amp;&amp;i&lt;=sz[u]+sz[vet[e]];i++) dp[u][i]=tmp[i];</span><br><span class="line">sz[u]+=sz[vet[e]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=k&amp;&amp;i&lt;=sz[u];i++) f[i]=(f[i]+dp[u][i])%Mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">freopen(<span class="string">&quot;city.in&quot;</span>,<span class="string">&quot;r&quot;</span>,<span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">&quot;city.out&quot;</span>,<span class="string">&quot;w&quot;</span>,<span class="built_in">stdout</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;k); <span class="keyword">int</span> u,v;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">u=read(); v=read();</span><br><span class="line">addedge(u,v); addedge(v,u);</span><br><span class="line">&#125;</span><br><span class="line">S[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=k;j++)</span><br><span class="line">S[i][j]=(S[i<span class="number">-1</span>][j<span class="number">-1</span>]+<span class="number">1l</span>l*S[i<span class="number">-1</span>][j]*j)%Mod;</span><br><span class="line">dfs(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">int</span> invn=qpow(n,Mod<span class="number">-2</span>),tmp=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>,mul=<span class="number">1</span>; tmp=<span class="number">1l</span>l*tmp*invn%Mod;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=i;j++)&#123;</span><br><span class="line">mul=<span class="number">1l</span>l*mul*j%Mod;</span><br><span class="line">ans=(ans+<span class="number">1l</span>l*mul*S[i][j]%Mod*f[j])%Mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,<span class="number">1l</span>l*ans*tmp%Mod);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;设答案乘 $n^i$ 后的值为 $ans_i$。则：&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;
\begin{align*}
ans_i&amp;=\sum_{i\texttt{次操作后得到的}\\\texttt{可重有序点集}S}\qu</summary>
      
    
    
    
    <category term="CSP-S模拟赛" scheme="http://hydd.cf/categories/CSP-S%E6%A8%A1%E6%8B%9F%E8%B5%9B/"/>
    
    
    <category term="树形dp" scheme="http://hydd.cf/tags/%E6%A0%91%E5%BD%A2dp/"/>
    
    <category term="概率/期望" scheme="http://hydd.cf/tags/%E6%A6%82%E7%8E%87-%E6%9C%9F%E6%9C%9B/"/>
    
    <category term="斯特林数" scheme="http://hydd.cf/tags/%E6%96%AF%E7%89%B9%E6%9E%97%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>ckw的树</title>
    <link href="http://hydd.cf/2020/09/24/sol_4/"/>
    <id>http://hydd.cf/2020/09/24/sol_4/</id>
    <published>2020-09-23T16:00:00.000Z</published>
    <updated>2020-10-01T04:55:45.440Z</updated>
    
    <content type="html"><![CDATA[<p>设 $f[u]$ 表示从 $u$ 开始游走的期望时间。不妨设 $f[u]=a_uf[fa(fa(u))]+b_uf[fa(u)]+c_usum[fa(u)]+d_u$。</p><p>不妨设 $fa(1)=0,fa(0)=0$，$f[0]=0$。设 $t_u$ 为与 $u$ 距离不超过 $2$ 的点的个数。</p><p>若它的子树中每个点的 $f[v]$ 都可以用 $a_v,b_v,c_v,d_v$ 表示出来，考虑怎么将 $f[u]$ 用 $a_u,b_u,c_u,d_u$ 表示出来。</p><p>根据题意，每次可以从 $u$ 到距离不超过 $2$ 的任意一个节点，记 $sum[u]=\sum\limits_{v\in son(u)}f[v]$，那么满足：</p><ul><li>$t_uf[u]=f[fa(fa(u))]+f[fa(u)]+sum[fa(u)]+sum[u]+\sum\limits_{v\in son(u)}sum[v]$（这个点不是标记点）</li><li>$f[u]=0$（这个点是标记点）</li></ul><p>若这个点是标记点，则 $a_u=0,b_u=0,c_u=0,d_u=0$，以下考虑不是标记点的情况。</p><p>我们发现这个 $sum[u]$ 和 $sum[v]$ 比较恶心，我们考虑把它拆开：</p><script type="math/tex; mode=display">\begin{align*}sum[u]&=\sum_{v\in son(u)} f[v]\\&=\sum_{v\in son(u)}(a_vf[fa(fa(v))]+b_vf[fa(v)]+c_vsum[fa(v)]+d_v)\\&=\sum_{v\in son(u)}(a_vf[fa(u)]+b_vf[u]+c_vsum[u]+d_v)\\&=\sum_{v\in son(u)}a_vf[fa(u)]+\sum_{v\in son(u)}b_vf[u]+\sum_{v\in son(u)}c_vsum[u]+\sum_{v\in son(u)}d_v\end{align*}</script><p>即 $sum_a=\sum\limits_{v\in son(u)}a_v,sum_b=\sum\limits_{v\in son(u)}b_v,sum_c=\sum\limits_{v\in son(u)}c_v,sum_d=\sum\limits_{v\in son(u)}d_v$。</p><p>则 $sum[u]=sum_a\cdot f[fa(u)]+sum_b\cdot f[u]+sum_c\cdot sum[u]+sum_d$。</p><p>移项： $(1-sum_c)\cdot sum[u]=sum_a\cdot f[fa(u)]+sum_b\cdot f[u]+sum_d$。</p><p>两边同除 $1-sum_c$ 可得：$sum[u]=\dfrac{sum_a\cdot f[fa(u)]+sum_b\cdot f[u]+sum_d}{1-sum_c}$</p><p>令 $sa[u]=\dfrac{sum_a}{1-sum_c},sb[u]=\dfrac{sum_b}{1-sum_c},sd[u]=\dfrac{sum_d}{1-sum_c}$。</p><p>那么：$sum[u]=sa[u]f[fa(u)]+sb[u]f[u]+sd[u]$。由于 $a_v,b_v,c_v,d_v$ 已知，那么 $sa[u],sb[u],sd[u]$ 已知，即可求出 $sum[u],sum[v]$ 的表达式。</p><p>先将 $sum[v]$ 拆开，代入 $f[u]$ 所满足的式子：<br>$t_uf[u]=f[fa(fa(u))]+f[fa(u)]+sum[fa(u)]+sum[u]+\sum\limits_{v\in son(u)}(sa[v]f[u]+sb[v]f[v]+sd[v])$</p><p>将和式拆分：$t_uf[u]=f[fa(fa(u))]+f[fa(u)]+sum[fa(u)]+sum[u]+f[u]\sum\limits_{v\in son(u)}sa[v]+\sum\limits_{v\in son(u)}sb[v]f[v]+\sum\limits_{v\in son(u)} sd[v]$</p><p>再将 $f[v]$ 拆开：$t_uf[u]=f[fa(fa(u))]+f[fa(u)]+sum[fa(u)]+sum[u]+f[u]\sum\limits_{v\in son(u)}sa[v]+\sum\limits_{v\in son(u)} sd[v]+\sum\limits_{v\in son(u)} sb[v]\cdot (a_vf[fa(u)]+b_vf[u]+c_vsum[u]+d_v)$</p><p>整理：$t_uf[u]=f[fa(fa(u))]+f[fa(u)]+sum[fa(u)]+sum[u]+f[u]\sum\limits_{v\in son(u)}sa[v]+\sum\limits_{v\in son(u)} sd[v]+\sum\limits_{v\in son(u)} sb[v]a_vf[fa(u)]+\sum\limits_{v\in son(u)}sb[v]b_vf[u]+\sum\limits_{v\in son(u)}sb[v]c_vsum[u]+\sum\limits_{v\in son(u)}sb[v]d_v$</p><p>移项：$f[fa(fa(u))]+(1+\sum\limits_{v\in son(u)} sb[v]a_v)f[fa(u)]+sum[fa(u)]+(\sum\limits_{v\in son(u)}sb[v]d_v+\sum\limits_{v\in son(u)} sd[v])+(\sum\limits_{v\in son(u)}sa[v]+\sum\limits_{v\in son(u)}sb[v]b_v-t_u)f[u]+(1+\sum\limits_{v\in son(u)}sb[v]c_v)sum[u]=0$</p><p>再将 $sum[u]$ 拆开：</p><p>$f[fa(fa(u))]+(1+\sum\limits_{v\in son(u)} sb[v]a_v)f[fa(u)]+sum[fa(u)]+(\sum\limits_{v\in son(u)}sb[v]d_v+\sum\limits_{v\in son(u)} sd[v])+(\sum\limits_{v\in son(u)}sa[v]+\sum\limits_{v\in son(u)}sb[v]b_v-t_u)f[u]+(1+\sum\limits_{v\in son(u)}sb[v]c_v)(sa[u]f[fa(u)]+sb[u]f[u]+sd[u])=0$</p><p>记 $su=(1+\sum\limits_{v\in son(u)}sb[v]c_v)$，可得：</p><p>$f[fa(fa(u))]+(1+(\sum\limits_{v\in son(u)} sb[v]a_v)+su\cdot sa[u])f[fa(u)]+sum[fa(u)]+((\sum\limits_{v\in son(u)}sa[v])+(\sum\limits_{v\in son(u)}sb[v]b_v)-t_u+su\cdot sb[u])f[u]+((\sum\limits_{v\in son(u)}sb[v]d_v)+(\sum\limits_{v\in son(u)} sd[v])+su\cdot sd[u])=0$</p><p>令 $c_1=t_u-(\sum\limits_{v\in son(u)}sa[v])-(\sum\limits_{v\in son(u)}sb[v]b_v)-su\cdot sb[u],c_2=1+(\sum\limits_{v\in son(u)} sb[v]a_v)+su\cdot sa[u],c_3=(\sum\limits_{v\in son(u)}sb[v]d_v)+(\sum\limits_{v\in son(u)} sd[v])+su\cdot sd[u]$</p><p>整理：$c_1f[u]=f[fa(fa(u))]+c_2f[fa(u)]+sum[fa(u)]+c_3$</p><p>两边同除 $c_1$：$f[u]=\frac{1}{c_1}f[fa(fa(u))]+\frac{c_2}{c_1}f[fa(u)]+\frac{1}{c_1}sum[fa(u)]+\frac{c_3}{c_1}$。</p><p>可得：$a_u=\frac{1}{c_1},b_u=\frac{c_2}{c_1},c_u=\frac{1}{c_1},d_u=\frac{c_3}{c_1}$。</p><p>至此可以求出所有点 $f$ 都可以用 $a,b,c,d$ 表达出来，同时也把所有点的 $sa,sb,sc,sd$ 也都求出来了。</p><p>$f[u]=a_uf[fa(fa(u))]+b_uf[fa(u)]+c_usum[fa(u)]+d_u$，那么可以将 $sum[fa(u)]$ 拆开，可得：</p><p>$f[u]=a_uf[fa(fa(u))]+b_uf[fa(u)]+c_u(sa[fa(u)]f[fa(fa(u))]+sb[fa(u)]f[fa(u)]+sd[fa(u)])+d_u$</p><p>整理：$f[u]=(a_u+c_usa[fa(u)])f[fa(fa(u))]+(b_u+c_usb[fa(u)])f[fa(u)]+(c_u\cdot sd[fa(u)]+d_u)$。</p><p>令 $f[u]=a’_uf[fa(fa(u))]+b’_uf[fa(u)]+d’_u$</p><p>则 $a’_u=a_u+c_usa[fa(u)],b’_u=b_u+c_usb[fa(u)],d’_u=c_u\cdot sd[fa(u)]+d_u$。</p><p>注意，这个地方 $f[1]$ 不能这样拆开，因为 $fa(1)=0,sa[0],sb[0],sd[0]$ 没有处理，而 $sum[0]=f[1]$，解一下：</p><p>$f[1]=c_1f[1]+d_1$，而 $(1-c_1)f[1]=d_1$，则 $f[1]=\frac{d_1}{1-c_1}$。所有点的 $f$ 值可以用一遍从上到下的 $dfs$ 求得。</p><p>这样这道题就做完了，不过注意若一个点是标记点也要处理 $sa,sb,sc,sd$，它们会在转移它的父亲的时候用到。</p><p>时间复杂度 $O(n)$，空间复杂度 $O(n)$。</p><p><br/></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*********************************************************************</span></span><br><span class="line"><span class="comment"> * Source：zr09 - day3</span></span><br><span class="line"><span class="comment"> * Problem：tree</span></span><br><span class="line"><span class="comment"> * Author：hydd</span></span><br><span class="line"><span class="comment"> * Date：2020/9/24</span></span><br><span class="line"><span class="comment">*********************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="comment">//#define File(x) freopen(x&quot;.in&quot;,&quot;r&quot;,stdin);freopen(x&quot;.out&quot;,&quot;w&quot;,stdout)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">int</span> n,m,tot[<span class="number">110000</span>],f[<span class="number">110000</span>]; <span class="keyword">bool</span> vis[<span class="number">110000</span>];</span><br><span class="line"><span class="keyword">int</span> sa[<span class="number">110000</span>],sb[<span class="number">110000</span>],sd[<span class="number">110000</span>];</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">110000</span>],b[<span class="number">110000</span>],c[<span class="number">110000</span>],d[<span class="number">110000</span>];</span><br><span class="line"><span class="keyword">int</span> edgenum,vet[<span class="number">210000</span>],Next[<span class="number">210000</span>],Head[<span class="number">110000</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> y)</span></span>&#123; x+=y; <span class="keyword">if</span> (x&gt;=Mod) x-=Mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">vet[++edgenum]=v;</span><br><span class="line">Next[edgenum]=Head[u];</span><br><span class="line">Head[u]=edgenum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">Getchar</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> now[<span class="number">1</span>&lt;&lt;<span class="number">20</span>],*S,*T;</span><br><span class="line"><span class="keyword">if</span> (T==S)&#123;</span><br><span class="line">T=(S=now)+fread(now,<span class="number">1</span>,<span class="number">1</span>&lt;&lt;<span class="number">20</span>,<span class="built_in">stdin</span>);</span><br><span class="line"><span class="keyword">if</span> (T==S) <span class="keyword">return</span> EOF;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> *S++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> ch=Getchar();</span><br><span class="line"><span class="keyword">while</span> (ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">if</span> (ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">-1</span>;</span><br><span class="line">ch=Getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (ch&lt;=<span class="string">&#x27;9&#x27;</span>&amp;&amp;ch&gt;=<span class="string">&#x27;0&#x27;</span>) x=x*<span class="number">10</span>+ch-<span class="string">&#x27;0&#x27;</span>,ch=Getchar();</span><br><span class="line"><span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll x,<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line">    ll res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (a)&#123;</span><br><span class="line">        <span class="keyword">if</span> (a&amp;<span class="number">1</span>) res=res*x%Mod;</span><br><span class="line">        x=x*x%Mod; a&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getinv</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123; <span class="keyword">return</span> qpow(x,Mod<span class="number">-2</span>);&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa)</span></span>&#123;</span><br><span class="line">tot[u]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> e=Head[u];e;e=Next[e])&#123;</span><br><span class="line"><span class="keyword">if</span> (vet[e]==fa) <span class="keyword">continue</span>;</span><br><span class="line">tot[u]++;</span><br><span class="line">dfs(vet[e],u);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dp</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa,<span class="keyword">int</span> fa_2)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> cnt=(fa?tot[fa]:<span class="number">1</span>)+(fa_2!=<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> e=Head[u];e;e=Next[e])&#123;</span><br><span class="line"><span class="keyword">if</span> (vet[e]==fa) <span class="keyword">continue</span>;</span><br><span class="line">cnt+=tot[vet[e]]; dp(vet[e],u,fa);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> fu=Mod-cnt,ffa=<span class="number">1</span>,ffafa=<span class="number">1</span>,sfa=<span class="number">1</span>,fc=cnt,su=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> e=Head[u];e;e=Next[e])&#123;</span><br><span class="line"><span class="keyword">if</span> (vet[e]==fa) <span class="keyword">continue</span>;</span><br><span class="line">add(fu,sa[vet[e]]); <span class="comment">//sb[vet[e]]*f[vet[e]];</span></span><br><span class="line">add(ffa,<span class="number">1l</span>l*a[vet[e]]*sb[vet[e]]%Mod);</span><br><span class="line">add(fu,<span class="number">1l</span>l*b[vet[e]]*sb[vet[e]]%Mod);</span><br><span class="line">add(su,<span class="number">1l</span>l*c[vet[e]]*sb[vet[e]]%Mod);</span><br><span class="line">add(fc,<span class="number">1l</span>l*d[vet[e]]*sb[vet[e]]%Mod);</span><br><span class="line">add(fc,sd[vet[e]]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> suma=<span class="number">0</span>,sumb=<span class="number">0</span>,sumc=<span class="number">0</span>,sumd=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> e=Head[u];e;e=Next[e])&#123;</span><br><span class="line"><span class="keyword">if</span> (vet[e]==fa) <span class="keyword">continue</span>;</span><br><span class="line">add(suma,a[vet[e]]); add(sumb,b[vet[e]]);</span><br><span class="line">add(sumc,c[vet[e]]); add(sumd,d[vet[e]]);</span><br><span class="line">&#125;</span><br><span class="line">ll inv=getinv(Mod+<span class="number">1</span>-sumc);</span><br><span class="line">sa[u]=inv*suma%Mod; sb[u]=inv*sumb%Mod; sd[u]=inv*sumd%Mod;</span><br><span class="line">add(ffa,<span class="number">1l</span>l*su*sa[u]%Mod);</span><br><span class="line">add(fu,<span class="number">1l</span>l*su*sb[u]%Mod);</span><br><span class="line">add(fc,<span class="number">1l</span>l*su*sd[u]%Mod);</span><br><span class="line">fu=(Mod-fu)%Mod; inv=getinv(fu);</span><br><span class="line">fu=inv*fu%Mod; ffa=inv*ffa%Mod; ffafa=inv*ffafa%Mod; sfa=inv*sfa%Mod; fc=inv*fc%Mod;</span><br><span class="line">a[u]=ffafa; b[u]=ffa; c[u]=sfa; d[u]=fc;</span><br><span class="line"><span class="keyword">if</span> (vis[u]) a[u]=<span class="number">0</span>,b[u]=<span class="number">0</span>,c[u]=<span class="number">0</span>,d[u]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> e=Head[u];e;e=Next[e])&#123;</span><br><span class="line"><span class="keyword">if</span> (vet[e]==fa) <span class="keyword">continue</span>;</span><br><span class="line">add(a[vet[e]],<span class="number">1l</span>l*c[vet[e]]*sa[u]%Mod);</span><br><span class="line">add(b[vet[e]],<span class="number">1l</span>l*c[vet[e]]*sb[u]%Mod);</span><br><span class="line">add(d[vet[e]],<span class="number">1l</span>l*c[vet[e]]*sd[u]%Mod);</span><br><span class="line">dfs2(vet[e],u);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getans</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> e=Head[u];e;e=Next[e])&#123;</span><br><span class="line"><span class="keyword">if</span> (vet[e]==fa) <span class="keyword">continue</span>;</span><br><span class="line">f[vet[e]]=(<span class="number">1l</span>l*a[vet[e]]*f[fa]+<span class="number">1l</span>l*b[vet[e]]*f[u]+d[vet[e]])%Mod;</span><br><span class="line">getans(vet[e],u);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">freopen(<span class="string">&quot;tree.in&quot;</span>,<span class="string">&quot;r&quot;</span>,<span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">&quot;tree.out&quot;</span>,<span class="string">&quot;w&quot;</span>,<span class="built_in">stdout</span>);</span><br><span class="line">n=read(); m=read(); <span class="keyword">int</span> u,v;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">u=read(); v=read();</span><br><span class="line">addedge(u,v); addedge(v,u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">x=read();</span><br><span class="line">vis[x]=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">dfs(<span class="number">1</span>,<span class="number">0</span>); dp(<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">dfs2(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">f[<span class="number">1</span>]=<span class="number">1l</span>l*getinv(Mod+<span class="number">1</span>-c[<span class="number">1</span>])*d[<span class="number">1</span>]%Mod;</span><br><span class="line">getans(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,f[i]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;设 $f[u]$ 表示从 $u$ 开始游走的期望时间。不妨设 $f[u]=a_uf[fa(fa(u))]+b_uf[fa(u)]+c_usum[fa(u)]+d_u$。&lt;/p&gt;
&lt;p&gt;不妨设 $fa(1)=0,fa(0)=0$，$f[0]=0$。设 $t_u$ 为与 $u$</summary>
      
    
    
    
    <category term="CSP-S模拟赛" scheme="http://hydd.cf/categories/CSP-S%E6%A8%A1%E6%8B%9F%E8%B5%9B/"/>
    
    
    <category term="树形dp" scheme="http://hydd.cf/tags/%E6%A0%91%E5%BD%A2dp/"/>
    
    <category term="概率/期望" scheme="http://hydd.cf/tags/%E6%A6%82%E7%8E%87-%E6%9C%9F%E6%9C%9B/"/>
    
  </entry>
  
  <entry>
    <title>20200924 模拟赛题解</title>
    <link href="http://hydd.cf/2020/09/24/sol_5/"/>
    <id>http://hydd.cf/2020/09/24/sol_5/</id>
    <published>2020-09-23T16:00:00.000Z</published>
    <updated>2020-10-01T04:56:41.888Z</updated>
    
    <content type="html"><![CDATA[<h2 id="number"><a href="#number" class="headerlink" title="number"></a>number</h2><script type="math/tex; mode=display">\begin{align*}ans&=\sum_{i=1}^n\sum_{j=i}^n\sum_{p\in \mathcal{P}} [p\mid\prod_{k=i}^ja_k]\\&=\sum_{p\in \mathcal{P}}\sum_{i=1}^n\sum_{j=i}^n [p\mid\prod_{k=i}^ja_k]\\&=\sum_{p\in \mathcal{P}}\sum_{i=1}^n\sum_{j=i}^n [(p\mid a_i) \lor (p\mid a_{i+1}) \lor (p\mid a_{i+2})\lor\cdots\lor(p\mid a_j)]\\&=\sum_{p\in \mathcal{P}}\sum_{i=1}^n\sum_{j=i}^n \sum_{k=i}^j[(p\nmid a_i) \land (p\nmid a_{i+1}) \land\cdots\land (p\nmid a_{k-1})\land (p\mid a_{k})]\\&=\sum_{p\in \mathcal{P}}\sum_{i=1}^n\sum_{k=i}^n \sum_{j=k}^n[(p\nmid a_i) \land (p\nmid a_{i+1}) \land\cdots\land (p\nmid a_{k-1})\land (p\mid a_{k})]\\&=\sum_{p\in \mathcal{P}}\sum_{i=1}^n\sum_{k=i}^n [(p\nmid a_i) \land (p\nmid a_{i+1}) \land\cdots\land (p\nmid a_{k-1})\land (p\mid a_{k})]\sum_{j=k}^n1\\&=\sum_{p\in \mathcal{P}}\sum_{i=1}^n\sum_{k=i}^n [(p\nmid a_i) \land (p\nmid a_{i+1}) \land\cdots\land (p\nmid a_{k-1})\land (p\mid a_{k})]\cdot (n-k+1)\\&=\sum_{p\in \mathcal{P}}\sum_{k=1}^n(\sum_{i=1}^k [(p\nmid a_i) \land (p\nmid a_{i+1}) \land\cdots\land (p\nmid a_{k-1})\land (p\mid a_{k})])\cdot (n-k+1)\\&=\sum_{k=1}^n\sum_{p\in \mathcal{P},p\mid a_k}(n-k+1)(\sum_{i=1}^k [(p\nmid a_i) \land (p\nmid a_{i+1}) \land\cdots\land (p\nmid a_{k-1})])\end{align*}</script><p>注意到，求出最大的 $j&lt;k$ 满足 $p\mid a_j$，那么上式 $\sum\limits_{i=1}^k [(p\nmid a_i) \land (p\nmid a_{i+1}) \land\cdots\land (p\nmid a_{k-1})]=k-j$</p><p>从左往右扫，对于每个 $p$ 记录满足条件的 $j$，就做完了。时间复杂度 $O(n \ln n)$。</p><p><br/></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*********************************************************************</span></span><br><span class="line"><span class="comment"> * Source：zr09 - day4</span></span><br><span class="line"><span class="comment"> * Problem：number</span></span><br><span class="line"><span class="comment"> * Author：hydd</span></span><br><span class="line"><span class="comment"> * Date：2020/9/24</span></span><br><span class="line"><span class="comment">*********************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="comment">//#define File(x) freopen(x&quot;.in&quot;,&quot;r&quot;,stdin);freopen(x&quot;.out&quot;,&quot;w&quot;,stdout)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">int</span> n,lst[<span class="number">1100000</span>],num[<span class="number">1100000</span>];</span><br><span class="line"><span class="keyword">int</span> cnt,prime[<span class="number">1100000</span>];</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">Getchar</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> now[<span class="number">1</span>&lt;&lt;<span class="number">20</span>],*S,*T;</span><br><span class="line"><span class="keyword">if</span> (T==S)&#123;</span><br><span class="line">T=(S=now)+fread(now,<span class="number">1</span>,<span class="number">1</span>&lt;&lt;<span class="number">20</span>,<span class="built_in">stdin</span>);</span><br><span class="line"><span class="keyword">if</span> (T==S) <span class="keyword">return</span> EOF;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> *S++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> ch=Getchar();</span><br><span class="line"><span class="keyword">while</span> (ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">if</span> (ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">-1</span>;</span><br><span class="line">ch=Getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (ch&lt;=<span class="string">&#x27;9&#x27;</span>&amp;&amp;ch&gt;=<span class="string">&#x27;0&#x27;</span>) x=x*<span class="number">10</span>+ch-<span class="string">&#x27;0&#x27;</span>,ch=Getchar();</span><br><span class="line"><span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span> (!lst[i])&#123;</span><br><span class="line">        lst[i]=i;</span><br><span class="line">        prime[++cnt]=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=cnt&amp;&amp;i*prime[j]&lt;=n;j++)&#123;</span><br><span class="line">        lst[i*prime[j]]=prime[j];</span><br><span class="line">        <span class="keyword">if</span> (i%prime[j]==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">freopen(<span class="string">&quot;number.in&quot;</span>,<span class="string">&quot;r&quot;</span>,<span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">&quot;number.out&quot;</span>,<span class="string">&quot;w&quot;</span>,<span class="built_in">stdout</span>);</span><br><span class="line">init(<span class="number">1000000</span>); n=read();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=<span class="number">1000000</span>;i++) num[i]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> x,y; ll ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">x=read(); y=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">while</span> (x!=<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">if</span> (y!=lst[x])&#123;</span><br><span class="line">ans+=<span class="number">1l</span>l*(i-num[lst[x]])*(n-i+<span class="number">1</span>);</span><br><span class="line">num[lst[x]]=i;</span><br><span class="line">&#125;</span><br><span class="line">y=lst[x]; x/=lst[x];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="seq"><a href="#seq" class="headerlink" title="seq"></a>seq</h2><p>这个数列是个一阶递推数列。</p><p>又因为每个值都在 $[0,m)$ 内（除了 $x_0$ 有可能为 $m$）。</p><p>所以我们可以通过倍增轻易求出 $x_0=k,\forall k\in[0,m]$ 时，$x_i,\forall i\in[0,t]$ 的值。</p><p>然后，我们考虑每个 $k$，对于所有的 $t_1+t_2=k$，可能的 $|t_1-t_2|$ 的值。</p><p>若 $k\leqslant m$</p><ul><li>若 $k$ 是偶数，可能为 $k,k-2,\cdots ,2,0,2,\cdots k-2,k$。即 $0,2,2,4,4,6,6,\cdots,k,k$。</li><li>若 $k$ 是奇数，可能为 $k,k-2,\cdots ,3,1,1,3,\cdots k-2,k$。即 $1,1,3,3,5,5,\cdots,k,k$。</li></ul><p>若 $m+1\leqslant k\leqslant 2m$</p><ul><li>若 $k$ 是偶数，可能为 $2m-k,2m-k-2,\cdots ,2,0,2,\cdots 2m-k-2,2m-k$。即 $0,2,2,4,4,6,6,\cdots,2m-k,2m-k$。</li><li>若 $k$ 是奇数，可能为 $2m-k,2m-k-2,\cdots ,3,1,1,3,\cdots 2m-k-2,2m-k$。即 $1,1,3,3,5,5,\cdots,2m-k,2m-k$。</li></ul><p>我们可以倍增记录 $x_0=a,\forall 0\leqslant l\leqslant m,x_0+x_2+x_4+\cdots,x_{2l}$。</p><p>那么偶数的答案可以轻松的算出，奇数的答案的话，先将 $x’_0$ 变为 $x_1$，再类似的做即可。</p><p>时间复杂度 $O(n\log n)$。</p><p><br/></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*********************************************************************</span></span><br><span class="line"><span class="comment"> * Source：zr09 - day4</span></span><br><span class="line"><span class="comment"> * Problem：seq</span></span><br><span class="line"><span class="comment"> * Author：hydd</span></span><br><span class="line"><span class="comment"> * Date：2020/9/24</span></span><br><span class="line"><span class="comment">*********************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="comment">//#define File(x) freopen(x&quot;.in&quot;,&quot;r&quot;,stdin);freopen(x&quot;.out&quot;,&quot;w&quot;,stdout)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> t,a,c,m,k,f[<span class="number">1100000</span>],fa[<span class="number">1100000</span>][<span class="number">21</span>],sum[<span class="number">1100000</span>][<span class="number">21</span>];</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">Getchar</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> now[<span class="number">1</span>&lt;&lt;<span class="number">20</span>],*S,*T;</span><br><span class="line"><span class="keyword">if</span> (T==S)&#123;</span><br><span class="line">T=(S=now)+fread(now,<span class="number">1</span>,<span class="number">1</span>&lt;&lt;<span class="number">20</span>,<span class="built_in">stdin</span>);</span><br><span class="line"><span class="keyword">if</span> (T==S) <span class="keyword">return</span> EOF;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> *S++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> ch=Getchar();</span><br><span class="line"><span class="keyword">while</span> (ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">if</span> (ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">-1</span>;</span><br><span class="line">ch=Getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (ch&lt;=<span class="string">&#x27;9&#x27;</span>&amp;&amp;ch&gt;=<span class="string">&#x27;0&#x27;</span>) x=x*<span class="number">10</span>+ch-<span class="string">&#x27;0&#x27;</span>,ch=Getchar();</span><br><span class="line"><span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getsum</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> d)</span></span>&#123;</span><br><span class="line">d++;</span><br><span class="line"><span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">20</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line"><span class="keyword">if</span> (d&amp;(<span class="number">1</span>&lt;&lt;i))&#123;</span><br><span class="line">res=(res+sum[x][i])%Mod;</span><br><span class="line">x=fa[x][i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">freopen(<span class="string">&quot;seq.in&quot;</span>,<span class="string">&quot;r&quot;</span>,<span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">&quot;seq.out&quot;</span>,<span class="string">&quot;w&quot;</span>,<span class="built_in">stdout</span>);</span><br><span class="line">t=read(); a=read(); c=read(); m=read(); k=read();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=m;i++) f[i]=(<span class="number">1l</span>l*a*i+c)%m;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=m;i++)&#123;</span><br><span class="line">fa[i][<span class="number">0</span>]=f[f[i]];</span><br><span class="line">sum[i][<span class="number">0</span>]=i%k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">20</span>;j++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=m;i++)&#123;</span><br><span class="line">fa[i][j]=fa[fa[i][j<span class="number">-1</span>]][j<span class="number">-1</span>];</span><br><span class="line">sum[i][j]=((sum[i][j<span class="number">-1</span>]+sum[fa[i][j<span class="number">-1</span>]][j<span class="number">-1</span>])%Mod)%Mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=t;i++)</span><br><span class="line"><span class="keyword">if</span> (i&amp;<span class="number">1</span>) ans=(ans+<span class="number">2l</span>l*getsum(f[i],(i<span class="number">-1</span>)/<span class="number">2</span>))%Mod;</span><br><span class="line"><span class="keyword">else</span> ans=(ans+<span class="number">2l</span>l*getsum(i,i/<span class="number">2</span>)-i%k)%Mod;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=t+<span class="number">1</span>;i&lt;=t+t;i++)</span><br><span class="line"><span class="keyword">if</span> (i&amp;<span class="number">1</span>) ans=(ans+<span class="number">2l</span>l*getsum(f[i],(<span class="number">2</span>*t-i<span class="number">-1</span>)/<span class="number">2</span>))%Mod;</span><br><span class="line"><span class="keyword">else</span> ans=(ans+<span class="number">2l</span>l*getsum(i,(<span class="number">2</span>*t-i)/<span class="number">2</span>)-i%k)%Mod;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="kth"><a href="#kth" class="headerlink" title="kth"></a>kth</h2><p>将相同的数也钦定一个大小关系，不妨设相同的情况下越靠后的数越大。</p><p>将数从大到小排序，求出当前数左边最靠右的 $k$ 个比它大的数和当前数右边靠左的 $k$ 个比它大的数。</p><p>这个可以用个链表串起来（直接 $set$ 暴力查是 $k\log n$ 的，链表的话少个 $\log$）然后求。</p><p>之后就随便求就好了，枚举左边有多少个比它大的即可。</p><p>时间复杂度 $O(n\log n+nk)$。</p><p><br/></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*********************************************************************</span></span><br><span class="line"><span class="comment"> * Source：zr09 - day4</span></span><br><span class="line"><span class="comment"> * Problem：kth</span></span><br><span class="line"><span class="comment"> * Author：hydd</span></span><br><span class="line"><span class="comment"> * Date：2020/9/24</span></span><br><span class="line"><span class="comment">*********************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="comment">//#define File(x) freopen(x&quot;.in&quot;,&quot;r&quot;,stdin);freopen(x&quot;.out&quot;,&quot;w&quot;,stdout)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">pair</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">int</span> n,k,a[<span class="number">210000</span>];</span><br><span class="line"><span class="keyword">int</span> num1[<span class="number">210000</span>],num2[<span class="number">210000</span>];</span><br><span class="line"><span class="keyword">int</span> nxt[<span class="number">210000</span>],lst[<span class="number">210000</span>];</span><br><span class="line">pii tmp[<span class="number">210000</span>]; <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">Getchar</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> now[<span class="number">1</span>&lt;&lt;<span class="number">20</span>],*S,*T;</span><br><span class="line"><span class="keyword">if</span> (T==S)&#123;</span><br><span class="line">T=(S=now)+fread(now,<span class="number">1</span>,<span class="number">1</span>&lt;&lt;<span class="number">20</span>,<span class="built_in">stdin</span>);</span><br><span class="line"><span class="keyword">if</span> (T==S) <span class="keyword">return</span> EOF;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> *S++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> ch=Getchar();</span><br><span class="line"><span class="keyword">while</span> (ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">if</span> (ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">-1</span>;</span><br><span class="line">ch=Getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (ch&lt;=<span class="string">&#x27;9&#x27;</span>&amp;&amp;ch&gt;=<span class="string">&#x27;0&#x27;</span>) x=x*<span class="number">10</span>+ch-<span class="string">&#x27;0&#x27;</span>,ch=Getchar();</span><br><span class="line"><span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">freopen(<span class="string">&quot;kth.in&quot;</span>,<span class="string">&quot;r&quot;</span>,<span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">&quot;kth.out&quot;</span>,<span class="string">&quot;w&quot;</span>,<span class="built_in">stdout</span>);</span><br><span class="line">n=read(); k=read();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n+<span class="number">1</span>;i++) nxt[i]=i,lst[i]=i;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) tmp[i].first=read(),tmp[i].second=i;</span><br><span class="line">sort(tmp+<span class="number">1</span>,tmp+n+<span class="number">1</span>,greater&lt;pii&gt;());</span><br><span class="line"></span><br><span class="line">s.insert(<span class="number">0</span>); s.insert(n+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> x,l,r,ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">x=tmp[i].second;</span><br><span class="line">l=*--s.lower_bound(x); r=*s.upper_bound(x); s.insert(x);</span><br><span class="line">nxt[l]=x; lst[x]=l; lst[r]=x; nxt[x]=r;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k+<span class="number">1</span>;i++) num1[i]=<span class="number">0</span>,num2[i]=n+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> cnt1=<span class="number">0</span>,cnt2=<span class="number">0</span>,now;</span><br><span class="line">now=x; <span class="keyword">while</span> (cnt1&lt;=k&amp;&amp;now)&#123; num1[++cnt1]=now; now=lst[now];&#125;</span><br><span class="line">now=nxt[x]; <span class="keyword">while</span> (cnt2&lt;=k&amp;&amp;now)&#123; num2[++cnt2]=now; now=nxt[now];&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> l=<span class="number">1</span>;l&lt;=k;l++)&#123;</span><br><span class="line"><span class="keyword">int</span> r=k-l+<span class="number">1</span>;</span><br><span class="line">ans=(ans+<span class="number">1l</span>l*(num1[l]-num1[l+<span class="number">1</span>])*(num2[r]-x)%Mod*tmp[i].first)%Mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//printf(&quot;%d\n&quot;,ans);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">6 2</span></span><br><span class="line"><span class="comment">96 29 71 28 91 64</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="subseq"><a href="#subseq" class="headerlink" title="subseq"></a>subseq</h2><p>一般子序列的 $dp$，就是 $dp[i][j]=\begin{cases}<br>   1+\sum\limits_k dp[i-1][k] &amp; j=s_i \\<br>   dp[i-1][j] &amp; j\neq s_i<br>\end{cases}$</p><p>现在要求 $\bmod 2$ 的值，那就是 $dp[i][j]=\begin{cases}<br>   1\oplus\bigoplus\limits_k dp[i-1][k] &amp; j=s_i \\<br>   dp[i-1][j] &amp; j\neq s_i<br>\end{cases}$</p><p>可以发现一些性质：</p><ol><li>若原来 $dp[i-1]$ 有奇数个 $1$，现在是一个 $dp[i-1][c]=0$ 的字符 $c$，那么 $dp[i-1][c]$ 没有任何变化。</li><li>若原来 $dp[i-1]$ 有奇数个 $1$，现在是一个 $dp[i-1][c]=1$ 的字符 $c$，那么 $dp[i-1][c]$ 变为了 $0$。</li><li>若原来 $dp[i-1]$ 有偶数个 $1$，现在是一个 $dp[i-1][c]=0$ 的字符 $c$，那么 $dp[i-1][c]$ 变为了 $1$。</li><li>若原来 $dp[i-1]$ 有偶数个 $1$，现在是一个 $dp[i-1][c]=1$ 的字符 $c$，那么 $dp[i-1][c]$ 没有任何变化。</li></ol><p>那么，我们会发现，$dp[i-1]$ 中只有一个字符 $c$ 满足 $dp[i][c]=1$，其余位置都为 $0$。不妨记录这个字符。</p><p>考虑加入一个字符 $s_i$：</p><ul><li>若 $c=\emptyset$，由性质 3.，$c’=s_i$。</li><li>若 $c=s_i$，由性质 2.，$c’=\emptyset$。</li><li>否则，由性质 1.，$c’=c$。</li></ul><p>由于我们要合并两个字符串，所有需要知道所有 $c$ 作为初始时，每个字符串最后会变成哪个 $c’$。</p><p>然后直接设 $dp[i][j]$ 表示已经选了状态为 $i$ 的字符串，现在的 $c=j$ 的方案数，直接转移即可。</p><p>时间复杂度 $O(2^nn|\Sigma|)$。</p><p><br/></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*********************************************************************</span></span><br><span class="line"><span class="comment"> * Source：zr09 - day4</span></span><br><span class="line"><span class="comment"> * Problem：subseq</span></span><br><span class="line"><span class="comment"> * Author：hydd</span></span><br><span class="line"><span class="comment"> * Date：2020/9/24</span></span><br><span class="line"><span class="comment">*********************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="comment">//#define File(x) freopen(x&quot;.in&quot;,&quot;r&quot;,stdin);freopen(x&quot;.out&quot;,&quot;w&quot;,stdout)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">int</span> n,trans[<span class="number">31</span>][<span class="number">31</span>];</span><br><span class="line">ll f[<span class="number">1100000</span>][<span class="number">31</span>];</span><br><span class="line"><span class="keyword">int</span> len,s[<span class="number">110000</span>];</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">Getchar</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> now[<span class="number">1</span>&lt;&lt;<span class="number">20</span>],*S,*T;</span><br><span class="line"><span class="keyword">if</span> (T==S)&#123;</span><br><span class="line">T=(S=now)+fread(now,<span class="number">1</span>,<span class="number">1</span>&lt;&lt;<span class="number">20</span>,<span class="built_in">stdin</span>);</span><br><span class="line"><span class="keyword">if</span> (T==S) <span class="keyword">return</span> EOF;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> *S++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> ch=Getchar();</span><br><span class="line"><span class="keyword">while</span> (ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">if</span> (ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">-1</span>;</span><br><span class="line">ch=Getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (ch&lt;=<span class="string">&#x27;9&#x27;</span>&amp;&amp;ch&gt;=<span class="string">&#x27;0&#x27;</span>) x=x*<span class="number">10</span>+ch-<span class="string">&#x27;0&#x27;</span>,ch=Getchar();</span><br><span class="line"><span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">readst</span><span class="params">()</span></span>&#123;</span><br><span class="line">len=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> ch=Getchar();</span><br><span class="line"><span class="keyword">while</span> (ch&lt;<span class="string">&#x27;a&#x27;</span>||ch&gt;<span class="string">&#x27;z&#x27;</span>) ch=Getchar();</span><br><span class="line"><span class="keyword">while</span> (ch&lt;=<span class="string">&#x27;z&#x27;</span>&amp;&amp;ch&gt;=<span class="string">&#x27;a&#x27;</span>) s[++len]=ch-<span class="string">&#x27;a&#x27;</span>,ch=Getchar();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">freopen(<span class="string">&quot;subseq.in&quot;</span>,<span class="string">&quot;r&quot;</span>,<span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">&quot;subseq.out&quot;</span>,<span class="string">&quot;w&quot;</span>,<span class="built_in">stdout</span>);</span><br><span class="line">n=read();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">readst();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> c=<span class="number">0</span>;c&lt;=<span class="number">26</span>;c++)&#123;</span><br><span class="line"><span class="keyword">int</span> now=c;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=len;j++)</span><br><span class="line"><span class="keyword">if</span> (now==<span class="number">26</span>) now=s[j];</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (now==s[j]) now=<span class="number">26</span>;</span><br><span class="line">trans[i][c]=now;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> upperlim=(<span class="number">1</span>&lt;&lt;n)<span class="number">-1</span>;</span><br><span class="line">f[<span class="number">0</span>][<span class="number">26</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;upperlim;i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line"><span class="keyword">if</span> (!(i&amp;(<span class="number">1</span>&lt;&lt;j)))</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> c=<span class="number">0</span>;c&lt;=<span class="number">26</span>;c++)</span><br><span class="line">f[i|(<span class="number">1</span>&lt;&lt;j)][trans[j][c]]+=f[i][c];</span><br><span class="line">ll ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> c=<span class="number">0</span>;c&lt;=<span class="number">25</span>;c++) ans+=f[upperlim][c];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;number&quot;&gt;&lt;a href=&quot;#number&quot; class=&quot;headerlink&quot; title=&quot;number&quot;&gt;&lt;/a&gt;number&lt;/h2&gt;&lt;script type=&quot;math/tex; mode=display&quot;&gt;
\begin{align*}
ans</summary>
      
    
    
    
    <category term="CSP-S模拟赛" scheme="http://hydd.cf/categories/CSP-S%E6%A8%A1%E6%8B%9F%E8%B5%9B/"/>
    
    
  </entry>
  
  <entry>
    <title>CF555E 题解</title>
    <link href="http://hydd.cf/2020/09/24/sol_6/"/>
    <id>http://hydd.cf/2020/09/24/sol_6/</id>
    <published>2020-09-23T16:00:00.000Z</published>
    <updated>2020-10-01T04:56:53.125Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定一个 $n$ 个点 $m$ 条边的无向图。有 $q$ 个人，第 $i$ 个人要从 $s_i$ 到 $t_i$。</p><p>现在你要给无向图的每条边定向。问是否存在一种定向方法使得所有人都能够到达目的地。</p><p>$n,m,q\leqslant 2\times 10^5,u_i\neq v_i,s_i\neq t_i$</p><ul><li>subtask1（1-8，20pts）：$n\leqslant 8,m\leqslant 15,q\leqslant 8$。</li><li>subtask2（11-13，10pts）：保证原图是一个菊花图，$m=n-1$。（即有且仅有一个点 $u$，它向其它所有点都有一条边）</li><li>subtask3（14-15，10pts）：保证图是一条链，$m=n-1$。</li><li>subtask4（16-20，30pts）：保证图是一棵树，$m=n-1$。（依赖subtask 2,3）</li><li>subtask5（20-30,9,10，30pts）：无特殊限制。（依赖subtask 1,2,3,4）</li></ul><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><h4 id="我的做法（186ms）"><a href="#我的做法（186ms）" class="headerlink" title="我的做法（186ms）"></a>我的做法（186ms）</h4><p>可以发现，对于一个边双来说，一定存在一种定向方法，使得边数内两两点之间均可到达。</p><p>所以一个边双相当于一个点。那么我们缩点，把图变成一颗树。这样，$s$ 到 $t$ 只能走树上简单路径。</p><p>我们把 $s\rightarrow LCA$ 的路径打向上的标记，把 $LCA\rightarrow t$ 的路径打向下的标记。$LCA$ 可以通过倍增预处理。</p><p>只要没有一条边同时有两种标记，就是合法的。打标记使用树上差分实现。</p><p>时间复杂度：$ O(n+m+q\log n)$。</p><p>有一些细节：</p><ol><li>原图不保证连通，所以在缩点，预处理倍增，判断答案的时候要在每个连通块都做一次。</li><li>原图可能有重边，所以 $\rm tarjan$ 的时候要记上一条边的编号而不是父亲节点。</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*********************************************************************</span></span><br><span class="line"><span class="comment"> * Source：互测</span></span><br><span class="line"><span class="comment"> * Problem：CF555E</span></span><br><span class="line"><span class="comment"> * Author：hydd</span></span><br><span class="line"><span class="comment"> * Date：2020/8/30 - 2020/8/31</span></span><br><span class="line"><span class="comment"> * Encoding：Simplified Chinese (GB2312)</span></span><br><span class="line"><span class="comment">*********************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="comment">//#define File(x) freopen(x&quot;.in&quot;,&quot;r&quot;,stdin);freopen(x&quot;.out&quot;,&quot;w&quot;,stdout)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">210000</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXM=<span class="number">410000</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,q,u[MAXN],v[MAXN];</span><br><span class="line"><span class="keyword">int</span> top,st[MAXN],fr[MAXN],dep[MAXN];</span><br><span class="line"><span class="keyword">int</span> cnt2,fa[MAXN][<span class="number">19</span>]; <span class="keyword">bool</span> vis[MAXN];</span><br><span class="line"><span class="keyword">int</span> cnt,num[MAXN],up[MAXN],dw[MAXN];</span><br><span class="line"><span class="keyword">int</span> dtime,dfn[MAXN],low[MAXN];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec[MAXN];</span><br><span class="line"><span class="keyword">int</span> edgenum=<span class="number">1</span>,vet[MAXM],Next[MAXM],Head[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">vet[++edgenum]=v;</span><br><span class="line">Next[edgenum]=Head[u];</span><br><span class="line">Head[u]=edgenum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">Getchar</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> now[<span class="number">1</span>&lt;&lt;<span class="number">20</span>],*S,*T;</span><br><span class="line"><span class="keyword">if</span> (T==S)&#123;</span><br><span class="line">T=(S=now)+fread(now,<span class="number">1</span>,<span class="number">1</span>&lt;&lt;<span class="number">20</span>,<span class="built_in">stdin</span>);</span><br><span class="line"><span class="keyword">if</span> (T==S) <span class="keyword">return</span> EOF;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> *S++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> ch=Getchar();</span><br><span class="line"><span class="keyword">while</span> (ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">if</span> (ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">-1</span>;</span><br><span class="line">ch=Getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (ch&lt;=<span class="string">&#x27;9&#x27;</span>&amp;&amp;ch&gt;=<span class="string">&#x27;0&#x27;</span>) x=x*<span class="number">10</span>+ch-<span class="string">&#x27;0&#x27;</span>,ch=Getchar();</span><br><span class="line"><span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> le)</span></span>&#123;<span class="comment">//2.</span></span><br><span class="line">dfn[u]=low[u]=++dtime;</span><br><span class="line">st[++top]=u; <span class="keyword">int</span> v;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> e=Head[u];e;e=Next[e])&#123;</span><br><span class="line">v=vet[e];</span><br><span class="line"><span class="keyword">if</span> (e==(le^<span class="number">1</span>)) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> (!dfn[v])&#123;</span><br><span class="line">tarjan(v,e);</span><br><span class="line">low[u]=min(low[u],low[v]);</span><br><span class="line">&#125; <span class="keyword">else</span> low[u]=min(low[u],dfn[v]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (dfn[u]==low[u])&#123;</span><br><span class="line">cnt++;</span><br><span class="line"><span class="keyword">while</span> (st[top]!=u)&#123; num[st[top]]=cnt; top--;&#125;</span><br><span class="line">num[st[top]]=cnt; top--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> f)</span></span>&#123;</span><br><span class="line">fr[u]=cnt2; dep[u]=dep[f]+<span class="number">1</span>; fa[u][<span class="number">0</span>]=f;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;(<span class="number">1</span>&lt;&lt;i)&lt;dep[u];i++) fa[u][i]=fa[fa[u][i<span class="number">-1</span>]][i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> v:vec[u])&#123;</span><br><span class="line"><span class="keyword">if</span> (v==f) <span class="keyword">continue</span>;</span><br><span class="line">dfs(v,u);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> f)</span></span>&#123;</span><br><span class="line">vis[u]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> v:vec[u])&#123;</span><br><span class="line"><span class="keyword">if</span> (v==f) <span class="keyword">continue</span>;</span><br><span class="line">dfs2(v,u);</span><br><span class="line">up[u]+=up[v]; dw[u]+=dw[v];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LCA</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (dep[x]&lt;dep[y]) swap(x,y);</span><br><span class="line"><span class="keyword">int</span> d=dep[x]-dep[y];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">18</span>;i++)</span><br><span class="line"><span class="keyword">if</span> (d&amp;(<span class="number">1</span>&lt;&lt;i)) x=fa[x][i];</span><br><span class="line"><span class="keyword">if</span> (x==y) <span class="keyword">return</span> x;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">18</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line"><span class="keyword">if</span> (fa[x][i]!=fa[y][i])&#123;</span><br><span class="line">x=fa[x][i];</span><br><span class="line">y=fa[y][i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> fa[x][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> s,t;</span><br><span class="line"><span class="keyword">while</span> (q--)&#123;</span><br><span class="line">s=read(); t=read();</span><br><span class="line">s=num[s]; t=num[t];</span><br><span class="line"><span class="keyword">if</span> (fr[s]!=fr[t]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">int</span> w=LCA(s,t);</span><br><span class="line">up[s]++; up[w]--;</span><br><span class="line">dw[t]++; dw[w]--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">if</span> (!vis[i]) dfs2(i,<span class="number">0</span>);<span class="comment">//1.</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)</span><br><span class="line"><span class="keyword">if</span> (up[i]&amp;&amp;dw[i]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">n=read(); m=read(); q=read();</span><br><span class="line">edgenum=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">u[i]=read(); v[i]=read();</span><br><span class="line">addedge(u[i],v[i]); addedge(v[i],u[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">if</span> (!dfn[i]) tarjan(i,<span class="number">0</span>);<span class="comment">//1.</span></span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">x=num[u[i]]; y=num[v[i]];</span><br><span class="line"><span class="keyword">if</span> (x==y) <span class="keyword">continue</span>;</span><br><span class="line">vec[x].push_back(y);</span><br><span class="line">vec[y].push_back(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)</span><br><span class="line"><span class="keyword">if</span> (!fr[i])&#123; cnt2++; dfs(i,<span class="number">0</span>);&#125;<span class="comment">//1.</span></span><br><span class="line"><span class="keyword">if</span> (check()) <span class="built_in">puts</span>(<span class="string">&quot;Yes&quot;</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">&quot;No&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="CodeForces-最快做法（124ms）"><a href="#CodeForces-最快做法（124ms）" class="headerlink" title="CodeForces 最快做法（124ms）"></a>CodeForces 最快做法（124ms）</h4><p>思路与前述相同。</p><p>使用了 $\rm tarjan$ 求 $LCA$，时间复杂度 $O(n+m+q)$。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 200002</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> E 400003</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Spush(x) (in[sk[++sp]=x]=true)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Spop() (in[sk[sp--]]=false)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Stop() (sk[sp])</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Dp (puts(<span class="meta-string">&quot;&quot;</span>))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Dw printf</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Df(i,s,t) for(int i=s;i&lt;=t;i++)</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span><span class="keyword">int</span> y,t;&#125;e[E];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Query</span>&#123;</span><span class="keyword">int</span> y,t,ans;&#125;Q[E];</span><br><span class="line"><span class="keyword">bool</span> in[N],used[N],done[N],vis[N],IsPos[N];</span><br><span class="line"><span class="keyword">char</span> ch;</span><br><span class="line"><span class="keyword">int</span> n,m,q,x[N],y[N],qx,qy,h[N],ep=<span class="number">1</span>,sk[N],sp,dfn[N],low[N],tm,color[N],cp,hq[N],qp=<span class="number">1</span>,f[N],djw,djf,djt,dep[N],fa[N],pos[N],neg[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span></span>&#123;x=<span class="number">0</span>;<span class="keyword">do</span>&#123;ch=getchar();&#125;<span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||<span class="string">&#x27;9&#x27;</span>&lt;ch);<span class="keyword">do</span>&#123;x=x*<span class="number">10</span>+ch-<span class="string">&#x27;0&#x27;</span>;ch=getchar();&#125;<span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">AddEdge</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp;x,<span class="keyword">const</span> <span class="keyword">int</span> &amp;y)</span></span>&#123;e[++ep].y=y;e[ep].t=h[x];h[x]=ep;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">AddQuery</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp;x,<span class="keyword">const</span> <span class="keyword">int</span> &amp;y)</span></span>&#123;Q[++qp].y=y;Q[qp].t=hq[x];hq[x]=qp;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">F</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">djw=x;<span class="keyword">while</span>(f[djw]!=djw)djw=f[djw];djf=djw;</span><br><span class="line">djw=x;<span class="keyword">while</span>(djw!=djf)&#123;djt=f[djw];f[djw]=djf;djw=djt;&#125;</span><br><span class="line"><span class="keyword">return</span> djf;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TarjanSCC</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">dfn[x]=low[x]=++tm;</span><br><span class="line">Spush(x);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=h[x];i;i=e[i].t)</span><br><span class="line"><span class="keyword">if</span>(!used[i&gt;&gt;<span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!dfn[e[i].y])</span><br><span class="line">&#123;</span><br><span class="line">used[i&gt;&gt;<span class="number">1</span>]=<span class="literal">true</span>;</span><br><span class="line">TarjanSCC(e[i].y);</span><br><span class="line">low[x]=min(low[x],low[e[i].y]);</span><br><span class="line">used[i&gt;&gt;<span class="number">1</span>]=<span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(in[e[i].y])low[x]=min(low[x],dfn[e[i].y]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(dfn[x]==low[x])</span><br><span class="line">&#123;</span><br><span class="line">color[x]=++cp;</span><br><span class="line"><span class="keyword">while</span>(Stop()!=x)</span><br><span class="line">&#123;</span><br><span class="line">color[Stop()]=cp;</span><br><span class="line">Spop();</span><br><span class="line">&#125;</span><br><span class="line">Spop();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TarjanLCA</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">done[x]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=h[x];i;i=e[i].t)</span><br><span class="line"><span class="keyword">if</span>(!done[e[i].y])TarjanLCA(e[i].y),f[e[i].y]=x;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=hq[x];i;i=Q[i].t)</span><br><span class="line"><span class="keyword">if</span>(done[Q[i].y])Q[i|<span class="number">1</span>].ans=F(Q[i].y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=h[x];i;i=e[i].t)</span><br><span class="line"><span class="keyword">if</span>(e[i].y!=fa[x])</span><br><span class="line">&#123;</span><br><span class="line">fa[e[i].y]=x;</span><br><span class="line">dep[e[i].y]=dep[x]+<span class="number">1</span>;</span><br><span class="line">dfs(e[i].y);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GetPosUp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vis[x]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=h[x];i;i=e[i].t)</span><br><span class="line"><span class="keyword">if</span>(!vis[e[i].y])</span><br><span class="line">&#123;</span><br><span class="line">GetPosUp(e[i].y);</span><br><span class="line">pos[x]=max(pos[x],pos[e[i].y]<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(pos[x])IsPos[x]=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GetNegUp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vis[x]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=h[x];i;i=e[i].t)</span><br><span class="line"><span class="keyword">if</span>(!vis[e[i].y])</span><br><span class="line">&#123;</span><br><span class="line">GetNegUp(e[i].y);</span><br><span class="line">neg[x]=max(neg[x],neg[e[i].y]<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(neg[x])<span class="keyword">if</span>(IsPos[x])&#123;<span class="built_in">puts</span>(<span class="string">&quot;No&quot;</span>);<span class="built_in">exit</span>(<span class="number">0</span>);&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">read(n),read(m),read(q);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)read(x[i]),read(y[i]),AddEdge(x[i],y[i]),AddEdge(y[i],x[i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="keyword">if</span>(!dfn[i])TarjanSCC(i);</span><br><span class="line"><span class="built_in">memset</span>(e,<span class="number">0</span>,<span class="keyword">sizeof</span>(e));</span><br><span class="line"><span class="built_in">memset</span>(h,<span class="number">0</span>,<span class="keyword">sizeof</span>(h));</span><br><span class="line">ep=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)<span class="keyword">if</span>(color[x[i]]!=color[y[i]])AddEdge(color[x[i]],color[y[i]]),AddEdge(color[y[i]],color[x[i]]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=q;i++)</span><br><span class="line">&#123;</span><br><span class="line">read(qx),read(qy);</span><br><span class="line"><span class="keyword">if</span>(color[qx]!=color[qy])AddQuery(color[qx],color[qy]),AddQuery(color[qy],color[qx]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cp;i++)f[i]=i;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cp;i++)<span class="keyword">if</span>(!done[i])TarjanLCA(i);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cp;i++)<span class="keyword">if</span>(!dep[i])dep[i]=<span class="number">1</span>,dfs(i);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=qp;i+=<span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">pos[Q[i|<span class="number">1</span>].y]=dep[Q[i|<span class="number">1</span>].y]-dep[Q[i|<span class="number">1</span>].ans];</span><br><span class="line">neg[Q[i].y]=dep[Q[i].y]-dep[Q[i|<span class="number">1</span>].ans];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="keyword">if</span>(!vis[i])GetPosUp(i);</span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="keyword">if</span>(!vis[i])GetNegUp(i);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;Yes&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h3&gt;&lt;p&gt;给定一个 $n$ 个点 $m$ 条边的无向图。有 $q$ 个人，第 $i$ 个人要从 $s_i$ 到 $t_i$。&lt;/p&gt;
&lt;p&gt;现在你要给</summary>
      
    
    
    
    <category term="Codeforces" scheme="http://hydd.cf/categories/Codeforces/"/>
    
    
    <category term="Tarjan" scheme="http://hydd.cf/tags/Tarjan/"/>
    
    <category term="树上差分" scheme="http://hydd.cf/tags/%E6%A0%91%E4%B8%8A%E5%B7%AE%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>20200825 day2题解</title>
    <link href="http://hydd.cf/2020/08/25/sol_9/"/>
    <id>http://hydd.cf/2020/08/25/sol_9/</id>
    <published>2020-08-24T16:00:00.000Z</published>
    <updated>2020-10-01T04:58:00.519Z</updated>
    
    <content type="html"><![CDATA[<h3 id="树状数组"><a href="#树状数组" class="headerlink" title="树状数组"></a>树状数组</h3><ul><li>考场 $AC$。</li><li>首先，对于一个点 $x$，它管辖的点数为 $lowbit(x)$，如下图：<img src="/pic4.png" alt=""></li><li>$1$ 管辖了 $[1,1]$，$2$ 管辖了 $[1,2]$，$3$ 管辖了 $[3,3]$，$4$ 管辖了 $[1,4]\cdots$。</li><li>首先先从 $S$ 个数中选出不同的 $m$ 个数，方案数为 $\binom Sm$，之后我们只考虑这 $m$ 个数。算这个可以直接 $\frac{(S-m+1)(S-m+2)\cdots S}{m!}$ 暴力 $O(m)$ 计算。</li></ul><ul><li>题目要求的是计数器上和值的和，不妨对每个点的贡献分开来考虑，下面我们计算点 $x$ 对答案的贡献。</li><li>记 $u=lowbit(x)$（即管辖的点数），那么贡献应为 $\sum\limits_{i=0}^m \binom mi\binom mi\times u^i (n-u)^{m-i}\times f(i)\times(m-i)!$</li><li>解释一下：枚举的 $i$ 表示有 $i$ 次操作在 $\rm mdf$ 时经过了 $x$。</li><li>在 $m$ 次操作中，选出一些操作，使得这几次操作经过了 $x$，其它操作不经过 $x$，所以有 $\binom mi$ 种方案。</li><li>在 $m$ 次操作中，选出 $i$ 次经过 $x$ 的操作使用的 $b_i$，所以有 $\binom mi$ 种方案。</li><li>选 $[x-u+1,x]$ 这些点中的任一点都会经过 $x$ ，所以有 $u$ 种方案，$i$ 次操作共有 $u^i$ 种方案。</li><li>同理，选除了 $[x-u+1,x]$ 这些点外的任一点都不会经过 $x$，所以有 $n-u$ 种方案，$m-i$ 次操作共有 $(n-u)^{m-i}$ 种方案。</li><li>$f(i)$ 表示所有长度为 $i$ 的排列，当前值为前缀最大值的位置数量之和，也就是 $x$ 点的贡献。</li><li>而剩下的 $(m-i)!$ 即为剩下的不经过 $x$ 的操作，它们的 $b_i$ 可以随便排列。</li></ul><ul><li>现在比较重要的是这个 $f(i)$ 怎么算，考虑递推。</li><li>如果现在知道了 $f(i-1)$，设它排列中的数均在 $[2,i]$ 之间。那么，我们在长度为 $i$ 的排列中任意的位置插入一个 $1$，那么它对其它位置的贡献没有影响，依旧为 $f(i-1)$，因为它是最小的数，而插入有 $i$ 种方案。</li><li>而 $1$ 本身有没有贡献呢？可以发现，只有 $1$ 在第一个位置才会有 $1$ 的贡献，在其它位置没有贡献。而 $1$ 在第一个位置有 $(n-1)!$ 种方案。</li><li>所以，$f(i)=i\times f(i-1)+(i-1)!$。</li><li>官方题解用的是第一类斯特林数 $n\brack m$ 表示将 $n$ 个数的序列划分为 $m$ 个圆排列的方案数，顺便提一句，第二类斯特林数 $n\brace m$ 表示将 $n$ 个数的序列划分为 $m$ 个非空集合的方案数。</li><li>$n$ 个数的排列，有 $m$ 个数满足这个数是前缀中最大的的方案数为 $n\brack m$。原因是把 $n$ 个数分成了 $m$ 段，每段中最大数一定在最前面，即每一段内的排列，只有相对位置不同，才算不同的排列，就是圆排列。而 $f(i)=\sum_{j=0}^i {i\brack j}\times j$，通过 ${n\brack m}={n-1 \brack m-1}+{n-1\brack m}\times (n-1)$ 也可推出相同的结果，这里不再赘述。</li></ul><ul><li>这样直接模拟的复杂度是 $O(nm)$，还是过不去。但是我们可以发现，它们的 $lowbit$ 只有 $\log n$ 种。</li><li>于是我们可以计算出 $lowbit(x)=2^i$ 的 $1\leqslant x\leqslant n$ 的个数一起计算。可以发现即为 $\lfloor \frac{\lfloor \frac n{2^i}\rfloor+1}2\rfloor$。（即要保证后 $i-1$ 位为 $0$，$i$ 位为 $1$）。</li><li>时间复杂度 $O(m\log n)$。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*********************************************************************</span></span><br><span class="line"><span class="comment"> * Source：FOI2020算法高级培训第2试</span></span><br><span class="line"><span class="comment"> * Problem：bit</span></span><br><span class="line"><span class="comment"> * Author：hydd</span></span><br><span class="line"><span class="comment"> * Date：2020/8/25</span></span><br><span class="line"><span class="comment"> * Encoding：Simplified Chinese (GB2312)</span></span><br><span class="line"><span class="comment">*********************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> File(x) freopen(x<span class="meta-string">&quot;.in&quot;</span>,<span class="meta-string">&quot;r&quot;</span>,stdin);freopen(x<span class="meta-string">&quot;.out&quot;</span>,<span class="meta-string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,S; ll ans,sum,s;</span><br><span class="line">ll fac[<span class="number">510000</span>],inv[<span class="number">510000</span>],num[<span class="number">510000</span>];</span><br><span class="line">ll p1[<span class="number">510000</span>],p2[<span class="number">510000</span>];</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">Getchar</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> now[<span class="number">1</span>&lt;&lt;<span class="number">20</span>],*S,*T;</span><br><span class="line"><span class="keyword">if</span> (T==S)&#123;</span><br><span class="line">T=(S=now)+fread(now,<span class="number">1</span>,<span class="number">1</span>&lt;&lt;<span class="number">20</span>,<span class="built_in">stdin</span>);</span><br><span class="line"><span class="keyword">if</span> (T==S) <span class="keyword">return</span> EOF;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> *S++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> ch=Getchar();</span><br><span class="line"><span class="keyword">while</span> (ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">if</span> (ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">-1</span>;</span><br><span class="line">ch=Getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (ch&lt;=<span class="string">&#x27;9&#x27;</span>&amp;&amp;ch&gt;=<span class="string">&#x27;0&#x27;</span>) x=x*<span class="number">10</span>+ch-<span class="string">&#x27;0&#x27;</span>,ch=Getchar();</span><br><span class="line"><span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">C</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n&lt;m) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> fac[n]*inv[m]%Mod*inv[n-m]%Mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">freopen(<span class="string">&quot;bit.in&quot;</span>,<span class="string">&quot;r&quot;</span>,<span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">&quot;bit.out&quot;</span>,<span class="string">&quot;w&quot;</span>,<span class="built_in">stdout</span>);</span><br><span class="line">n=read(); m=read(); S=read();</span><br><span class="line">fac[<span class="number">0</span>]=<span class="number">1</span>; <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) fac[i]=fac[i<span class="number">-1</span>]*i%Mod;</span><br><span class="line">inv[<span class="number">1</span>]=<span class="number">1</span>; <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=m;i++) inv[i]=(Mod-Mod/i)*inv[Mod%i]%Mod;</span><br><span class="line">inv[<span class="number">0</span>]=<span class="number">1</span>; <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) inv[i]=inv[i<span class="number">-1</span>]*inv[i]%Mod;</span><br><span class="line">num[<span class="number">0</span>]=<span class="number">0</span>; <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) num[i]=(num[i<span class="number">-1</span>]*i+fac[i<span class="number">-1</span>])%Mod;</span><br><span class="line">ans=inv[m]; sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=S-m+<span class="number">1</span>;i&lt;=S;i++) ans=ans*i%Mod;</span><br><span class="line"><span class="keyword">if</span> (!ans)&#123; <span class="built_in">puts</span>(<span class="string">&quot;0&quot;</span>); <span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line"><span class="keyword">int</span> u,tot;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;(<span class="number">1</span>&lt;&lt;i)&lt;=n;i++)&#123;<span class="comment">//lowbit(x)==2^i,1&lt;=x&lt;=n</span></span><br><span class="line">u=(<span class="number">1</span>&lt;&lt;i); tot=(((n&gt;&gt;i)+<span class="number">1</span>)&gt;&gt;<span class="number">1</span>); s=<span class="number">0</span>;<span class="comment">//tot_x</span></span><br><span class="line">p1[<span class="number">0</span>]=<span class="number">1</span>; <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++) p1[j]=p1[j<span class="number">-1</span>]*u%Mod;</span><br><span class="line">p2[<span class="number">0</span>]=<span class="number">1</span>; <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++) p2[j]=p2[j<span class="number">-1</span>]*(n-u)%Mod;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=m;j++) s=(s+p1[j]*p2[m-j]%Mod*num[j]%Mod*C(m,j)%Mod*C(m,j)%Mod*fac[m-j])%Mod;</span><br><span class="line">sum=(sum+s*tot)%Mod;</span><br><span class="line">&#125;</span><br><span class="line">ans=ans*sum%Mod;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="矩形计数"><a href="#矩形计数" class="headerlink" title="矩形计数"></a>矩形计数</h3><ul><li>考场上没有想到这种类似根号分治的做法，得了 $60pts$。</li><li>设 $blo=\sqrt n$。</li><li>按每列点的个数分类：第一种 $\leqslant blo$，第二种 $&gt;blo$。分情况考虑：</li></ul><ol><li>矩形左右两边的列都是第一类的方案数：<ul><li>对于所有第一类的列，将列中所有点两两横坐标组成的二元组的数量 $+1$。由于点都不同，所以同一列中不会有重复的二元组。</li><li>执行完之后，每个二元组的数量即有这个二元组的列的个数</li><li>然后看每个二元组的数量，若数量为 $u$，则对答案贡献 $\binom u2$。因为它们两两之间都可以组成矩形，$x_1,x_2$ 为二元组中的两个数，$y_1,y_2$ 为这两列的编号。</li><li>这个复杂度为 $\sum a_i^2$，满足 $\sum a_i\leqslant n，a_i\leqslant blo$。推导一下可以发现它不超过 $blo^2\times \frac n{blo}=n\times blo$。</li></ul></li><li>矩形左右两边的列至少有一种是第二类的方案数：<ul><li>枚举第二类的列，将列中所有横坐标的位置标记。标记后枚举其它所有列，对于某一列，看它有的横坐标有多少个被标记，若数量为 $u$，则对答案贡献 $\binom u2$。因为它们两两之间都可以组成矩形，$x_1,x_2$ 为 $u$ 中的两个数，$y_1,y_2$ 为这两列的编号。（注意，若两列都是第二类，则有可能算重，可以钦定两列的编号大小，比如只在编号大的列统计编号小的对它的贡献）</li><li>对于一个第二类的列，复杂度为 $O(n)$。（点数之和为 $n$）。而第二类的列最多有 $\frac n{blo}$ 个，复杂度为 $O(\frac{n^2}{blo})$。</li></ul></li></ol><ul><li>而 $blo=\sqrt n$，故时间复杂度为 $O(n\sqrt n)$。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*********************************************************************</span></span><br><span class="line"><span class="comment"> * Source：FOI2020算法高级培训第2试</span></span><br><span class="line"><span class="comment"> * Problem：rec</span></span><br><span class="line"><span class="comment"> * Author：hydd</span></span><br><span class="line"><span class="comment"> * Date：2020/8/25</span></span><br><span class="line"><span class="comment"> * Encoding：Simplified Chinese (GB2312)</span></span><br><span class="line"><span class="comment">*********************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> File(x) freopen(x<span class="meta-string">&quot;.in&quot;</span>,<span class="meta-string">&quot;r&quot;</span>,stdin);freopen(x<span class="meta-string">&quot;.out&quot;</span>,<span class="meta-string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">int</span> n,x[<span class="number">110000</span>],y[<span class="number">110000</span>],tmp[<span class="number">110000</span>],s[<span class="number">110000</span>];</span><br><span class="line"><span class="keyword">int</span> cnt1,a[<span class="number">110000</span>],cnt2,b[<span class="number">110000</span>]; ll ans;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec[<span class="number">110000</span>],num[<span class="number">110000</span>];</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">Getchar</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> now[<span class="number">1</span>&lt;&lt;<span class="number">20</span>],*S,*T;</span><br><span class="line"><span class="keyword">if</span> (T==S)&#123;</span><br><span class="line">T=(S=now)+fread(now,<span class="number">1</span>,<span class="number">1</span>&lt;&lt;<span class="number">20</span>,<span class="built_in">stdin</span>);</span><br><span class="line"><span class="keyword">if</span> (T==S) <span class="keyword">return</span> EOF;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> *S++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> ch=Getchar();</span><br><span class="line"><span class="keyword">while</span> (ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">if</span> (ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">-1</span>;</span><br><span class="line">ch=Getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (ch&lt;=<span class="string">&#x27;9&#x27;</span>&amp;&amp;ch&gt;=<span class="string">&#x27;0&#x27;</span>) x=x*<span class="number">10</span>+ch-<span class="string">&#x27;0&#x27;</span>,ch=Getchar();</span><br><span class="line"><span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">calc</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123; <span class="keyword">return</span> <span class="number">1l</span>l*x*(x<span class="number">-1</span>)/<span class="number">2</span>;&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">freopen(<span class="string">&quot;rec.in&quot;</span>,<span class="string">&quot;r&quot;</span>,<span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">&quot;rec.out&quot;</span>,<span class="string">&quot;w&quot;</span>,<span class="built_in">stdout</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n); <span class="keyword">int</span> blo=(<span class="keyword">int</span>)<span class="built_in">sqrt</span>(n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;x[i],&amp;y[i]);</span><br><span class="line">a[++cnt1]=x[i]; b[++cnt2]=y[i];</span><br><span class="line">&#125;</span><br><span class="line">sort(a+<span class="number">1</span>,a+cnt1+<span class="number">1</span>); cnt1=unique(a+<span class="number">1</span>,a+cnt1+<span class="number">1</span>)-a<span class="number">-1</span>;</span><br><span class="line">sort(b+<span class="number">1</span>,b+cnt2+<span class="number">1</span>); cnt2=unique(b+<span class="number">1</span>,b+cnt2+<span class="number">1</span>)-b<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">x[i]=lower_bound(a+<span class="number">1</span>,a+cnt1+<span class="number">1</span>,x[i])-a;</span><br><span class="line">y[i]=lower_bound(b+<span class="number">1</span>,b+cnt2+<span class="number">1</span>,y[i])-b;</span><br><span class="line">vec[x[i]].push_back(y[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt1;i++) sort(vec[i].begin(),vec[i].end());</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt1;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> len=vec[i].size();</span><br><span class="line"><span class="keyword">if</span> (len&gt;blo) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> a=<span class="number">0</span>;a&lt;len;a++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> b=a+<span class="number">1</span>;b&lt;len;b++)</span><br><span class="line">num[vec[i][a]].push_back(vec[i][b]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt2;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> len=num[i].size(),cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;len;j++)&#123;</span><br><span class="line"><span class="keyword">if</span> (!tmp[num[i][j]]) s[++cnt]=num[i][j];</span><br><span class="line">tmp[num[i][j]]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)&#123;</span><br><span class="line">ans+=calc(tmp[s[i]]);</span><br><span class="line">tmp[s[i]]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt1;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> len=vec[i].size();</span><br><span class="line"><span class="keyword">if</span> (len&lt;=blo) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;len;j++) tmp[vec[i][j]]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> a=<span class="number">1</span>;a&lt;=cnt1;a++)&#123;</span><br><span class="line"><span class="keyword">int</span> len2=vec[a].size();</span><br><span class="line"><span class="keyword">if</span> (len2&gt;blo&amp;&amp;i&lt;=a) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">int</span> tot=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> b=<span class="number">0</span>;b&lt;len2;b++)</span><br><span class="line"><span class="keyword">if</span> (tmp[vec[a][b]]) tot++;</span><br><span class="line">ans+=calc(tot);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;len;j++) tmp[vec[i][j]]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分果汁"><a href="#分果汁" class="headerlink" title="分果汁"></a>分果汁</h3><ul><li>考场上没有想到合并 $k$，得了 $60pts$。</li><li>首先要证明几个定理：</li><li>定理一：$n(n&gt;1)$ 种果汁必能分入 $n-1$ 个瓶子。<ul><li>这个类似于 $NOI2020$ 制作菜品。设 $sum$ 为总体积，$k$  为每个瓶子的容积。有以下关系：$k=\frac{sum}{n-1}$。</li><li>每次选择体积最小的和体积最大的果汁，它们之和必定 $&gt;k$（如果 $\leqslant k$，那么剩下的果汁的体积也必定 $&lt;k$，所以总体积 $&lt; k+(n-2)k=(n-1)k=sum$，矛盾）。</li><li>那么必定有剩余，将剩余的当做一种新的果汁，即变成了 $n-1$ 种果汁分入 $n-2$ 个瓶子。</li><li>而 $2$ 种果汁必能分入 $1$ 个瓶子，归纳得证。</li></ul></li><li>定理二：$m=n−p(p\geqslant 1)$ 的问题有解当且仅当能划分为 $p$ 个 $m=n−1$ 的问题<ul><li>考虑建图，把果汁看成点，将放入同一个瓶子的果汁连边。</li><li>$n$ 个点，$\leqslant n-p$ 条边，必定存在一个连通块满足 边数$=$点数$-1$。（否则所有连通块边数 $\geqslant$ 点数，那么总边数$\geqslant$总点数，即 $n-p\geqslant n(p\geqslant 1)$，矛盾。将这个连通块删去，变为 $m’=n’-(p-1)$ 的问题。</li><li>当 $p=1$ 时显然成立，归纳得证。</li></ul></li><li>记 $f_(S,j)$ 为果汁集合为 $S$，分成了 $j$ 个 $m=n-1$ 的子问题，用一个长度为 $n$ 的 $01$ 串表示（$n$ 个位置代表的是不同的 $k$）。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*********************************************************************</span></span><br><span class="line"><span class="comment"> * Source：FOI2020算法高级培训第2试</span></span><br><span class="line"><span class="comment"> * Problem：juice</span></span><br><span class="line"><span class="comment"> * Author：hydd</span></span><br><span class="line"><span class="comment"> * Date：2020/8/25</span></span><br><span class="line"><span class="comment"> * Encoding：Simplified Chinese (GB2312)</span></span><br><span class="line"><span class="comment">*********************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> File(x) freopen(x<span class="meta-string">&quot;.in&quot;</span>,<span class="meta-string">&quot;r&quot;</span>,stdin);freopen(x<span class="meta-string">&quot;.out&quot;</span>,<span class="meta-string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">int</span> n,a[<span class="number">22</span>],f[<span class="number">1100000</span>],ans;</span><br><span class="line">ll sum[<span class="number">1100000</span>],tot[<span class="number">1100000</span>];</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">Getchar</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> now[<span class="number">1</span>&lt;&lt;<span class="number">20</span>],*S,*T;</span><br><span class="line"><span class="keyword">if</span> (T==S)&#123;</span><br><span class="line">T=(S=now)+fread(now,<span class="number">1</span>,<span class="number">1</span>&lt;&lt;<span class="number">20</span>,<span class="built_in">stdin</span>);</span><br><span class="line"><span class="keyword">if</span> (T==S) <span class="keyword">return</span> EOF;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> *S++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> ch=Getchar();</span><br><span class="line"><span class="keyword">while</span> (ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">if</span> (ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">-1</span>;</span><br><span class="line">ch=Getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (ch&lt;=<span class="string">&#x27;9&#x27;</span>&amp;&amp;ch&gt;=<span class="string">&#x27;0&#x27;</span>) x=x*<span class="number">10</span>+ch-<span class="string">&#x27;0&#x27;</span>,ch=Getchar();</span><br><span class="line"><span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">freopen(<span class="string">&quot;juice.in&quot;</span>,<span class="string">&quot;r&quot;</span>,<span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">&quot;juice.out&quot;</span>,<span class="string">&quot;w&quot;</span>,<span class="built_in">stdout</span>);</span><br><span class="line">n=read(); ans=n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) a[i]=read();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">1</span>&lt;&lt;n;i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line"><span class="keyword">if</span> (i&amp;(<span class="number">1</span>&lt;&lt;j))&#123;</span><br><span class="line">tot[i]++;</span><br><span class="line">sum[i]+=a[j];</span><br><span class="line">&#125;</span><br><span class="line">f[<span class="number">0</span>]=(<span class="number">1</span>&lt;&lt;(n+<span class="number">1</span>))<span class="number">-1</span>; <span class="keyword">int</span> upperlim=(<span class="number">1</span>&lt;&lt;n)<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> now=<span class="number">1</span>;now&lt;n;now++)&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=upperlim;j++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;n;k++) f[j|(<span class="number">1</span>&lt;&lt;k)]|=f[j];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=upperlim;i++)&#123;<span class="comment">//K=sum[(1&lt;&lt;n)-1]/m,sum[i]==(tot[i]-now)*K  ===&gt; m=p/q 要分出n-m个，答案为m</span></span><br><span class="line">ll p=sum[(<span class="number">1</span>&lt;&lt;n)<span class="number">-1</span>]*(tot[i]-now),q=sum[i];</span><br><span class="line"><span class="keyword">if</span> (i&amp;&amp;p&gt;<span class="number">0</span>&amp;&amp;p%q==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">int</span> x=max(n-p/q,<span class="number">0l</span>l);</span><br><span class="line">f[i]&amp;=(<span class="number">1</span>&lt;&lt;x);<span class="comment">//原来符合条件，并且现在也符合条件才行，否则不行。</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> f[i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (f[(<span class="number">1</span>&lt;&lt;n)<span class="number">-1</span>]&amp;(<span class="number">1</span>&lt;&lt;now)) ans=n-now;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;树状数组&quot;&gt;&lt;a href=&quot;#树状数组&quot; class=&quot;headerlink&quot; title=&quot;树状数组&quot;&gt;&lt;/a&gt;树状数组&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;考场 $AC$。&lt;/li&gt;
&lt;li&gt;首先，对于一个点 $x$，它管辖的点数为 $lowbit(x)$，如下图：&lt;</summary>
      
    
    
    
    <category term="FOI2020高级培训" scheme="http://hydd.cf/categories/FOI2020%E9%AB%98%E7%BA%A7%E5%9F%B9%E8%AE%AD/"/>
    
    
  </entry>
  
  <entry>
    <title>僵尸 题解</title>
    <link href="http://hydd.cf/2020/08/23/sol_1/"/>
    <id>http://hydd.cf/2020/08/23/sol_1/</id>
    <published>2020-08-22T16:00:00.000Z</published>
    <updated>2020-10-01T04:55:34.576Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h3><blockquote><p>给定一棵 $n$ 个点的无根树，每条边有一堵墙，高度在 $[l_i,r_i]$ 等概率出现。</p><p>有 $m$ 个僵尸，第 $i$ 只僵尸初始出生在 $x_i$ 点，能力值为 $h_i$，表示可以走过墙的高度 $&lt;h_i$ 的边。</p><p>称一个点是安全的，当且仅当它不能被任何一个僵尸走到。</p><p>求树上至少有一个点是安全的概率，对 $998244353$ 取模，有 $T$ 组数据。</p><p>$T\leqslant 5,1\leqslant n,m\leqslant 2000,1\leqslant x_i\leqslant n,1\leqslant l_i,r_i,h_i\leqslant 10^9$，保证 $r_i-l_i+1\neq 998244353$。</p><p>$\texttt{source:[Nowcoder2018 ACM多校第十场 I] Rikka with Zombies}$。</p></blockquote><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>先说说考场的思路：</p><ul><li>首先，因为所有高度都是等概率的，所以可以用 $p=\frac{\texttt{至少有一个点是安全的方案数}}{\texttt{总方案数}}$ 得到答案，而 $1-p=\frac{\texttt{所有点都不安全的方案数}}{\texttt{总方案数}}$，所以我们可以算所有点都不安全的方案数。</li><li>这个东西并不容易直接算，而这种树上计数问题一般考虑树形 $dp$。</li><li>所以，我当时设的是 $dp[u][i]$ 表示以 $u$ 为根，$u$ 子树内的所有点都是不安全的，且 $u$ 子树内能走到 $u$ 的能力值最大的僵尸编号。然后我们会发现，$u$ 子树内的一些点可能可以从子树外的僵尸走到，所以就不行了。</li></ul><p>正解：</p><ul><li>一般的树形 $dp$ 是只考虑子树内的，但是这题是要考虑子树外的。</li><li>设的是 $dp[u][i]$ 表示以 $u$ 为根，$u$ 子树内的所有点都是不安全的，子树外皆有可能，且能走到 $u$ 的能力值最大的僵尸编号（可以在子树外）。</li><li>考虑 $f[v][b]$ 对 $f[u][a]$ 的贡献， $v$ 是 $u$ 的一个孩子。</li><li>若 $a=b$，不论 $a$ 在 $v$ 子树内还是子树外，都必须能跨过 $(u,v)$。那么 $f[u][a]+=f[u][a]\times f[v][b]\times(a\texttt{能跨过}(u,v)\texttt{的方案数})$。</li><li>若 $a\neq b$，那么 $a,b$ 必定不同时在 $v$ 子树内或 $v$ 子树外，且它们两者能力值较大的必定不能跨过 $(u,v)$。</li><li>具体来说，若 $a &lt; b$，且 $a$ 在子树 $v$ 外，$b$ 在子树 $v$ 内，那么 $f[u][a]+=f[u][a]\times f[v][b]\times(b\texttt{不能跨过}(u,v)\texttt{的方案数})$。若 $a &gt; b$，且 $a$ 在子树 $v$ 外，$b$ 在子树 $v$ 内，那么 $f[u][a]+=f[u][a]\times f[v][b]\times(a\texttt{不能跨过}(u,v)\texttt{的方案数})$。</li><li>初值怎么设呢？设 $u$ 点出生的能力值最大的僵尸为 $k$（没有则为 $1$）， 则对于所有 $i\geqslant k$，$f[u][i]=1$。</li><li>但是，如果 $x[a]..u$ 之间的最小的 $l$ 都 $\geqslant h_a$ 的话，那贡献应该为 $0$，那它在 $dp$ 中会不会有贡献？</li><li>而在它们两个的 $LCA$ 的时候，贡献必定已经消失了，因为必定有一条边不能跨过，贡献是乘起来的，所以就是 $0$。也就是，它在 $LCA$ 的时候才能保证 $dp$ 值是正确的，在其他位置有可能是错误的，比较奇怪。显然的是， $f[1]$ 的值是对的，答案显然是 $\sum_i f[1][i]$。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*********************************************************************</span></span><br><span class="line"><span class="comment"> * Source：CSP-S模拟赛</span></span><br><span class="line"><span class="comment"> * Problem：zombie</span></span><br><span class="line"><span class="comment"> * Author：hydd</span></span><br><span class="line"><span class="comment"> * Date：2020/8/21</span></span><br><span class="line"><span class="comment"> * Encoding：Simplified Chinese (GB2312)</span></span><br><span class="line"><span class="comment">*********************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">2100</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXE=<span class="number">4100</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">int</span> T,n,m,l[MAXN],r[MAXN],f[MAXN][MAXN],tmp[MAXN];</span><br><span class="line"><span class="keyword">int</span> edgenum,vet[MAXE],Next[MAXE],Head[MAXN];</span><br><span class="line"><span class="built_in">bitset</span>&lt;MAXN&gt; vis[MAXN];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> x,v;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> node &amp;a) <span class="keyword">const</span>&#123; <span class="keyword">return</span> v&lt;a.v;&#125;</span><br><span class="line">&#125; a[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getnum</span><span class="params">(<span class="keyword">int</span> t,<span class="keyword">int</span> v)</span></span>&#123; <span class="keyword">return</span> max(<span class="number">0</span>,min(v<span class="number">-1</span>,r[t])-l[t]+<span class="number">1</span>);&#125;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">Getchar</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> now[<span class="number">1</span>&lt;&lt;<span class="number">20</span>],*S,*T;</span><br><span class="line"><span class="keyword">if</span> (T==S)&#123;</span><br><span class="line">T=(S=now)+fread(now,<span class="number">1</span>,<span class="number">1</span>&lt;&lt;<span class="number">20</span>,<span class="built_in">stdin</span>);</span><br><span class="line"><span class="keyword">if</span> (T==S) <span class="keyword">return</span> EOF;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> *S++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> ch=Getchar();</span><br><span class="line"><span class="keyword">while</span> (ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">if</span> (ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">-1</span>;</span><br><span class="line">ch=Getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (ch&lt;=<span class="string">&#x27;9&#x27;</span>&amp;&amp;ch&gt;=<span class="string">&#x27;0&#x27;</span>) x=x*<span class="number">10</span>+ch-<span class="string">&#x27;0&#x27;</span>,ch=Getchar();</span><br><span class="line"><span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll x,<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line">ll res=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (a)&#123;</span><br><span class="line"><span class="keyword">if</span> (a&amp;<span class="number">1</span>) res=res*x%Mod;</span><br><span class="line">x=x*x%Mod; a&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">vet[++edgenum]=v;</span><br><span class="line">Next[edgenum]=Head[u];</span><br><span class="line">Head[u]=edgenum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> pos=<span class="number">1</span>,v,sum;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line"><span class="keyword">if</span> (a[i].x==u) vis[u][i]=<span class="number">1</span>,pos=i;</span><br><span class="line"><span class="keyword">else</span> vis[u][i]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> e=Head[u];e;e=Next[e])&#123;</span><br><span class="line">v=vet[e]; <span class="keyword">if</span> (v==fa) <span class="keyword">continue</span>;</span><br><span class="line">dfs(v,u); vis[u]|=vis[v];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) f[u][i]=(i&gt;=pos);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> e=Head[u];e;e=Next[e])&#123;</span><br><span class="line">v=vet[e]; <span class="keyword">if</span> (v==fa) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">int</span> t=e&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) tmp[i]=f[u][i],f[u][i]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;<span class="comment">//i=j</span></span><br><span class="line"><span class="keyword">int</span> k=getnum(t,a[i].v);</span><br><span class="line">f[u][i]=(f[u][i]+<span class="number">1l</span>l*tmp[i]*f[v][i]%Mod*k)%Mod;</span><br><span class="line">&#125;</span><br><span class="line">sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;<span class="comment">//i&gt;j，i在子树外，j在子树内</span></span><br><span class="line"><span class="keyword">int</span> k=getnum(t,a[i].v);</span><br><span class="line"><span class="keyword">if</span> (vis[v][i]) sum=(sum+f[v][i])%Mod;<span class="comment">//在子树内，记录前缀和</span></span><br><span class="line"><span class="keyword">else</span> f[u][i]=(f[u][i]+<span class="number">1l</span>l*tmp[i]*sum%Mod*(r[t]-l[t]+<span class="number">1</span>-k))%Mod;</span><br><span class="line">&#125;</span><br><span class="line">sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=m;i&gt;=<span class="number">1</span>;i--)&#123;<span class="comment">//i&lt;j，i在子树外，j在子树内</span></span><br><span class="line"><span class="keyword">int</span> k=getnum(t,a[i].v);</span><br><span class="line"><span class="keyword">if</span> (vis[v][i]) sum=(sum+<span class="number">1l</span>l*f[v][i]*(r[t]-l[t]+<span class="number">1</span>-k))%Mod;<span class="comment">//在子树内，记录前缀和</span></span><br><span class="line"><span class="keyword">else</span> f[u][i]=(f[u][i]+<span class="number">1l</span>l*tmp[i]*sum)%Mod;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">freopen(<span class="string">&quot;zombie.in&quot;</span>,<span class="string">&quot;r&quot;</span>,<span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">&quot;zombie.out&quot;</span>,<span class="string">&quot;w&quot;</span>,<span class="built_in">stdout</span>);</span><br><span class="line">T=read();</span><br><span class="line"><span class="keyword">while</span> (T--)&#123;</span><br><span class="line">n=read(); m=read(); <span class="keyword">int</span> ans=<span class="number">0</span>,ans2=<span class="number">1</span>;</span><br><span class="line">edgenum=<span class="number">1</span>; <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) Head[i]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> u,v;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">u=read(); v=read();</span><br><span class="line">l[i]=read(); r[i]=read();</span><br><span class="line">ans2=<span class="number">1l</span>l*ans2*(r[i]-l[i]+<span class="number">1</span>)%Mod;</span><br><span class="line">addedge(u,v); addedge(v,u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) a[i].x=read(),a[i].v=read();</span><br><span class="line">sort(a+<span class="number">1</span>,a+m+<span class="number">1</span>); dfs(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) ans=(ans+f[<span class="number">1</span>][i])%Mod;</span><br><span class="line">ans=<span class="number">1l</span>l*ans*qpow(ans2,Mod<span class="number">-2</span>)%Mod;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,(Mod+<span class="number">1</span>-ans)%Mod);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;题目大意&quot;&gt;&lt;a href=&quot;#题目大意&quot; class=&quot;headerlink&quot; title=&quot;题目大意&quot;&gt;&lt;/a&gt;题目大意&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;给定一棵 $n$ 个点的无根树，每条边有一堵墙，高度在 $[l_i,r_i]$ 等概率出现。&lt;/p</summary>
      
    
    
    
    <category term="CSP-S模拟赛" scheme="http://hydd.cf/categories/CSP-S%E6%A8%A1%E6%8B%9F%E8%B5%9B/"/>
    
    
    <category term="树形dp" scheme="http://hydd.cf/tags/%E6%A0%91%E5%BD%A2dp/"/>
    
    <category term="概率/期望" scheme="http://hydd.cf/tags/%E6%A6%82%E7%8E%87-%E6%9C%9F%E6%9C%9B/"/>
    
  </entry>
  
  <entry>
    <title>NOI2020网络同步赛 总结</title>
    <link href="http://hydd.cf/2020/08/22/sum_2/"/>
    <id>http://hydd.cf/2020/08/22/sum_2/</id>
    <published>2020-08-21T16:00:00.000Z</published>
    <updated>2020-10-01T05:05:46.874Z</updated>
    
    <content type="html"><![CDATA[<ul><li>$Day1 \ T1:$ 矩阵乘法套路题，先把每个点拆成 $5$ 个点，然后把点权放到边上，直接广义矩乘矩阵做是三次方，后面发现它只要取第一行第一列，可以最后乘上一个列向量，然后再取最后的列向量的第一个数即可。剩下的可以直接类似于 $NOI\ Online\ 3$ 的 $T2$ 做就可以了。但是考试的时候并没有过，原因是循环的时候数组越界了，而且极限数据它并没有显示 $RE$，只不过是答案错了，找不出来（可能 $Linux$ 会直接显示 $RE$）。</li><li>$Day1 \ T2:$ 线段树合并优化 $dp$ 题，考试上确实往 $dp$ 方面想了，状态设计的也没有问题，但是我用是刷表法，导致 $dp$ 没什么优化思路，复杂度 $O(\sum dep_i)$，得了 $44pts$。用填表法就可以前缀和优化了，可以得 $64pts$。后面就可以线段树合并了。 </li><li>$Day1\ T3:$ 毒瘤分块题，给定下标区间和值域区间，求逆序对个数。我在考场上写了个大暴力，用莫队写了 $O(n\sqrt n\log n)$ 的算法，期望 $40$ 分，最后拿到了 $36pts$（数组开小了）。最后算法是分块。</li><li>$Day2 \ T1:$ 贪心 $+$ 背包题。我刚开始想到两种贪心，都写了，第一种过了前两个样例，第二种过了第三个样例。读题的时候没有发现 $m\geq n-2$ 这个条件的性质。最后写了个暴力，考后才发现第二种暴力在 $m=n-1$ 时就是对的，而且第三个样例就是 $m=n-1$，可以多得 $15pts$。</li><li>$Day2 \ T2:$ 分治乱搞题，刚开始想到了一个思路，就是每次将一个点的三种情况合并，然后继续合并，如果能合并成一个点，那么有解，否则无解。然后实在太难写了，就没有去写。然后写了很假的贪心，刚开始第四个样例中第二个没过，调了一会儿，第四个样例第四个又没过，然后手动模拟发现假了，最后只有 $12pts$。</li><li>$Day2\ T3:$ 不可做图论题，图是个三角剖分，可以发现情况 $A$ 只要先跑最短路，再看删去最短路两点是否联通即可，有 $20pts$。</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这次 $NOI$ 同步赛，主要问题还是出在细节和草稿、思维能力上。</p><ul><li><p>在草稿上手动模拟贪心过程，就可以免去很多打代码，调试的时间。</p></li><li><p>注意细节，可以避免许多不必要的错误。</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;$Day1 \ T1:$ 矩阵乘法套路题，先把每个点拆成 $5$ 个点，然后把点权放到边上，直接广义矩乘矩阵做是三次方，后面发现它只要取第一行第一列，可以最后乘上一个列向量，然后再取最后的列向量的第一个数即可。剩下的可以直接类似于 $NOI\ Online\ 3</summary>
      
    
    
    
    <category term="NOI2020" scheme="http://hydd.cf/categories/NOI2020/"/>
    
    
  </entry>
  
  <entry>
    <title>APIO2020 记录和总结</title>
    <link href="http://hydd.cf/2020/08/18/sum_1/"/>
    <id>http://hydd.cf/2020/08/18/sum_1/</id>
    <published>2020-08-17T16:00:00.000Z</published>
    <updated>2020-10-01T05:05:42.696Z</updated>
    
    <content type="html"><![CDATA[<h3 id="记录"><a href="#记录" class="headerlink" title="记录"></a>记录</h3><ul><li>看了看三道题，感觉 $T1,T3$ 都不好做，然后先去做 $T2$。</li><li>最开始的思路是二分后判断，然后感觉不太行，因为二分判断的话复杂度必定不低于线性，而询问直接又不可以重复利用（整体二分），复杂度是平方级别的。</li><li>于是就先放下这个思路，往贪心方面想，但是没有想出来。</li></ul><ul><li>去想 $T1$，发现有个 $\sum f^2(i)\leqslant 4\times 10^5$ 的条件。然后发现有个必要条件：$f(i)\leqslant 632$。</li><li>开始只有一个类似于 $O(N(\max f(i))^2)$ 的复杂度的预处理 $dp$，再 $O(N)$ 进行 $dp$ 的方法。具体来说，<ul><li>先预处理出合法的，可以染色的长为 $M$ 的区间，处理的方法是先设 $f[i][j]$ 表示第 $i$ 个位置以第 $j$ 个可以染当前位置的承包商结尾的最长能染多长。</li><li>从左往右枚举每一个位置 $i$ 。再枚举 $i$ 位置的颜色所有可以染的承包商 $j$，再枚举 $i-1$ 位置所有可以染的承包商 $k$，看它们的差是否为 $1$。如果为 $1$，$f[i][j]$ 就可以从 $f[i-1][k]+1$ 转移过来。如果 $dp[i][*]$ 有 $\geq K$ 的，那么这个位置往前 $M$ 个是可以染的。</li><li>之后 $dp$ 的方法就是 $dp_i=\min_\limits{i-k\leq j&lt;i} dp_j+1$。里面这个可以直接用单调队列维护。</li></ul></li><li>后来发现这个预处理可以直接用类似桶的东西来解决，就直接写好交了，一遍过。</li></ul><ul><li>去想 $T2$，又重新往二分方面想。</li><li>保留边权 $\leqslant mid$ 的边后，发现了一个性质：当且仅当 $x,y$ 不在同一连通块或所在的连通块是一条链的时候，是非法的，否则是合法的。这样会有 $37pts$。</li><li>然后就直接暴力判断啊，当时又想了想其它算法，想不出，然后开始写，$11:00$ 交了第一发，$WA$ 了。调了 $30$ 多分钟也没调出来。就先去写前面的 $6pts$，认为是一条链，开始还想 $ST$ 表啥的，后来发现直接是 $-1$。但是交上去又 $WA$ 了（心态有点爆炸）。就再去写那个 $7pts$，也调了好久，调过了，就先去看 $T3$。</li></ul><ul><li>$T3$ 暴力的 $26pts$ 就是先找最长的，再找剩下最长的，再找 $\cdots$ 即可，询问次数为 $O(n^2)$。</li><li>然后重构 $T2$  $37pts$ 的代码，然后过了。又发现那个 $6pts$ 除了一条链之外还有可能是一个环。然后又想 $ST$ 表啥的，发现就是环上最大值，也过了。</li><li>再去想 $T3$ 的完全二叉树部分，发现找最长的可以通过枚举 $LCA$ 然后 $set$ 解决，也写完过了，时间也差不多结束了。</li></ul><ul><li>总得分：$100+50+47=197$。</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>总体发挥还算可以（我可能比较适合 $IOI$ 赛制？）</li><li>这种交互式的题型不太会调试，导致调的比较慢（后来知道可以用 $dev-c++$ 开工程解决）。但好处是不需要手动把部分分拼起来。</li><li>然后实在调不出来可以重构代码，要仔细注意题目的条件，考虑所有情况（比如连通图每个点度数 $\leqslant 2$ 可以是一条链，也可以是一个环 ）。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;记录&quot;&gt;&lt;a href=&quot;#记录&quot; class=&quot;headerlink&quot; title=&quot;记录&quot;&gt;&lt;/a&gt;记录&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;看了看三道题，感觉 $T1,T3$ 都不好做，然后先去做 $T2$。&lt;/li&gt;
&lt;li&gt;最开始的思路是二分后判断，然后感觉不太行</summary>
      
    
    
    
    <category term="APIO2020" scheme="http://hydd.cf/categories/APIO2020/"/>
    
    
  </entry>
  
  <entry>
    <title>WC2020 题解</title>
    <link href="http://hydd.cf/2020/08/14/sol_10/"/>
    <id>http://hydd.cf/2020/08/14/sol_10/</id>
    <published>2020-08-13T16:00:00.000Z</published>
    <updated>2020-09-30T13:02:17.839Z</updated>
    
    <content type="html"><![CDATA[<h2 id="「WC2020」有根树"><a href="#「WC2020」有根树" class="headerlink" title="「WC2020」有根树"></a>「WC2020」有根树</h2><h3 id="题面描述"><a href="#题面描述" class="headerlink" title="题面描述"></a>题面描述</h3><ul><li>给定一棵包含 $n$ 个结点的有根树，结点从 $1 \sim n$ 编号，$1$ 号点为根结点。小明有一个结点集合 $S$，对于 $S$ 中的结点 $u$，他定义 $w_u$ 的值为 $u$ 的子树中（包括 $u$ 本身）被包含在集合 $S$ 内的结点数，为了方便叙述，对于不在 $S$ 中的结点，我们认为其 $w_u=0$ 。</li><li>接下来，小明需要你选择一个包含根结点的连通块 $C$。记 $a$ 表示连通块 $C$ 中被包含在集合 $S$ 内的结点数，$b$ 表示不在连通块 $C$ 中的结点的 $w$ 值最大值，若不存在不在 $C$ 中的结点，则 $b = 0$，小明希望你能最小化 $\max(a,b)$。</li><li>小明觉得这个问题还比较简单，所以还给出了 $q$ 次操作，每次会令集合 $S$ 加入或删除一个结点，请你对每次操作后的集合 $S$ 给出 $\max(a,b)$ 的最小值。</li></ul><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><ul><li>第一行一个正整数 $n$ 表示结点数。</li><li>接下来 $n-1$ 行，每行两个整数 $x,y$，表示树上的一条边 $(x,y)$。</li><li>接下来一行一个正整数 $q$ 表示操作数。</li><li>接下来 $q$ 行，每行两个数 $t,v$ 表示一次操作。若 $t=1$ 则该操作为将结点 $v$ 加入 $S$，保证操作前 $v \not \in S$。若 $t=2$ 则该操作为将结点 $v$ 从 $S$ 中删去，保证操作前 $v\in S$。</li><li>初始时 $S$ 为空集。</li></ul><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><ul><li>每次操作后，输出一行一个整数表示答案。</li></ul><h3 id="样例1"><a href="#样例1" class="headerlink" title="样例1"></a>样例1</h3><h4 id="input"><a href="#input" class="headerlink" title="input"></a>input</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">1 2</span><br><span class="line">1 3</span><br><span class="line">1 4</span><br><span class="line">2 5</span><br><span class="line">5</span><br><span class="line">1 4</span><br><span class="line">1 1</span><br><span class="line">1 2</span><br><span class="line">1 5</span><br><span class="line">2 2</span><br></pre></td></tr></table></figure><h4 id="output"><a href="#output" class="headerlink" title="output"></a>output</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">1</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">1</span><br></pre></td></tr></table></figure><h4 id="explanation"><a href="#explanation" class="headerlink" title="explanation"></a>explanation</h4><ul><li>第一次操作后 $S=\{4\}$，一个选择方案为 $C=\{1\}$，此时 $a=0,b=1$。</li><li>第二次操作后 $S=\{1,4\}$，一个选择方案为 $C=\{1\}$，此时 $a=1,b=1$。</li><li>第三次操作后 $S=\{1,2,4\}$，一个选择方案为 $C=\{1\}$，此时 $a=1,b=1$。</li><li>第四次操作后 $S=\{1,2,4,5\}$，一个选择方案为 $C=\{1,2\}$，此时 $a=2,b=1$。</li><li>第五次操作后 $S=\{1,4,5\}$，一个选择方案为 $C=\{1\}$，此时 $a=0,b=1$。</li></ul><h3 id="样例2"><a href="#样例2" class="headerlink" title="样例2"></a>样例2</h3><ul><li>见附加文件。</li></ul><h3 id="样例3"><a href="#样例3" class="headerlink" title="样例3"></a>样例3</h3><ul><li>见附加文件。</li></ul><h3 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h3><ul><li>对于所有测试点：$1\le n\le 5\times 10^5$，$1\le q\le 10^6$,$1\le x,y,v\le n$,$t\in \{1,2\}$。</li></ul><p><img src="C:\Users\hydd_\AppData\Roaming\Typora\typora-user-images\image-20200813141944143.png" alt="image-20200813141944143"></p><ul><li><p>表格中特殊限制一栏符号的含义为：</p><ul><li>$A$：任意时刻集合 $S$ 的大小不超过 $50$。</li><li>$B$：树的形态是一条链且 $1$ 号结点度数为 $1$。</li><li>$C$：树上每个结点的双亲结点编号小于它本身，$n=q$ 且第 $i$ 次操作为将 $i$ 号点加入 $S$。</li></ul></li><li><p>时间限制: $4\texttt{s}$</p></li><li><p>空间限制: $512\texttt{MB}$</p></li></ul><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><ul><li>一个性质：$C$ 一定是 $S$ 集合中 $w$ 值最大的若干个点（记作集合 $A$）和根形成的连通块。</li><li>考虑反证：若 $\exists x,x\in S\backslash A$，那 $x$ 必为 $A$ 中某个点（设为 $y$）的祖先，所以 $w_x&gt;w_y$，不满足 $A$ 的定义。</li><li>令 $B=S-A$，我们强制钦定 $|A|\geq\max_{x\in B} w_x$。每一次询问要求的答案就是当前的 $|A|$。</li><li>根据定义，显然有：$\max_{x\in B} w_x\leq \min_{x\in A} w_x$。记 $ans=|A|$。</li></ul><h3 id="O-n-log-2-n-做法"><a href="#O-n-log-2-n-做法" class="headerlink" title="$O(n \log^2 n)$ 做法"></a>$O(n \log^2 n)$ 做法</h3><ul><li>对原树进行轻重链剖分。</li><li>线段树维护每个节点子树内的 $\max_{x\in B} w_x$和 $\min_{x\in A} w_x$（分别记为 $mx[now],mn[now]$），询问时调整。</li><li>初始时，$mx[now]=-INF,mn[now]=INF$，代表子树中没有在 $S$ 中的点。</li><li>加入一个数 $x$ 时，先将它加入到 $B$ 中。那么相当于在将 $x$ 的 $mx+=INF$。若原来的值为 $-INF+k$，那么现在的值为 $k$（$k$ 即为 $x$ 子树在 $S$ 中的点的个数）。然后将 $x$ 到根路径上的所有 $w++$。</li><li>删除一个数 $x$ 时，若当前位置 $mx&lt;0$，说明并不在 $A$ 中，就从 $B$ 中删除，$mx-=INF$。否则从 $A$ 中删除，$mn+=INF$，同时 $ans—$。（$A$ 的大小减少了 $1$）。然后将 $x$ 到根路径上的所有 $w—$。</li><li>若 $\max_{x\in B} w_x&gt; \min_{x\in A} w_x$，再将 $B$ 中的最大值移入 $A$ 中，使得其满足 $A$ 的定义。</li><li>若 $|A|&lt;\max_{x\in B} w_x$，再将 $B$ 中的最大值移入 $A$ 中。（已强制钦定 $|A|\geq\max_{x\in B} w_x$）</li><li>若 $|A|&gt;min_{x\in A} w_x$，当前答案必大于 $min_{x\in A} w_x$，那么将 $A$ 中的最小值移到 $B$ 中，答案必定不会变劣。</li><li>最后得到的 $|A|$ 就是答案。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*********************************************************************</span></span><br><span class="line"><span class="comment">Problem:「WC2020」有根树</span></span><br><span class="line"><span class="comment">Author:hydd</span></span><br><span class="line"><span class="comment">Date:2020/8/13</span></span><br><span class="line"><span class="comment">Encoding:Simplified Chinese (GB2312)</span></span><br><span class="line"><span class="comment">*********************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> File(x) freopen(x<span class="meta-string">&quot;.in&quot;</span>,<span class="meta-string">&quot;r&quot;</span>,stdin);freopen(x<span class="meta-string">&quot;.out&quot;</span>,<span class="meta-string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">Getchar</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> now[<span class="number">1</span>&lt;&lt;<span class="number">20</span>],*A,*B;</span><br><span class="line"><span class="keyword">if</span> (B==A)&#123;</span><br><span class="line">B=(A=now)+fread(now,<span class="number">1</span>,<span class="number">1</span>&lt;&lt;<span class="number">20</span>,<span class="built_in">stdin</span>);</span><br><span class="line"><span class="keyword">if</span> (B==A) <span class="keyword">return</span> EOF;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> *A++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> ch=Getchar();</span><br><span class="line"><span class="keyword">while</span> (ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">if</span> (ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">-1</span>;</span><br><span class="line">ch=Getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (ch&lt;=<span class="string">&#x27;9&#x27;</span>&amp;&amp;ch&gt;=<span class="string">&#x27;0&#x27;</span>) x=x*<span class="number">10</span>+ch-<span class="string">&#x27;0&#x27;</span>,ch=Getchar();</span><br><span class="line"><span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n,q,ans,fa[<span class="number">510000</span>],sz[<span class="number">510000</span>];</span><br><span class="line"><span class="keyword">int</span> dtime,son[<span class="number">510000</span>],top[<span class="number">510000</span>],dfn[<span class="number">510000</span>];</span><br><span class="line"><span class="keyword">int</span> edgenum,vet[<span class="number">1100000</span>],val[<span class="number">1100000</span>],Next[<span class="number">1100000</span>],Head[<span class="number">510000</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">vet[++edgenum]=v;</span><br><span class="line">Next[edgenum]=Head[u];</span><br><span class="line">Head[u]=edgenum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> f)</span></span>&#123;</span><br><span class="line">fa[u]=f; sz[u]=<span class="number">1</span>; son[u]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> e=Head[u],v;e;e=Next[e])&#123; v=vet[e];</span><br><span class="line"><span class="keyword">if</span> (v==f) <span class="keyword">continue</span>;</span><br><span class="line">dfs(v,u); sz[u]+=sz[v];</span><br><span class="line"><span class="keyword">if</span> (sz[v]&gt;sz[son[u]]) son[u]=v;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> tp)</span></span>&#123;</span><br><span class="line">top[u]=tp; dfn[u]=++dtime;</span><br><span class="line"><span class="keyword">if</span> (son[u]) dfs2(son[u],tp);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> e=Head[u],v;e;e=Next[e])&#123; v=vet[e];</span><br><span class="line"><span class="keyword">if</span> (v==fa[u]||v==son[u]) <span class="keyword">continue</span>;</span><br><span class="line">dfs2(v,v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//namespace Segment Tree</span></span><br><span class="line"><span class="keyword">int</span> mn[<span class="number">2100000</span>],mx[<span class="number">2100000</span>],tag[<span class="number">2100000</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> now)</span></span>&#123;</span><br><span class="line">mn[now]=min(mn[now&lt;&lt;<span class="number">1</span>],mn[now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]);</span><br><span class="line">mx[now]=max(mx[now&lt;&lt;<span class="number">1</span>],mx[now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> now,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">mn[now]+=v; mx[now]+=v;</span><br><span class="line">tag[now]+=v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> now)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (tag[now])&#123;</span><br><span class="line">add(now&lt;&lt;<span class="number">1</span>,tag[now]);</span><br><span class="line">add(now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,tag[now]);</span><br><span class="line">tag[now]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> now,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (l==r)&#123;</span><br><span class="line"><span class="keyword">if</span> (v&gt;<span class="number">0</span>) mx[now]+=INF;<span class="comment">//B中加入</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (mx[now]&lt;<span class="number">0</span>) mn[now]+=INF,ans--;<span class="comment">//A中删除</span></span><br><span class="line"><span class="keyword">else</span> mx[now]-=INF;<span class="comment">//B中删除</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">pushdown(now);</span><br><span class="line"><span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (x&lt;=mid) change(now&lt;&lt;<span class="number">1</span>,l,mid,x,v);</span><br><span class="line"><span class="keyword">else</span> change(now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,x,v);</span><br><span class="line">pushup(now);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> now,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (l==x&amp;&amp;r==y)&#123;</span><br><span class="line">add(now,v);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">pushdown(now);</span><br><span class="line"><span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (y&lt;=mid) change(now&lt;&lt;<span class="number">1</span>,l,mid,x,y,v);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (x&gt;mid) change(now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,x,y,v);</span><br><span class="line"><span class="keyword">else</span> &#123; change(now&lt;&lt;<span class="number">1</span>,l,mid,x,mid,v); change(now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,mid+<span class="number">1</span>,y,v);&#125;</span><br><span class="line">pushup(now);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BtoA</span><span class="params">(<span class="keyword">int</span> now,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (l==r)&#123;</span><br><span class="line">ans++;</span><br><span class="line">mx[now]-=INF; mn[now]-=INF;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">pushdown(now);</span><br><span class="line"><span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (mx[now]==mx[now&lt;&lt;<span class="number">1</span>]) BtoA(now&lt;&lt;<span class="number">1</span>,l,mid);</span><br><span class="line"><span class="keyword">else</span> BtoA(now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">pushup(now);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AtoB</span><span class="params">(<span class="keyword">int</span> now,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (l==r)&#123;</span><br><span class="line">ans--;</span><br><span class="line">mx[now]+=INF; mn[now]+=INF;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">pushdown(now);</span><br><span class="line"><span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (mn[now]==mn[now&lt;&lt;<span class="number">1</span>]) AtoB(now&lt;&lt;<span class="number">1</span>,l,mid);</span><br><span class="line"><span class="keyword">else</span> AtoB(now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">pushup(now);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//File(&quot;tree&quot;);</span></span><br><span class="line">n=read(); <span class="keyword">int</span> op,u,v;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">u=read(); v=read();</span><br><span class="line">addedge(u,v); addedge(v,u);</span><br><span class="line">&#125;</span><br><span class="line">dfs(<span class="number">1</span>,<span class="number">0</span>); dfs2(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">q=read();</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">答案必定是S中w最大的若干个点</span></span><br><span class="line"><span class="comment">我们选择的S中w最大的若干个点的子集为A，B=S-A</span></span><br><span class="line"><span class="comment">满足B中最大值&lt;=A中最小值</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">4</span>*n+<span class="number">1</span>;i++) mn[i]=INF,mx[i]=-INF;</span><br><span class="line"><span class="keyword">while</span> (q--)&#123;</span><br><span class="line">op=read(); v=read(); <span class="keyword">if</span> (op==<span class="number">2</span>) op=<span class="number">-1</span>;</span><br><span class="line">change(<span class="number">1</span>,<span class="number">1</span>,n,dfn[v],op);</span><br><span class="line"><span class="keyword">for</span> (;v;v=fa[top[v]]) change(<span class="number">1</span>,<span class="number">1</span>,n,dfn[top[v]],dfn[v],op);</span><br><span class="line"><span class="comment">/*if (op==1)&#123;</span></span><br><span class="line"><span class="comment">while (mn[1]&lt;mx[1]) BtoA(1,1,n);//A中最小值&lt;B中最大值</span></span><br><span class="line"><span class="comment">&#125; else&#123;*/</span></span><br><span class="line"><span class="keyword">while</span> (mn[<span class="number">1</span>]&lt;mx[<span class="number">1</span>]) BtoA(<span class="number">1</span>,<span class="number">1</span>,n);<span class="comment">//A中最小值&lt;B中最大值</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="keyword">while</span> (ans&lt;mx[<span class="number">1</span>]) BtoA(<span class="number">1</span>,<span class="number">1</span>,n);<span class="comment">//钦定|A|&gt;=mx[1]</span></span><br><span class="line"><span class="keyword">while</span> (ans&gt;mn[<span class="number">1</span>]) AtoB(<span class="number">1</span>,<span class="number">1</span>,n);<span class="comment">//答案已经比mn[1]大了，把它移到B答案不会变劣</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="O-n-log-n-做法"><a href="#O-n-log-n-做法" class="headerlink" title="$O(n\log n)$ 做法"></a>$O(n\log n)$ 做法</h3><ul><li>对原树进行轻重链剖分后，维护每条重链上：<ul><li>重链上的点的个数（记作 $tot$）。</li><li>最靠下的在 $A$ 中的点与链顶深度之差 $+1$。记作 $up$），如果没有，设为 $0$。$up$ 的 $w$ 值（记作 $up_w$）。</li><li>最靠上的在 $B$ 中的点与链顶深度之差 $+1$（记作 $dw$），如果没有，设为 $tot+1$。$dw$ 的 $w$ 值（记作 $dw_w$）。</li></ul></li><li>维护一个 $cnt=|A|$，再维护 $lim$，要求 $\min_{x\in A} x&gt;lim,\max_{x\in B}\leq lim$。</li></ul><h4 id="在-S-中插入点-x"><a href="#在-S-中插入点-x" class="headerlink" title="在 $S$ 中插入点 $x$"></a>在 $S$ 中插入点 $x$</h4><ul><li>找到 $x$ 所在的重链，先更新链上的 $up_w/dw_w$ 都 $+1$。</li><li>如果现在的 $dw_w&gt;lim$，就可以把它移动到 $A$ 中（而必定只有一个点会移到 $A$ 中，因为链上从上到下的 $w$ 值必定是严格递减的）。（此条件有可能满足只有可能最靠上的在 $B$ 中的点在 $x$ 上方）</li><li>否则，如果当前最靠上的在 $B$ 中的点在 $x$ 下方，那么：<ul><li>如果 $w_x\leqslant lim$，那么显然有 $t-fa[x]$ 链上所有点都在 $A$ 中，$son[x]-\cdots$ 链上所有点都在 $B$ 中，且当前点可以加入 $B$，就可以考虑更新 $up$。</li><li>如果 $w_x&gt;lim$，那么显然有 $t-fa[x]$ 链上所有点都在 $A$ 中，$son[x]-\cdots$ 链上所有点都在 $B$ 中。且当前点可以加入 $A$，就可以考虑更新 $dw$。</li></ul></li><li>接下来，就是更新到根路径上的其他重链的 $up_w/dw_w$，然后看要不要上移分界点即可。</li><li>最后，当 $cnt&gt;lim$，不断将 $A$ 中值为 $lim$ 的点移到 $B$ 中即可。</li></ul><h4 id="在-S-中删除点-x"><a href="#在-S-中删除点-x" class="headerlink" title="在 $S$ 中删除点 $x$"></a>在 $S$ 中删除点 $x$</h4><ul><li>找到 $x$ 所在的重链，先更新链上的 $up_w/dw_w$ 都 $-1$。设 $d$ 为当前点的深度与链顶深度之差 $+1$。</li><li>如果现在的 $d\leqslant up[t]$，说明它现在在 $A$ 中，删了之后要将 $cnt—$。同时如果 $d=up[t]$，说明它是 $A$ 中深度最大的点，删去之后要重新求深度最大的点。</li><li>如果现在的 $d=dw[t]$，说明它为 $B$ 中深度最小的点，删去之后要重新求深度最小的点。（在 $B$ 中但非深度最小的点删去没有影响）。</li><li>然后，若 $up_w[t]\leq lim$ 且 $up[t]\neq 0$ （这个点存在），那么就可以把它移动到 $B$ 中，$cnt—$。</li><li>接下来，就是更新到根路径上的其他重链的 $up_w/dw_w$，然后看要不要下移分界点即可。</li><li>最后，当 $cnt&lt;lim$，不断将 $B$ 值为 $lim$ 的点移到 $A$ 中即可。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*********************************************************************</span></span><br><span class="line"><span class="comment">Problem:「WC2020」有根树</span></span><br><span class="line"><span class="comment">Author:hydd</span></span><br><span class="line"><span class="comment">Date:2020/8/13-2020/8/14</span></span><br><span class="line"><span class="comment">Encoding:Simplified Chinese (GB2312)</span></span><br><span class="line"><span class="comment">*********************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> File(x) freopen(x<span class="meta-string">&quot;.in&quot;</span>,<span class="meta-string">&quot;r&quot;</span>,stdin);<span class="comment">//freopen(x&quot;.out&quot;,&quot;w&quot;,stdout)</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">510000</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXM=<span class="number">1100000</span>;</span><br><span class="line"><span class="keyword">int</span> n,q;</span><br><span class="line"><span class="keyword">namespace</span> IO&#123;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> LEN=<span class="number">1</span>&lt;&lt;<span class="number">20</span>;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">Getchar</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> now[LEN],*A,*B;</span><br><span class="line"><span class="keyword">if</span> (B==A)&#123;</span><br><span class="line">B=(A=now)+fread(now,<span class="number">1</span>,LEN,<span class="built_in">stdin</span>);</span><br><span class="line"><span class="keyword">if</span> (B==A) <span class="keyword">return</span> EOF;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> *A++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> ch=Getchar();</span><br><span class="line"><span class="keyword">while</span> (ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">if</span> (ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">-1</span>;</span><br><span class="line">ch=Getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (ch&lt;=<span class="string">&#x27;9&#x27;</span>&amp;&amp;ch&gt;=<span class="string">&#x27;0&#x27;</span>) x=x*<span class="number">10</span>+ch-<span class="string">&#x27;0&#x27;</span>,ch=Getchar();</span><br><span class="line"><span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">char</span> pbuf[LEN],*pp=pbuf;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pc</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> c)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (pp-pbuf==LEN) fwrite(pbuf,<span class="number">1</span>,LEN,<span class="built_in">stdout</span>),pp=pbuf;</span><br><span class="line">*pp++=c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> sta[<span class="number">35</span>];</span><br><span class="line"><span class="keyword">if</span> (x&lt;<span class="number">0</span>)&#123; pc(<span class="string">&#x27;-&#x27;</span>); x=-x;&#125;</span><br><span class="line"><span class="keyword">int</span> top=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">sta[top++]=x%<span class="number">10</span>;</span><br><span class="line">x/=<span class="number">10</span>;</span><br><span class="line">&#125; <span class="keyword">while</span> (x);</span><br><span class="line"><span class="keyword">while</span> (top) pc(sta[--top]+<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">IOflush</span><span class="params">()</span></span>&#123; fwrite(pbuf,<span class="number">1</span>,pp-pbuf,<span class="built_in">stdout</span>);&#125;</span><br><span class="line">&#125; <span class="keyword">using</span> <span class="keyword">namespace</span> IO;</span><br><span class="line"><span class="keyword">namespace</span> Graph&#123;</span><br><span class="line"><span class="keyword">int</span> edgenum,vet[MAXM],val[MAXM],Next[MAXM],Head[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">vet[++edgenum]=v;</span><br><span class="line">Next[edgenum]=Head[u];</span><br><span class="line">Head[u]=edgenum;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">using</span> <span class="keyword">namespace</span> Graph;</span><br><span class="line"><span class="keyword">namespace</span> HLD&#123;<span class="comment">//Heavy-Light Decompositions</span></span><br><span class="line"><span class="keyword">int</span> fa[MAXN],sz[MAXN],son[MAXN];</span><br><span class="line"><span class="keyword">int</span> dtime,L[MAXN],R[MAXN],num[MAXN];</span><br><span class="line"><span class="keyword">int</span> tot[MAXN],top[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> f)</span></span>&#123;</span><br><span class="line">fa[u]=f; sz[u]=<span class="number">1</span>; son[u]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> e=Head[u],v;e;e=Next[e])&#123; v=vet[e];</span><br><span class="line"><span class="keyword">if</span> (v==f) <span class="keyword">continue</span>;</span><br><span class="line">dfs(v,u); sz[u]+=sz[v];</span><br><span class="line"><span class="keyword">if</span> (sz[v]&gt;sz[son[u]]) son[u]=v;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> tp)</span></span>&#123;</span><br><span class="line">top[u]=tp; tot[tp]++; num[++dtime]=u;</span><br><span class="line">L[u]=dtime;</span><br><span class="line"><span class="keyword">if</span> (son[u]) dfs2(son[u],tp);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> e=Head[u],v;e;e=Next[e])&#123; v=vet[e];</span><br><span class="line"><span class="keyword">if</span> (v==fa[u]||v==son[u]) <span class="keyword">continue</span>;</span><br><span class="line">dfs2(v,v);</span><br><span class="line">&#125;</span><br><span class="line">R[u]=dtime;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">using</span> <span class="keyword">namespace</span> HLD;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> BIT&#123;<span class="comment">//Binary Index Tree</span></span><br><span class="line"><span class="keyword">int</span> tree[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (;x&lt;=n;x+=x&amp;-x) tree[x]+=y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (;x;x-=x&amp;-x) res+=tree[x];</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">using</span> <span class="keyword">namespace</span> BIT;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">List</span>&#123;</span><span class="comment">//表头为权值，后面接着点的编号</span></span><br><span class="line"><span class="keyword">int</span> pre[MAXM],nxt[MAXM];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (nxt[x]) pre[nxt[x]]=pre[x];</span><br><span class="line"><span class="keyword">if</span> (pre[x]) nxt[pre[x]]=nxt[x];</span><br><span class="line">pre[x]=x; nxt[x]=x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> v,<span class="keyword">int</span> x)</span></span>&#123;<span class="comment">//在权值v后插入点x</span></span><br><span class="line">v+=n+<span class="number">1</span>;</span><br><span class="line">nxt[x]=nxt[v];</span><br><span class="line"><span class="keyword">if</span> (nxt[v]) pre[nxt[v]]=x;</span><br><span class="line">nxt[v]=x; pre[x]=v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> v)</span></span>&#123; <span class="keyword">return</span> nxt[v+n+<span class="number">1</span>];&#125;</span><br><span class="line">&#125; Up,Dw;</span><br><span class="line"><span class="keyword">int</span> up[MAXN],dw[MAXN],up_w[MAXN],dw_w[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="comment">//更新每条链的分界点的值，存入Up,Dw</span></span><br><span class="line">Up.del(x);</span><br><span class="line"><span class="keyword">if</span> (up[x]&gt;=<span class="number">1</span>) Up.ins(up_w[x],x);</span><br><span class="line">Dw.del(x);</span><br><span class="line"><span class="keyword">if</span> (dw[x]&lt;=tot[x]) Dw.ins(dw_w[x],x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">up[x]为链上最深度最大的A中的点的深度，up_w[x]为其w值</span></span><br><span class="line"><span class="comment">dw[x]为链上最深度最小的B中的点的深度，dw_w[x]为其w值</span></span><br><span class="line"><span class="comment">&gt;lim的点放入A中，&lt;=lim的点放入B中</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update_w</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> d,<span class="keyword">int</span> w)</span></span>&#123;<span class="comment">//更新分界点的w值</span></span><br><span class="line"><span class="keyword">if</span> (<span class="number">1</span>&lt;=up[x]&amp;&amp;up[x]&lt;=d) up_w[x]+=w;</span><br><span class="line"><span class="keyword">if</span> (dw[x]&lt;=d) dw_w[x]+=w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_w</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123; <span class="keyword">return</span> query(R[x])-query(L[x]<span class="number">-1</span>);&#125;<span class="comment">//获得一个在S中的点的w值</span></span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; s[MAXN];</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;::iterator it;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pred</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">it=s[x].lower_bound(y);</span><br><span class="line"><span class="keyword">if</span> (it==s[x].begin()) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> *--it;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">succ</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">it=s[x].upper_bound(y);</span><br><span class="line"><span class="keyword">if</span> (it==s[x].end()) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> *it;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delA</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="comment">//将链上的深度最大的A从A中删除</span></span><br><span class="line">up[x]=pred(x,up[x]);</span><br><span class="line">up_w[x]=!up[x]?<span class="number">0</span>:get_w(num[L[x]+up[x]<span class="number">-1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delB</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="comment">//将链上的深度最大的B从B中删除</span></span><br><span class="line">dw[x]=succ(x,dw[x]);</span><br><span class="line">dw_w[x]=dw[x]&gt;tot[x]?<span class="number">0</span>:get_w(num[L[x]+dw[x]<span class="number">-1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AtoB</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="comment">//将链上的深度最大的A移到B中</span></span><br><span class="line">dw[x]=up[x]; dw_w[x]=up_w[x];</span><br><span class="line">delA(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BtoA</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="comment">//将链上的深度最小的B移到A中</span></span><br><span class="line">up[x]=dw[x]; up_w[x]=dw_w[x];</span><br><span class="line">delB(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> cnt,lim;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">add(L[x],<span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> t=top[x],d=L[x]-L[t]+<span class="number">1</span>;<span class="comment">//d为以t为根时x的深度（t深度为1）</span></span><br><span class="line">s[t].insert(d);</span><br><span class="line">update_w(t,d,<span class="number">1</span>);<span class="comment">//更新链上分界点的w（分界点在t--x的链上）</span></span><br><span class="line"><span class="keyword">if</span> (dw_w[t]&gt;lim)&#123; cnt++; BtoA(t);&#125;<span class="comment">//直接上移，因为最多分界点只会移动一步</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">if</span> (dw[t]&gt;d)&#123;<span class="comment">//现在已知dw[t]满足条件且在x之下，看分界点是否能移动</span></span><br><span class="line"><span class="keyword">int</span> s=get_w(x);</span><br><span class="line"><span class="keyword">if</span> (s&lt;=lim)&#123; dw[t]=d; dw_w[t]=s;&#125;<span class="comment">//原先t--fa[x]链上所有点都在A中，son[x]--*所有点都在B中，且当前点可以加入B</span></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">cnt++;</span><br><span class="line"><span class="keyword">if</span> (d&gt;up[t])&#123; up[t]=d; up_w[t]=s;&#125;<span class="comment">//原先t--fa[x]链上所有点都在A中，son[x]--*所有点都在B中，且当前点可以加入A</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">update(t);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> x=fa[t],t=top[x];x;x=fa[t],t=top[x])&#123;</span><br><span class="line">d=L[x]-L[t]+<span class="number">1</span>;</span><br><span class="line">update_w(t,d,<span class="number">1</span>);<span class="comment">//更新链上分界点的w</span></span><br><span class="line"><span class="keyword">if</span> (dw_w[t]&gt;lim)&#123; cnt++; BtoA(t);&#125;<span class="comment">//分界点上移</span></span><br><span class="line">update(t);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//前面的操作会导致cnt增大</span></span><br><span class="line"><span class="keyword">while</span> (cnt&gt;lim)&#123;</span><br><span class="line"><span class="keyword">int</span> x=Up.get(lim);</span><br><span class="line"><span class="keyword">if</span> (!x)&#123; lim++; <span class="keyword">continue</span>;&#125;<span class="comment">//没有权值为lim的A中的点</span></span><br><span class="line">cnt--; AtoB(x); update(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//做完后cnt==lim</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">add(L[x],<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">int</span> t=top[x],d=L[x]-L[t]+<span class="number">1</span>;<span class="comment">//d为以t为根时x的深度（t深度为1）</span></span><br><span class="line">s[t].erase(d);</span><br><span class="line">update_w(t,d,<span class="number">-1</span>);<span class="comment">//更新链上分界点的w（分界点在t--x的链上）</span></span><br><span class="line"><span class="keyword">if</span> (d&lt;=up[t]) cnt--;<span class="comment">//从A中删除，因为x已经不在S中了</span></span><br><span class="line"><span class="keyword">if</span> (d==up[t]) delA(t);<span class="comment">//若x为A中深度最大的点，删去后要重新求深度最大的点</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (d==dw[t]) delB(t);<span class="comment">//若x为B中深度最大的点，删去后要重新求深度最大的点</span></span><br><span class="line"><span class="keyword">if</span> (up[t]&gt;=<span class="number">1</span>&amp;&amp;up_w[t]&lt;=lim)&#123; cnt--; AtoB(t);&#125;<span class="comment">//x到根路径所有w--，可能导致分界点下移</span></span><br><span class="line">update(t);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> x=fa[t],t=top[x];x;x=fa[t],t=top[x])&#123;</span><br><span class="line">d=L[x]-L[t]+<span class="number">1</span>;</span><br><span class="line">update_w(t,d,<span class="number">-1</span>);<span class="comment">//更新链上分界点的w</span></span><br><span class="line"><span class="keyword">if</span> (up[t]&gt;=<span class="number">1</span>&amp;&amp;up_w[t]&lt;=lim)&#123; cnt--; AtoB(t);&#125;<span class="comment">//分界点下移</span></span><br><span class="line">update(t);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//前面的操作会导致cnt减小</span></span><br><span class="line"><span class="keyword">while</span> (cnt&lt;lim)&#123;</span><br><span class="line"><span class="keyword">int</span> x=Dw.get(lim);</span><br><span class="line"><span class="keyword">if</span> (!x)&#123; lim--; <span class="keyword">continue</span>;&#125;<span class="comment">//没有权值为lim的A中的点</span></span><br><span class="line">cnt++; BtoA(x); update(x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//File(&quot;tree&quot;);</span></span><br><span class="line">n=read();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=(n&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);i++)&#123;</span><br><span class="line">Up.pre[i]=<span class="number">0</span>; Up.nxt[i]=<span class="number">0</span>;</span><br><span class="line">Dw.pre[i]=<span class="number">0</span>; Dw.nxt[i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> t,u,v;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">u=read(); v=read();</span><br><span class="line">addedge(u,v); addedge(v,u);</span><br><span class="line">&#125;</span><br><span class="line">dfs(<span class="number">1</span>,<span class="number">0</span>); dfs2(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">if</span> (top[i]==i)&#123;</span><br><span class="line">dw[i]=tot[i]+<span class="number">1</span>;<span class="comment">//B中深度最小的点是i往下dw[i]深度的点</span></span><br><span class="line">s[i].insert(<span class="number">0</span>); s[i].insert(tot[i]+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">q=read(); </span><br><span class="line"><span class="keyword">while</span> (q--)&#123;</span><br><span class="line">t=read(); v=read();</span><br><span class="line"><span class="keyword">if</span> (t==<span class="number">1</span>) ins(v);</span><br><span class="line"><span class="keyword">else</span> del(v);</span><br><span class="line">write(cnt); pc(<span class="string">&#x27;\n&#x27;</span>); </span><br><span class="line">&#125;</span><br><span class="line">IOflush();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">5</span></span><br><span class="line"><span class="comment">1 2</span></span><br><span class="line"><span class="comment">1 3</span></span><br><span class="line"><span class="comment">1 4</span></span><br><span class="line"><span class="comment">2 5</span></span><br><span class="line"><span class="comment">6</span></span><br><span class="line"><span class="comment">1 4</span></span><br><span class="line"><span class="comment">1 1</span></span><br><span class="line"><span class="comment">1 2</span></span><br><span class="line"><span class="comment">1 5</span></span><br><span class="line"><span class="comment">2 2</span></span><br><span class="line"><span class="comment">1 3</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;「WC2020」有根树&quot;&gt;&lt;a href=&quot;#「WC2020」有根树&quot; class=&quot;headerlink&quot; title=&quot;「WC2020」有根树&quot;&gt;&lt;/a&gt;「WC2020」有根树&lt;/h2&gt;&lt;h3 id=&quot;题面描述&quot;&gt;&lt;a href=&quot;#题面描述&quot; class=&quot;</summary>
      
    
    
    
    <category term="WC2020" scheme="http://hydd.cf/categories/WC2020/"/>
    
    
  </entry>
  
  <entry>
    <title>20200812 zzq模拟赛题解</title>
    <link href="http://hydd.cf/2020/08/12/sol_7/"/>
    <id>http://hydd.cf/2020/08/12/sol_7/</id>
    <published>2020-08-11T16:00:00.000Z</published>
    <updated>2020-10-01T10:19:27.875Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Query"><a href="#Query" class="headerlink" title="Query"></a>Query</h2><p>在一次询问后，“预测答案”，并安排后两次询问。</p><p>预测成功，两次询问有效。预测失败，就浪费了两次询问。</p><p>我们定义一个数列 $a[x]=a[x-1]+a[x-3]+1$（$+1$是等号的情况），$a[1]=0,a[2]=0,a[3]=1$。表示通过这个方法，用 $x$ 次可以询问出值域在 $[1,a[x]]$ 之间的所有数。显然，$3$ 次可以问出一个数。</p><p><img src="pic3.png" alt=""></p><p>在第三步询问时，第一步询问的答案已经出来了。</p><ul><li><p>若答案为 $=$，即为这个数；</p></li><li><p>若答案为 $&gt;$，则后面两次询问浪费，结构和后面的询问没关系。将 $x-=3$，当做一个子问题递归处理； </p></li><li><p>若答案为 $&lt;$，用类似的方法，第四步询问 $a[x-2]$ 的左子区间（长度为 $a[x-3]$）的第 $a[x-4]+1$ 个数，此时得出了第二步的答案，类似的处理即可。</p></li></ul><p>不管怎样，三步询问后，下一次询问的区间长度都为 $a[x-3]$。则总共需要的次数是 $O(x)$级别的。</p><p>又因为 $a[56]&gt;10^9$，所以次数不超过 $56$ 次。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;query.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">510</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">guess</span><span class="params">()</span></span>&#123;</span><br><span class="line">a[<span class="number">3</span>]=<span class="number">1</span>; <span class="keyword">int</span> x;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">4</span>;i&lt;=<span class="number">500</span>;i++)&#123;</span><br><span class="line">a[i]=a[i<span class="number">-1</span>]+a[i<span class="number">-3</span>]+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (a[i]&gt;=<span class="number">1000000000</span>)&#123; x=i; <span class="keyword">break</span>;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> L=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line"><span class="keyword">if</span> (query(L+a[max(x<span class="number">-1</span>,<span class="number">0</span>)])==<span class="string">&#x27;=&#x27;</span>) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span> (query(L+a[max(x<span class="number">-2</span>,<span class="number">0</span>)])==<span class="string">&#x27;=&#x27;</span>) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line"><span class="keyword">char</span> ch=query(L+a[max(x<span class="number">-3</span>,<span class="number">0</span>)]);</span><br><span class="line"><span class="keyword">if</span> (ch==<span class="string">&#x27;=&#x27;</span>) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span> (ch==<span class="string">&#x27;&lt;&#x27;</span>)&#123;</span><br><span class="line">L+=a[max(x<span class="number">-1</span>,<span class="number">0</span>)]+<span class="number">1</span>;</span><br><span class="line">x-=<span class="number">3</span>; <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">x--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Xorsum"><a href="#Xorsum" class="headerlink" title="Xorsum"></a>Xorsum</h2><p>有一些显然的条件：和不小于异或和（$s\geq x$），和与异或和奇偶性相同（$2\mid s-x$）。</p><p>最大值最小显然可以二分答案 $mid$，如果我们知道每一位有几个 $1$，就可以贪心地得到答案。每次尽量分给 $&lt;m$ 的数（即没有压上界的），分不下的话剩下的分给前面几位暂时 $=m$ 的数（继续压上界）。</p><p>怎么求呢？先令 $b_i$ 的奇偶性和 $x$ 第 $2^i$ 位的奇偶性一样，然后再加上 $(s-x)/2$ 的这一位的两倍（此处十分巧妙，先从 $s$ 中减去 $x$ 来固定奇偶性，然后将剩下的每位都是 $2$ 的倍数的加上）。</p><p>我们设第 $i$ 位 $1$ 的个数为 $b_i$，我们先求出一个字典序最大的 $b_i$（即先满足 $b_{60}$ 最大，再满足 $b_{59}$ 最大，…）。那么所有可能的 $\{b_i\}$ 即为每次把某个 $u$，$b[u]-=2,b[u-1]+=4$ 就是所有答案（由于奇偶性不能变）。</p><p>直接 $dp$ 模拟这个过程。设 $dp[i][j]$ 表示决定好了从高到低的前 $i$ 位，当前有 $j$ 个数已经小于 $m$，这时候 $b[i-1]$ 加多少倍的 $4$ 。</p><p>那么当前的 $b[i-1]$ 是 $b_0[i-1]+4\times dp[i][j]$（$b_0$ 就是初始时的那个字典序最大的 $\{b_i\}$），令 $u$ 为当前的 $b[i-1]$。</p><p>看 $m$ 的 $2^i$ 位</p><ul><li><p>若为 $0$，就必须把 $u$ 整成不超过 $j$，转移到 $f[i-1][j]$（因为超过 $j$ 的话只能选当前暂时 $=m$，而 $m$ 当前位为 $0$，所以它们当前位不能为 $1$），那么要从当前的 $b$ 减去 $(max(u-j,0)+1)/2\times 2$（必须减去偶数个，$(x+1)/2\times 2$ 即为 $\geq x$ 的最小偶数）。</p></li><li><p>若为 $1$，如果当前的 $u\leq n$，那么新的 $j_new=\max(\min(n-(u-j),n),j)$ 时（先尽量把 $u$ 放在 $j$ 中，那么剩下的 $u-j$ 个必须为 $1$，它们依旧压上界，其它的可以不压上界）。对于其它的 $j’$，先尽量把 $j’$ 放在 $j$ 中，那么剩下的 $j’-j$ 必须为 $1$，而剩下必须要留下 $u\bmod 2$ 个。令 $v=n-(j’-j)$，那么当前留下 $\min(u,(v-u\bmod 2)/2\times 2+u\bmod 2)$。那么当前行都减去 $u-\min(u,(v-u\bmod 2)/2\times 2+u\bmod 2)$，下一行减去 $2\min(u,(v-u\bmod 2)/2\times 2+u\bmod 2)$。</p></li></ul><p>注意到：如果有 $f[i][j]=0$ 且 $j\geq 3$，那么一定有解，因为初始的 $b$ 都不超过 $3$，把这些放到 $j$ 个数中即可；另外一个是我们并不需要用借位一次将 $j$ 增加太多，因为如果借了 $2$，后面就要还 $4$，所以不应该借太多（？）。</p><p>因此我们只需要转移到 $j&lt;5$ 或 $j’-j&lt;2$ 的状态，状态数就是 $O(\log)$ 的。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*********************************************************************</span></span><br><span class="line"><span class="comment">Problem:Xor Sum</span></span><br><span class="line"><span class="comment">Source:Easy Contest #2 - by zzq</span></span><br><span class="line"><span class="comment">Author:hydd</span></span><br><span class="line"><span class="comment">Date:2020/8/12</span></span><br><span class="line"><span class="comment">Encoding:UTF-8</span></span><br><span class="line"><span class="comment">*********************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> File(x) freopen(x<span class="meta-string">&quot;.in&quot;</span>,<span class="meta-string">&quot;r&quot;</span>,stdin);freopen(x<span class="meta-string">&quot;.out&quot;</span>,<span class="meta-string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll INF=<span class="number">2e18</span>;</span><br><span class="line">ll n,s,x,t,f[<span class="number">64</span>],g[<span class="number">64</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">chkmin</span><span class="params">(ll &amp;x,ll y)</span></span>&#123; <span class="keyword">if</span> (x&gt;y) x=y;&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(ll mid)</span></span>&#123;</span><br><span class="line">t=s-x; <span class="keyword">if</span> (t&lt;<span class="number">0</span>||(t&amp;<span class="number">1</span>)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">t/=<span class="number">2</span>; f[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (ll j=<span class="number">1</span>;j&lt;<span class="number">64</span>;j++) f[j]=INF;</span><br><span class="line">ll m=min(<span class="number">3l</span>l,n);</span><br><span class="line"><span class="keyword">for</span> (ll i=<span class="number">59</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line"><span class="keyword">for</span> (ll j=<span class="number">0</span>;j&lt;<span class="number">64</span>;j++) g[j]=INF;</span><br><span class="line"><span class="keyword">for</span> (ll j=<span class="number">0</span>;j&lt;=m;j++)&#123;</span><br><span class="line">ll u=f[j]*<span class="number">4</span>;</span><br><span class="line"><span class="keyword">if</span> (x&amp;<span class="number">1l</span>l&lt;&lt;i) u++;<span class="comment">//令b的奇偶性和x那位一样</span></span><br><span class="line"><span class="keyword">if</span> (t&amp;<span class="number">1l</span>l&lt;&lt;i) u+=<span class="number">2</span>;<span class="comment">//然后再加上(s-x)/2的这一位的两倍</span></span><br><span class="line"><span class="keyword">if</span> (mid&amp;(<span class="number">1l</span>l&lt;&lt;i))&#123;</span><br><span class="line"><span class="keyword">if</span> (u&lt;=n)&#123;</span><br><span class="line">ll k=max(min(n-(u-j),n),(ll)j);<span class="comment">//注意一定要开long long，否则可能越界边负数下面判不掉</span></span><br><span class="line"><span class="keyword">if</span> (k&gt;=<span class="number">3</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">chkmin(g[k],<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k=j;(k&lt;<span class="number">5</span>||k-j&lt;<span class="number">2</span>)&amp;&amp;k&lt;=n;k++)&#123;</span><br><span class="line">ll v=n-(k-j);<span class="comment">//先尽量把k放在j中，那么剩下的k-j必须为1</span></span><br><span class="line"><span class="keyword">if</span> (v&gt;=u%<span class="number">2</span>)&#123;<span class="comment">//至少要留下u%2个数，e必须为偶数，奇偶性不变</span></span><br><span class="line">ll e=u-min(u,(v-u%<span class="number">2</span>)/<span class="number">2</span>*<span class="number">2</span>+u%<span class="number">2</span>); assert(e%<span class="number">2</span>==<span class="number">0</span>);</span><br><span class="line"><span class="comment">//当前减去e，下一行减去2e，即4(e/2)</span></span><br><span class="line">chkmin(g[k],e/<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line">ll e=(max(u-j,<span class="number">0l</span>l)+<span class="number">1</span>)/<span class="number">2</span>;<span class="comment">//当前有u个数，而剩下不超过j个数，多余的下传</span></span><br><span class="line"><span class="keyword">if</span> (e*<span class="number">2</span>&gt;u) <span class="keyword">continue</span>;<span class="comment">//当前减去2e，下一行减去4e，即4(e)</span></span><br><span class="line">chkmin(g[j],e);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">m++; m=min((ll)m,n);</span><br><span class="line">swap(f,g);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=m;i++)</span><br><span class="line"><span class="keyword">if</span> (!f[i]) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld%lld&quot;</span>,&amp;n,&amp;s,&amp;x);</span><br><span class="line">ll l=<span class="number">0</span>,r=s+<span class="number">1</span>,mid;</span><br><span class="line"><span class="keyword">while</span> (l&lt;r)&#123;</span><br><span class="line">mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (check(mid)) r=mid;</span><br><span class="line"><span class="keyword">else</span> l=mid+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (r==s+<span class="number">1</span>) <span class="built_in">puts</span>(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">File(<span class="string">&quot;xs&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;T);</span><br><span class="line"><span class="keyword">while</span> (T--) solve();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">4 8 0</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="Path"><a href="#Path" class="headerlink" title="Path"></a>Path</h2><p>首先，将它看成在坐标轴上，每次往右上或右下走一格，不能经过 $y=-1$ 和 $y=m-n+1$，问走到 $(n+m,m-n)$ 的方案数。</p><p>直接容斥翻折即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,a,b,tmp1,tmp2,ans;</span><br><span class="line">ll inv[<span class="number">20000005</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123; <span class="keyword">return</span> x+y&gt;=Mod?x+y-Mod:x+y;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">dec</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123; <span class="keyword">return</span> x-y&lt;<span class="number">0</span>?x-y+Mod:x-y;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">C</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x&lt;<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (x&gt;n+m) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> inv[x]*inv[n+m-x]%Mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">freopen(<span class="string">&quot;path.in&quot;</span>,<span class="string">&quot;r&quot;</span>,<span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">&quot;path.out&quot;</span>,<span class="string">&quot;w&quot;</span>,<span class="built_in">stdout</span>);</span><br><span class="line">inv[<span class="number">1</span>]=<span class="number">1</span>; <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=<span class="number">20000000</span>;i++) inv[i]=(Mod-Mod/i)*inv[Mod%i]%Mod;</span><br><span class="line">inv[<span class="number">0</span>]=<span class="number">1</span>; <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">20000000</span>;i++) inv[i]=inv[i<span class="number">-1</span>]*inv[i]%Mod;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>,&amp;n,&amp;m); n--; m--; ans=C(m);</span><br><span class="line">ll mul=<span class="number">1</span>; <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n+m;i++) mul=mul*i%Mod;</span><br><span class="line">a=m-n; b=m-n;</span><br><span class="line">tmp1=<span class="number">2</span>*(<span class="number">-1</span>); tmp2=<span class="number">2</span>*(m-n+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">20000000</span>;i++)&#123;</span><br><span class="line"><span class="keyword">if</span> (i&amp;<span class="number">1</span>)&#123;</span><br><span class="line">a=tmp1-a;<span class="comment">//关于y=-1对称</span></span><br><span class="line">b=tmp2-b;<span class="comment">//关于y=m-n+1对称 </span></span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line">a=tmp2-a;<span class="comment">//关于y=m-n+1对称 </span></span><br><span class="line">b=tmp1-b;<span class="comment">//关于y=-1对称</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (i&amp;<span class="number">1</span>)&#123;</span><br><span class="line">ans=dec(ans,C((a+n+m)&gt;&gt;<span class="number">1</span>));</span><br><span class="line">ans=dec(ans,C((b+n+m)&gt;&gt;<span class="number">1</span>));</span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line">ans=add(ans,C((a+n+m)&gt;&gt;<span class="number">1</span>));</span><br><span class="line">ans=add(ans,C((b+n+m)&gt;&gt;<span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,<span class="number">1l</span>l*ans*mul%Mod);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">5000000 10000000</span></span><br><span class="line"><span class="comment">100000 200000</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Query&quot;&gt;&lt;a href=&quot;#Query&quot; class=&quot;headerlink&quot; title=&quot;Query&quot;&gt;&lt;/a&gt;Query&lt;/h2&gt;&lt;p&gt;在一次询问后，“预测答案”，并安排后两次询问。&lt;/p&gt;
&lt;p&gt;预测成功，两次询问有效。预测失败，就浪费了两次询问。&lt;</summary>
      
    
    
    
    <category term="NOI模拟赛" scheme="http://hydd.cf/categories/NOI%E6%A8%A1%E6%8B%9F%E8%B5%9B/"/>
    
    
  </entry>
  
  <entry>
    <title>20200811 zzq模拟赛题解</title>
    <link href="http://hydd.cf/2020/08/11/sol_8/"/>
    <id>http://hydd.cf/2020/08/11/sol_8/</id>
    <published>2020-08-10T16:00:00.000Z</published>
    <updated>2020-10-01T05:12:30.440Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Paint"><a href="#Paint" class="headerlink" title="Paint"></a>Paint</h2><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><ul><li>首先可以猜个结论，就是只会不停选相同的格子，将它所在的连通块反色。请读者自行证明。</li><li>我们将任意相邻的不为障碍的格子连一条边，同色的边权为 $0$，异色的边权为 $1$。</li><li>然后可以发现，将一个格子所在的连通块不停反色，需要的总步数为：以当前格子为起点，到任意非障碍格子的最短距离的最大值。</li><li>那么直接从每个点开始 $bfs$ 进行 $0/1$ 最短路即可。时间复杂度 $O(n^2m^2)$。</li></ul><h3 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h3><ul><li>$bfs$ 的时候，需要注意的是，队列里面存的是一个结构体 <code>node&#123;int x,y;&#125; u;</code>，需要注意必须让 <code>x=u.x,y=u.y</code> ，后面的 <code>nx,ny</code> 才能写成 <code>x+dx[k],y+dy[k]</code>。类似的有 $dfs$ 时的 $v=vet[e]$。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dx[]=&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dy[]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> n,m; <span class="keyword">char</span> s[<span class="number">55</span>][<span class="number">55</span>];</span><br><span class="line"><span class="keyword">bool</span> vis[<span class="number">55</span>][<span class="number">55</span>]; <span class="keyword">int</span> dis[<span class="number">55</span>][<span class="number">55</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">deque</span>&lt;node&gt; q;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (s[x][y]==<span class="string">&#x27;x&#x27;</span>) <span class="keyword">return</span> INF;</span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="literal">false</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line"><span class="built_in">memset</span>(dis,<span class="number">0x3f</span>,<span class="keyword">sizeof</span>(dis)); </span><br><span class="line">q.push_back((node)&#123;x,y&#125;);</span><br><span class="line">dis[x][y]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (!q.empty())&#123;</span><br><span class="line">node u=q.front(); q.pop_front();</span><br><span class="line">x=u.x; y=u.y;</span><br><span class="line"><span class="keyword">if</span> (vis[x][y]) <span class="keyword">continue</span>;</span><br><span class="line">vis[x][y]=<span class="literal">true</span>;</span><br><span class="line">res=max(res,dis[x][y]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> nx=u.x+dx[i],ny=u.y+dy[i];</span><br><span class="line"><span class="keyword">if</span> (nx&lt;<span class="number">1</span>||nx&gt;n||ny&lt;<span class="number">1</span>||ny&gt;m||s[nx][ny]==<span class="string">&#x27;x&#x27;</span>) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> (s[nx][ny]==s[x][y])&#123;</span><br><span class="line"><span class="keyword">if</span> (dis[x][y]&lt;dis[nx][ny]) dis[nx][ny]=dis[x][y],q.push_front((node)&#123;nx,ny&#125;);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span> (dis[x][y]+<span class="number">1</span>&lt;dis[nx][ny]) dis[nx][ny]=dis[x][y]+<span class="number">1</span>,q.push_back((node)&#123;nx,ny&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">freopen(<span class="string">&quot;paint.in&quot;</span>,<span class="string">&quot;r&quot;</span>,<span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">&quot;paint.out&quot;</span>,<span class="string">&quot;w&quot;</span>,<span class="built_in">stdout</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s[i]+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> ans=INF,ansx,ansy,tmp;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line">tmp=bfs(i,j);</span><br><span class="line"><span class="keyword">if</span> (tmp&lt;ans)&#123;</span><br><span class="line">ans=tmp;</span><br><span class="line">ansx=i; ansy=j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=ans;i++) <span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>,ansx,ansy);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">5 5</span></span><br><span class="line"><span class="comment">10100</span></span><br><span class="line"><span class="comment">xx100</span></span><br><span class="line"><span class="comment">11111</span></span><br><span class="line"><span class="comment">00100</span></span><br><span class="line"><span class="comment">00100</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Chocolate"><a href="#Chocolate" class="headerlink" title="Chocolate"></a>Chocolate</h2><ul><li><p>$k\leq 200$，$n=1,m=k$</p><ul><li>直接一行 $1,1,1,\cdots 1$ 即可。</li></ul></li><li><p>$k\leq 40000$ 且 $k\bmod 200=1$ 的情况：</p><ul><li>$k=201$，$n=1,m=200$，直接一行 $2,1,1,\cdots 1$（只有第一个数为 $2$）即可。</li><li>$k=401$，$n=3,m=133$，第一行  $2,1,1,\cdots 1$（只有第一个数为 $2$），第二、三行  $1,1,1,\cdots 1$。</li><li>$k=601$，$n=2,m=200$，第一行 $2,2,2,\cdots 2$，第二行 $1,2,1,\cdots 1$（只有第二个数为 $2$）。</li><li>否则，$n=(k-1)/200-1,m=200$，第一行 $2,2,2,\cdots 2$，第二行 $2,1,1,\cdots 1$（只有第一个数为 $2$），剩下的行均为 $1,1,1,\cdots 1$。</li></ul></li><li><p>当上述情况都不满足时，且 $k&lt;400$：</p><ul><li>$k=301$，$n=13,m=23$，第一行第一个数为 $2$，网格中其它所有数均为 $1$。</li><li>否则，$n=\lfloor k/100\rfloor,m=100,y=k\bmod 100$，第一行前 $y-1(y&gt;0)$ 个数为 $2$，网格中其它所有数均为 $1$。</li></ul></li><li><p>当上述情况都不满足时，且 $k\leq 40000$：</p><ul><li>$n=\lfloor k/200\rfloor,m=200,y=k\bmod 200$，第一行前 $y-1(y&gt;0)$ 个数为 $2$，其它所有数均为 $1$。</li></ul></li><li><p>当上述情况都不满足时：</p><ul><li>首先，将 $k-=40000$。以下构造值域在 $[0,399]$ 之内。</li><li>从第一行开始从左到右将 $i(1\leq i<200)$ 位置改为 $200-i$，修改为 $199,198,\cdots$ 若修改后 $k>0$，那么修改，并将 $k$ 减去新增加的贡献（对于第一行为 $i+1$，最后一行为 $i-1$，其他行为 $i$）。</li><li>从上到下依次改每一行，有个坑点，就是在倒数第二行的时候，第一个位置修改成了 $199$，修改完后 $k=1$，那么第二个位置还是 $0$。</li><li>到最后一行的时候，第一个位置为贡献为 $0$，那么变为 $200$，第二个位置贡献为 $1$，那么变为 $199$。然后我们会发现，$199$ 和上面一行的 $0$ 产生了新的贡献。</li><li>所以我们需要保证每行的修改右边界单调递减。</li><li>其次，如果当前 $k$ 还不 $0$。那么从左往右考虑每一列，然后从上到下，第一个数 $+199$，第二个数 $+198$，以此类推，类似于行的情况，只是贡献固定为 $i$。</li><li>就做完了，输出的时候 $+1$ 即可。</li></ul></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> T,k,kk,a[<span class="number">810</span>][<span class="number">210</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (n&gt;<span class="number">200</span>||m&gt;<span class="number">200</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            ++res;</span><br><span class="line">            <span class="keyword">if</span> (j != m &amp;&amp; a[i][j] != a[i][j + <span class="number">1</span>]) ++res;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = j + <span class="number">2</span>; k &lt;= m; ++k)</span><br><span class="line">                <span class="keyword">if</span> (<span class="number">1L</span>L * (a[i][k] - a[i][k - <span class="number">1</span>]) * (a[i][k - <span class="number">1</span>] - a[i][k - <span class="number">2</span>]) &gt; <span class="number">0</span>) ++res;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (j != n &amp;&amp; a[j][i] != a[j + <span class="number">1</span>][i]) ++res;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = j + <span class="number">2</span>; k &lt;= n; ++k)</span><br><span class="line">                <span class="keyword">if</span> (<span class="number">1L</span>L * (a[k][i] - a[k - <span class="number">1</span>][i]) * (a[k - <span class="number">1</span>][i] - a[k - <span class="number">2</span>][i]) &gt; <span class="number">0</span>) ++res;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">cerr</span>&lt;&lt;res&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;kk&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve1</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;1 %d\n&quot;</span>,k);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;k;j++) <span class="built_in">printf</span>(<span class="string">&quot;1 &quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;1\n&quot;</span>);</span><br><span class="line">assert(check(<span class="number">1</span>,k)==kk);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve2</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (k==<span class="number">201</span>)&#123;</span><br><span class="line">a[<span class="number">1</span>][<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;1 200\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;<span class="number">200</span>;j++) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,a[<span class="number">1</span>][j]+<span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,a[<span class="number">1</span>][<span class="number">200</span>]+<span class="number">1</span>);</span><br><span class="line">assert(check(<span class="number">1</span>,<span class="number">200</span>)==kk);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (k==<span class="number">401</span>)&#123;</span><br><span class="line">a[<span class="number">1</span>][<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;3 133\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">3</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;<span class="number">133</span>;j++) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,a[i][j]+<span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,a[i][<span class="number">133</span>]+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">assert(check(<span class="number">3</span>,<span class="number">133</span>)==kk);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (k==<span class="number">601</span>)&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">200</span>;j++) a[<span class="number">1</span>][j]=<span class="number">1</span>;</span><br><span class="line">a[<span class="number">2</span>][<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;2 200\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">2</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;<span class="number">200</span>;j++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,a[i][j]+<span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,a[i][<span class="number">200</span>]+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">assert(check(<span class="number">2</span>,<span class="number">200</span>)==kk);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> x=k/<span class="number">200</span><span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">200</span>;j++) a[<span class="number">1</span>][j]=<span class="number">1</span>;</span><br><span class="line">a[<span class="number">2</span>][<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d 200\n&quot;</span>,x);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=x;i++)&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;<span class="number">200</span>;j++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,a[i][j]+<span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,a[i][<span class="number">200</span>]+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">assert(check(x,<span class="number">200</span>)==kk);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve3</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (k==<span class="number">301</span>)&#123;</span><br><span class="line">a[<span class="number">1</span>][<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;13 23\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">13</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;<span class="number">23</span>;j++) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,a[i][j]+<span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,a[i][<span class="number">23</span>]+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">assert(check(<span class="number">13</span>,<span class="number">23</span>)==kk);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> x=k/<span class="number">100</span>,y=k%<span class="number">100</span>;</span><br><span class="line"><span class="keyword">if</span> (y)&#123;</span><br><span class="line">y--;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=y;j++) a[<span class="number">1</span>][j]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d 100\n&quot;</span>,x);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=x;i++)&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;<span class="number">100</span>;j++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,a[i][j]+<span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,a[i][<span class="number">100</span>]+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">assert(check(x,<span class="number">100</span>)==kk);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve4</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x=k/<span class="number">200</span>,y=k%<span class="number">200</span>;</span><br><span class="line"><span class="keyword">if</span> (y)&#123;</span><br><span class="line">y--;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=y;j++) a[<span class="number">1</span>][j]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d 200\n&quot;</span>,x);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=x;i++)&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;<span class="number">200</span>;j++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,a[i][j]+<span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,a[i][<span class="number">200</span>]+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">assert(check(x,<span class="number">200</span>)==kk);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*void solve5()&#123;</span></span><br><span class="line"><span class="comment">int now=0,tmp;</span></span><br><span class="line"><span class="comment">for (int i=200;i&gt;=1;i--)&#123;</span></span><br><span class="line"><span class="comment">tmp=100*(i*i+202*i+2)+200;</span></span><br><span class="line"><span class="comment">cerr&lt;&lt;tmp&lt;&lt;&#x27; &#x27;&lt;&lt;now&lt;&lt;&#x27; &#x27;&lt;&lt;k&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">while (tmp+399+400+200+200&lt;=k)&#123;</span></span><br><span class="line"><span class="comment">for (int y=1;y&lt;=200;y++) a[now+1][y]=1;</span></span><br><span class="line"><span class="comment">for (int x=1;x&lt;=i;x++)</span></span><br><span class="line"><span class="comment">for (int y=1;y&lt;=200;y++)</span></span><br><span class="line"><span class="comment">a[now+x+1][y]=x+y+1;</span></span><br><span class="line"><span class="comment">now+=(i+1); k-=tmp;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">int nnn=1;</span></span><br><span class="line"><span class="comment">if ((k-400-200-200)%399==1) nnn=a[now][1]-1,k++;</span></span><br><span class="line"><span class="comment">while (k-400-200-200&gt;=399)&#123;</span></span><br><span class="line"><span class="comment">k-=399; now++;</span></span><br><span class="line"><span class="comment">for (int y=1;y&lt;=200;y++) a[now][y]=nnn+(y&amp;1);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">k-=400; now++;</span></span><br><span class="line"><span class="comment">for (int y=1;y&lt;=200;y++) a[now][y]=nnn+2;</span></span><br><span class="line"><span class="comment">k-=200; now++;</span></span><br><span class="line"><span class="comment">for (int y=1;y&lt;=200;y++) a[now][y]=nnn+2;</span></span><br><span class="line"><span class="comment">k-=200; now++;</span></span><br><span class="line"><span class="comment">for (int y=1;y&lt;=200;y++) a[now][y]=nnn+2;</span></span><br><span class="line"><span class="comment">if (k&gt;=200)&#123;</span></span><br><span class="line"><span class="comment">k-=200; now++;</span></span><br><span class="line"><span class="comment">for (int y=1;y&lt;=200;y++) a[now][y]=nnn+2;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">for (int y=1;y&lt;k;y++) a[now][y]++;</span></span><br><span class="line"><span class="comment">printf(&quot;%d 200\n&quot;,now);</span></span><br><span class="line"><span class="comment">for (int i=1;i&lt;=now;i++)&#123;</span></span><br><span class="line"><span class="comment">for (int j=1;j&lt;200;j++) printf(&quot;%d &quot;,a[i][j]);</span></span><br><span class="line"><span class="comment">printf(&quot;%d\n&quot;,a[i][200]);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">assert(check(now,200)==kk);</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve5</span><span class="params">()</span></span>&#123;</span><br><span class="line">k-=<span class="number">40000</span>; <span class="keyword">int</span> lst=<span class="number">200</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">200</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;lst;j++)&#123;</span><br><span class="line"><span class="keyword">if</span> (j+(i==<span class="number">1</span>)-(i==<span class="number">200</span>)&gt;k)&#123; lst=j; <span class="keyword">break</span>;&#125;</span><br><span class="line">a[i][j]=<span class="number">200</span>-j; k-=j+(i==<span class="number">1</span>)-(i==<span class="number">200</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*for (int i=1;i&lt;=200;i++)&#123;</span></span><br><span class="line"><span class="comment">for (int j=1;j&lt;200;j++)</span></span><br><span class="line"><span class="comment">printf(&quot;%d &quot;,a[i][j]+1);</span></span><br><span class="line"><span class="comment">printf(&quot;%d\n&quot;,a[i][200]+1);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">check(200,200);*/</span></span><br><span class="line"><span class="keyword">if</span> (k)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">200</span>;j++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">200</span>;i++)&#123;</span><br><span class="line"><span class="keyword">if</span> (i&gt;k) <span class="keyword">break</span>;</span><br><span class="line">a[i][j]+=<span class="number">200</span>-i; k-=i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;200 200&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">200</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;<span class="number">200</span>;j++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,a[i][j]+<span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,a[i][<span class="number">200</span>]+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">assert(check(<span class="number">200</span>,<span class="number">200</span>)==kk);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">freopen(<span class="string">&quot;choco.in&quot;</span>,<span class="string">&quot;r&quot;</span>,<span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">&quot;choco.out&quot;</span>,<span class="string">&quot;w&quot;</span>,<span class="built_in">stdout</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;T);</span><br><span class="line"><span class="keyword">while</span> (T--)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;k); kk=k;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">200</span>;i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">200</span>;j++)</span><br><span class="line">a[i][j]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (k&lt;=<span class="number">200</span>) solve1();</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (k%<span class="number">200</span>==<span class="number">1</span>&amp;&amp;k&lt;=<span class="number">40000</span>) solve2();</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (k&lt;<span class="number">400</span>) solve3();</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (k&lt;=<span class="number">40000</span>) solve4();</span><br><span class="line"><span class="keyword">else</span> solve5();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Paint&quot;&gt;&lt;a href=&quot;#Paint&quot; class=&quot;headerlink&quot; title=&quot;Paint&quot;&gt;&lt;/a&gt;Paint&lt;/h2&gt;&lt;h3 id=&quot;题解&quot;&gt;&lt;a href=&quot;#题解&quot; class=&quot;headerlink&quot; title=&quot;题解&quot;&gt;&lt;/a&gt;题</summary>
      
    
    
    
    <category term="NOI模拟赛" scheme="http://hydd.cf/categories/NOI%E6%A8%A1%E6%8B%9F%E8%B5%9B/"/>
    
    
  </entry>
  
  <entry>
    <title>正睿暑期AB班 题解</title>
    <link href="http://hydd.cf/2020/08/07/sol_11/"/>
    <id>http://hydd.cf/2020/08/07/sol_11/</id>
    <published>2020-08-06T16:00:00.000Z</published>
    <updated>2020-10-01T04:57:28.418Z</updated>
    
    <content type="html"><![CDATA[<h1 id="day1"><a href="#day1" class="headerlink" title="day1"></a>day1</h1><h2 id="B"><a href="#B" class="headerlink" title="B"></a>B</h2><ul><li>某奇怪的论文？<a href="https://www.academia.edu/7310919/Enumeration_of_0_1_matrices_avoiding_some_2x2_matrices。相当于原矩形不存在论文第一页中的">https://www.academia.edu/7310919/Enumeration_of_0_1_matrices_avoiding_some_2x2_matrices。相当于原矩形不存在论文第一页中的</a> $I$ 这个子矩阵（这里的子矩阵不需要连续，相当于选定 $x_1\neq x_2,y_1\neq y_2$，组合得到的 $4$ 个点就是子矩阵）。那么 Proposition2.2 中的 $B_n^{-k}$ 即为答案。</li><li>$NTT$ 求出斯特林数即可。</li><li>时间复杂度 $O(n\log n)$。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*********************************************************************</span></span><br><span class="line"><span class="comment">Problem:W2B</span></span><br><span class="line"><span class="comment">Author:hydd</span></span><br><span class="line"><span class="comment">Date:2020/7/28</span></span><br><span class="line"><span class="comment">*********************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> g=<span class="number">3</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">1100000</span>;</span><br><span class="line">ll fac[MAXN],inv[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">qpow</span><span class="params">(ll x,<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line">ll res=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (a)&#123;</span><br><span class="line"><span class="keyword">if</span> (a&amp;<span class="number">1</span>) res=res*x%Mod;</span><br><span class="line">x=x*x%Mod; a&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">S2</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> n,m,N,len,rev[MAXN];</span><br><span class="line">ll a[MAXN],b[MAXN],c[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getinv</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123; <span class="keyword">return</span> qpow(x,Mod<span class="number">-2</span>);&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">NTT</span><span class="params">(ll *a,<span class="keyword">int</span> inv)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line"><span class="keyword">if</span> (i&lt;rev[i]) swap(a[i],a[rev[i]]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> mid=<span class="number">1</span>;mid&lt;n;mid&lt;&lt;=<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">int</span> tmp=qpow(g,(Mod<span class="number">-1</span>)/(mid&lt;&lt;<span class="number">1</span>));</span><br><span class="line"><span class="keyword">if</span> (inv==<span class="number">-1</span>) tmp=getinv(tmp);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i+=mid*<span class="number">2</span>)&#123;</span><br><span class="line">ll omega=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (ll j=<span class="number">0</span>;j&lt;mid;j++,omega=omega*tmp%Mod)&#123;</span><br><span class="line"><span class="keyword">int</span> x=a[i+j],y=omega*a[i+j+mid]%Mod;</span><br><span class="line">a[i+j]=(x+y)%Mod,a[i+j+mid]=(x-y+Mod)%Mod;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> nnn)</span></span>&#123;</span><br><span class="line">n=nnn+<span class="number">1</span>; N=n;</span><br><span class="line">ll op=<span class="number">1</span>,mul=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span> (i) mul=mul*i%Mod;</span><br><span class="line">ll inv=getinv(mul);</span><br><span class="line">a[i]=inv*op%Mod;</span><br><span class="line">b[i]=qpow(i,n<span class="number">-1</span>)*inv%Mod;</span><br><span class="line">op=Mod-op;</span><br><span class="line">&#125;</span><br><span class="line">len=(n&lt;&lt;<span class="number">1</span>)<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">int</span> bit=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> ((<span class="number">1</span>&lt;&lt;bit)&lt;len) bit++;</span><br><span class="line">n=<span class="number">1</span>&lt;&lt;bit;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) rev[i]=(rev[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)&lt;&lt;(bit<span class="number">-1</span>));</span><br><span class="line">NTT(a,<span class="number">1</span>); NTT(b,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) a[i]=a[i]*b[i]%Mod;</span><br><span class="line">NTT(a,<span class="number">-1</span>);</span><br><span class="line">ll inv=getinv(n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++) c[i]=a[i]*inv%Mod;</span><br><span class="line">&#125;</span><br><span class="line">&#125; tmp1,tmp2;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">tmp1.main(n+<span class="number">1</span>); tmp2.main(m+<span class="number">1</span>);</span><br><span class="line">fac[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=min(n,m)+<span class="number">1</span>;i++) fac[i]=fac[i<span class="number">-1</span>]*i%Mod;</span><br><span class="line">ll ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;=min(n,m);k++)</span><br><span class="line">ans=(ans+fac[k]*fac[k]%Mod*tmp1.c[k+<span class="number">1</span>]%Mod*tmp2.c[k+<span class="number">1</span>])%Mod;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="A"><a href="#A" class="headerlink" title="A"></a>A</h2><ul><li>不难发现积水的区域形成了⼀个树状结构，树上的每个节点对应着⼀个连通块。每个区间都有⼀个高度范围，具体来说，范围是[该区间内的最大海拔，父区间的最大海拔]。 不难发现海绵一定放在叶子结点最优，所以海绵吸⾛的是⼀条从叶子到根的路径上的水。</li><li>问题相当于每次操作可以删去某个叶子到根的所有数字，要求删的数的和尽量大。删的⼀定是长链剖分上的⼀条链。若从高到低求树状结构，需要维护删去格子后的连通性，不好做。考虑从低到高加入格子，用并查集维护连通块，这样可以很方便地得知当前格子将哪些连通块并成了⼀个大连通块。</li><li>复杂度 $O(nm\log nm)$。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*********************************************************************</span></span><br><span class="line"><span class="comment">Problem:H2O</span></span><br><span class="line"><span class="comment">Author:hydd</span></span><br><span class="line"><span class="comment">Date:2020/7/28</span></span><br><span class="line"><span class="comment">*********************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> File(x) freopen(x<span class="meta-string">&quot;.in&quot;</span>,<span class="meta-string">&quot;r&quot;</span>,stdin);freopen(x<span class="meta-string">&quot;.out&quot;</span>,<span class="meta-string">&quot;w&quot;</span>,stdout);</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">int</span> n,m,K,fa[<span class="number">1100000</span>],sz[<span class="number">1100000</span>],mxdep[<span class="number">1100000</span>];</span><br><span class="line"><span class="keyword">int</span> cnt; ll sum[<span class="number">1100000</span>],a[<span class="number">1100000</span>];</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dx[<span class="number">4</span>]=&#123;<span class="number">1</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dy[<span class="number">4</span>]=&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span>&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; son[<span class="number">1100000</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">hs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123; <span class="keyword">return</span> (x<span class="number">-1</span>)*m+y;&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findset</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x!=fa[x]) fa[x]=findset(fa[x]);</span><br><span class="line"><span class="keyword">return</span> fa[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Union</span><span class="params">(<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> y,<span class="keyword">int</span> d)</span></span>&#123;</span><br><span class="line">y=findset(y);</span><br><span class="line"><span class="keyword">if</span> (x==y) <span class="keyword">return</span>;</span><br><span class="line">sum[y]+=<span class="number">1l</span>l*sz[y]*(d-mxdep[y]); mxdep[y]=d;</span><br><span class="line"><span class="keyword">if</span> (sum[y]&gt;sum[x])&#123; <span class="keyword">int</span> tmp=x; x=y; y=tmp;&#125;</span><br><span class="line"><span class="keyword">if</span> (sum[x]) a[++cnt]=sum[y];</span><br><span class="line">fa[y]=x; sz[x]+=sz[y];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;n,&amp;m,&amp;K);</span><br><span class="line"><span class="keyword">int</span> u,mx=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;u);</span><br><span class="line">son[u].push_back(hs(i,j));</span><br><span class="line">mx=max(mx,u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=mx;i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> u:son[i])&#123;</span><br><span class="line"><span class="keyword">int</span> x=(u<span class="number">-1</span>)/m+<span class="number">1</span>,y=(u<span class="number">-1</span>)%m+<span class="number">1</span>;</span><br><span class="line">mxdep[u]=i; fa[u]=u;</span><br><span class="line"><span class="keyword">int</span> nx,ny;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;<span class="number">4</span>;k++)&#123;</span><br><span class="line">nx=x+dx[k]; ny=y+dy[k];</span><br><span class="line"><span class="keyword">if</span> (nx&lt;<span class="number">1</span>||nx&gt;n||ny&lt;<span class="number">1</span>||ny&gt;m||!mxdep[hs(nx,ny)]) <span class="keyword">continue</span>;</span><br><span class="line">Union(u,hs(nx,ny),i);</span><br><span class="line">&#125;</span><br><span class="line">sz[u]++;</span><br><span class="line">&#125;</span><br><span class="line">sort(a+<span class="number">1</span>,a+cnt+<span class="number">1</span>,greater&lt;<span class="keyword">int</span>&gt;());</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=cnt;i&gt;=<span class="number">1</span>;i--) a[i]+=a[i+<span class="number">1</span>];</span><br><span class="line">ll ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=K&amp;&amp;i&lt;=cnt;i++) ans^=a[i];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="day2"><a href="#day2" class="headerlink" title="day2"></a>day2</h1><h2 id="C"><a href="#C" class="headerlink" title="C"></a>C</h2><ul><li>写了很长时间的遗传，发现只有 $80pts$（而且 $7,8$ 跑了 $1000s$）。</li><li>然后发现暴力就可过？就是可以依次枚举，过程中记录每个点还能用哪些颜色。可以从度数大的开始枚举，这样得到的信息就比较多，每个位置可用颜色就比较少。然后就过了。</li><li>正解是先随机赋颜色。然后不停调整点的颜色使同色边尽可能小，有多种方案随机选。（如果长时间调整不出可以多换几个点的颜色，个人认为还是类似于遗传中的变异？）但由于数据水，不需要调整就过了。</li></ul><h2 id="A-1"><a href="#A-1" class="headerlink" title="A"></a>A</h2><ul><li>先讲讲一种奇怪的做法。</li><li>首先，我们考虑 $l$ 的答案，先将它往左延伸直到不能延伸，设延伸到了 $x$，然后再看后面能有多少个位置也可以加入，设加到了 $r$。</li><li>延伸的过程就是只要和当前的 $p$ 有一维相等，就延伸。否则若 $p$ 还有未确定的维，就选一个维，将它赋值成现在这个点的那一维。没有的话就不能延伸了。</li><li>那么 $[l,r]$ 为右端点的段最长只能到最左边的 $x$。然后继续考虑 $r+1$ 。</li><li>可以发现 $x$ 不会小于上一次的 $l$，所以每个段最多会经过两次（当前用 $r$ 经过一次，下一次用 $x$ 经过一次）。</li><li>时间复杂度 $O(n k! k)$。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*********************************************************************</span></span><br><span class="line"><span class="comment">Problem:stars</span></span><br><span class="line"><span class="comment">Author:hydd</span></span><br><span class="line"><span class="comment">Date:2020/7/29</span></span><br><span class="line"><span class="comment">*********************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> File(x) freopen(x<span class="meta-string">&quot;.in&quot;</span>,<span class="meta-string">&quot;r&quot;</span>,stdin);freopen(x<span class="meta-string">&quot;.out&quot;</span>,<span class="meta-string">&quot;w&quot;</span>,stdout);</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">int</span> n,K,a[<span class="number">110000</span>][<span class="number">6</span>],num[<span class="number">110000</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;K;i++)</span><br><span class="line"><span class="keyword">if</span> (a[u][i]==num[i]) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getl</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!u) <span class="keyword">return</span> u;</span><br><span class="line"><span class="keyword">if</span> (check(u)) <span class="keyword">return</span> getl(u<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">int</span> ans=u;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;K;i++)</span><br><span class="line"><span class="keyword">if</span> (num[i]==<span class="number">-1</span>)&#123;</span><br><span class="line">num[i]=a[u][i];</span><br><span class="line">ans=min(ans,getl(u<span class="number">-1</span>));</span><br><span class="line">num[i]=<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getr</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (u==n+<span class="number">1</span>) <span class="keyword">return</span> u;</span><br><span class="line"><span class="keyword">if</span> (check(u)) <span class="keyword">return</span> getr(u+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> ans=u;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;K;i++)</span><br><span class="line"><span class="keyword">if</span> (num[i]==<span class="number">-1</span>)&#123;</span><br><span class="line">num[i]=a[u][i];</span><br><span class="line">ans=max(ans,getr(u+<span class="number">1</span>));</span><br><span class="line">num[i]=<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;K);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;K;j++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i][j]);</span><br><span class="line"><span class="built_in">memset</span>(num,<span class="number">-1</span>,<span class="keyword">sizeof</span>(num));</span><br><span class="line">ll ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> l=<span class="number">1</span>,r;l&lt;=n;l=r+<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">int</span> x=getl(l)+<span class="number">1</span>;</span><br><span class="line">r=getr(x)<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=l;i&lt;=r;i++) ans+=(<span class="number">1l</span>l*(<span class="number">1</span>+i-x+<span class="number">1</span>)*(i-x+<span class="number">1</span>)&gt;&gt;<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>正解就是一个 $dp$，比较复杂，就不详细讲了。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*********************************************************************</span></span><br><span class="line"><span class="comment">Problem:stars</span></span><br><span class="line"><span class="comment">Author:hydd</span></span><br><span class="line"><span class="comment">Date:2020/7/29</span></span><br><span class="line"><span class="comment">*********************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">110000</span>][<span class="number">5</span>],vis[<span class="number">110000</span>],dp[<span class="number">110000</span>][<span class="number">410</span>],cnt;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; Now,p[<span class="number">410</span>],vec_S[<span class="number">410</span>],vec_SrT[<span class="number">410</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">p[cnt++]=Now;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++)</span><br><span class="line"><span class="keyword">if</span> (!vis[i])&#123;</span><br><span class="line">vis[i]=<span class="literal">true</span>; Now.push_back(i);</span><br><span class="line">dfs(k);</span><br><span class="line">vis[i]=<span class="literal">false</span>; Now.pop_back();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i][j]);</span><br><span class="line">dfs(m);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;cnt;i++)&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; S,SrT=p[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;(<span class="keyword">int</span>)p[i].size();j++)&#123;</span><br><span class="line">vec_S[i].push_back(find(p,p+cnt,S)-p);</span><br><span class="line">vec_SrT[i].push_back(find(p,p+cnt,SrT)-p);</span><br><span class="line"><span class="keyword">if</span> (j&lt;(<span class="keyword">int</span>)p[i].size()<span class="number">-1</span>) swap(SrT[j],SrT[j+<span class="number">1</span>]);</span><br><span class="line">S.push_back(SrT[j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ll ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++) dp[n+<span class="number">1</span>][i]=n+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=n;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line"><span class="keyword">int</span> r=i; dp[i][<span class="number">0</span>]=i;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;cnt;j++)&#123;</span><br><span class="line"><span class="keyword">int</span> flg=<span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;(<span class="keyword">int</span>)p[j].size()&amp;&amp;!flg;k++)</span><br><span class="line"><span class="keyword">if</span> (a[i][p[j][<span class="number">0</span>]]==a[dp[i+<span class="number">1</span>][vec_S[j][k]]][p[j][<span class="number">0</span>]])&#123;</span><br><span class="line">dp[i][j]=dp[i+<span class="number">1</span>][vec_SrT[j][k]];</span><br><span class="line">flg=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!flg) dp[i][j]=dp[i+<span class="number">1</span>][vec_S[j].back()];</span><br><span class="line">r=max(r,dp[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">ans+=(<span class="number">1l</span>l*(r-i)*(r-i+<span class="number">1</span>)&gt;&gt;<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="day3"><a href="#day3" class="headerlink" title="day3"></a>day3</h1><h2 id="A-2"><a href="#A-2" class="headerlink" title="A"></a>A</h2><ul><li>直接笛卡尔树，然后将前缀和取模加入哈希表。</li><li>每次枚举笛卡尔树上较短的一边，枚举答案，查询需要的值是不是在较大的一边出现即可。</li><li>时间复杂度 $O(n\log^2 n)$。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*********************************************************************</span></span><br><span class="line"><span class="comment">Problem:Good Subsegments</span></span><br><span class="line"><span class="comment">Author:hydd</span></span><br><span class="line"><span class="comment">Date:2020/7/30</span></span><br><span class="line"><span class="comment">*********************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> File(x) freopen(x<span class="meta-string">&quot;.in&quot;</span>,<span class="meta-string">&quot;r&quot;</span>,stdin);freopen(x<span class="meta-string">&quot;.out&quot;</span>,<span class="meta-string">&quot;w&quot;</span>,stdout);</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll Mod=<span class="number">1000000000000000003l</span>l;</span><br><span class="line"><span class="keyword">int</span> n,ans,a[<span class="number">210000</span>],pos[<span class="number">20</span>][<span class="number">210000</span>],Log2[<span class="number">210000</span>];</span><br><span class="line">ll b[<span class="number">210000</span>],sum[<span class="number">210000</span>];</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> hashMod=<span class="number">800009</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">hashMap</span>&#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">ll v; <span class="keyword">int</span> p;</span><br><span class="line">node()&#123;&#125;</span><br><span class="line">node(ll vv,<span class="keyword">int</span> pp)&#123; v=vv; p=pp;&#125;</span><br><span class="line">&#125; vet[<span class="number">210000</span>];</span><br><span class="line"><span class="keyword">int</span> edgenum,Next[<span class="number">210000</span>],Head[hashMod];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(ll v,<span class="keyword">int</span> p)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> u=v%hashMod;</span><br><span class="line">vet[++edgenum]=node(v,p);</span><br><span class="line">Next[edgenum]=Head[u];</span><br><span class="line">Head[u]=edgenum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(ll x)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> u=x%hashMod;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> e=Head[u];e;e=Next[e])</span><br><span class="line"><span class="keyword">if</span> (vet[e].v==x) <span class="keyword">return</span> vet[e].p;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; S;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">add</span><span class="params">(ll x,ll y)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x+y&gt;=Mod) <span class="keyword">return</span> x+y-Mod;</span><br><span class="line"><span class="keyword">return</span> x+y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">dec</span><span class="params">(ll x,ll y)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x&lt;y) <span class="keyword">return</span> x-y+Mod;</span><br><span class="line"><span class="keyword">return</span> x-y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">mul</span><span class="params">(ll x,ll y)</span></span>&#123;</span><br><span class="line">ll ret=x*y-((ll)((<span class="keyword">long</span> <span class="keyword">double</span>)x/Mod*y+<span class="number">0.5</span>))*Mod;</span><br><span class="line"><span class="keyword">return</span> (ret%Mod+Mod)%Mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RMQ_init</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) pos[<span class="number">0</span>][i]=i;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;(<span class="number">1</span>&lt;&lt;j)&lt;=n;j++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i+(<span class="number">1</span>&lt;&lt;j)<span class="number">-1</span>&lt;=n;i++)</span><br><span class="line"><span class="keyword">if</span> (a[pos[j<span class="number">-1</span>][i]]&gt;a[pos[j<span class="number">-1</span>][i+(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>))]]) pos[j][i]=pos[j<span class="number">-1</span>][i];</span><br><span class="line"><span class="keyword">else</span> pos[j][i]=pos[j<span class="number">-1</span>][i+(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>))];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">RMQ_query</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> k=Log2[r-l+<span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span> (a[pos[k][l]]&gt;a[pos[k][r-(<span class="number">1</span>&lt;&lt;k)+<span class="number">1</span>]]) <span class="keyword">return</span> pos[k][l];</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> pos[k][r-(<span class="number">1</span>&lt;&lt;k)+<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll x,<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line">ll res=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (a)&#123;</span><br><span class="line"><span class="keyword">if</span> (a&amp;<span class="number">1</span>) res=mul(res,x);</span><br><span class="line">x=mul(x,x); a&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (l==r) ans++;</span><br><span class="line"><span class="keyword">if</span> (l&gt;=r) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">int</span> x=RMQ_query(l,r);</span><br><span class="line"><span class="keyword">if</span> (x-l&lt;r-x)&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=x;i&gt;=l;i--)&#123;</span><br><span class="line">ll p=b[x],tmp; <span class="keyword">int</span> loc;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=<span class="number">19</span>;j++)&#123;</span><br><span class="line">tmp=add(p,sum[i<span class="number">-1</span>]);</span><br><span class="line">loc=S.find(tmp)<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">if</span> (x&lt;=loc&amp;&amp;loc&lt;=r) ans++;</span><br><span class="line">p=add(p,p);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=x;i&lt;=r;i++)&#123;</span><br><span class="line">ll p=b[x],tmp; <span class="keyword">int</span> loc;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=<span class="number">19</span>;j++)&#123;</span><br><span class="line">tmp=dec(sum[i],p);</span><br><span class="line">loc=S.find(tmp);</span><br><span class="line"><span class="keyword">if</span> (l&lt;=loc&amp;&amp;loc&lt;=x) ans++;</span><br><span class="line">p=add(p,p);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">solve(l,x<span class="number">-1</span>); solve(x+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">Log2[<span class="number">1</span>]=<span class="number">0</span>; <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=<span class="number">200000</span>;i++) Log2[i]=Log2[i&gt;&gt;<span class="number">1</span>]+<span class="number">1</span>;</span><br><span class="line">S.ins(<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]); b[i]=qpow(<span class="number">2</span>,a[i]);</span><br><span class="line">sum[i]=add(sum[i<span class="number">-1</span>],b[i]); S.ins(sum[i],i+<span class="number">1</span>);</span><br><span class="line"><span class="comment">//printf(&quot;%d\n&quot;,S.find(sum[i]));</span></span><br><span class="line">&#125;</span><br><span class="line">RMQ_init();</span><br><span class="line">solve(<span class="number">1</span>,n);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h2><ul><li>最优状态只能是 $(1,\frac{n+1}2+1),(2,\frac{n+1}2+2),\cdots,(\frac{n-1}2,n)$ 它们之间连边。</li><li>答案随便算即可。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*********************************************************************</span></span><br><span class="line"><span class="comment">Problem:Funny Cost</span></span><br><span class="line"><span class="comment">Author:hydd</span></span><br><span class="line"><span class="comment">Date:2020/7/30</span></span><br><span class="line"><span class="comment">*********************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> File(x) freopen(x<span class="meta-string">&quot;.in&quot;</span>,<span class="meta-string">&quot;r&quot;</span>,stdin);freopen(x<span class="meta-string">&quot;.out&quot;</span>,<span class="meta-string">&quot;w&quot;</span>,stdout);</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">int</span> n,a[<span class="number">210000</span>];</span><br><span class="line">ll fac[<span class="number">210000</span>],inv[<span class="number">210000</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">C</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (n&lt;m) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> fac[n]*inv[m]%Mod*inv[n-m]%Mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">fac[<span class="number">0</span>]=<span class="number">1</span>; <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">200000</span>;i++) fac[i]=fac[i<span class="number">-1</span>]*i%Mod;</span><br><span class="line">inv[<span class="number">1</span>]=<span class="number">1</span>; <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=<span class="number">200000</span>;i++) inv[i]=(Mod-Mod/i)*inv[Mod%i]%Mod;</span><br><span class="line">inv[<span class="number">0</span>]=<span class="number">1</span>; <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">200000</span>;i++) inv[i]=inv[i<span class="number">-1</span>]*inv[i]%Mod;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">sort(a+<span class="number">1</span>,a+n+<span class="number">1</span>); ll ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) ans=(ans+<span class="number">1l</span>l*C(i<span class="number">-1</span>,(n<span class="number">-1</span>)/<span class="number">2</span>)*a[i])%Mod;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,<span class="number">1l</span>l*fac[(n+<span class="number">1</span>)/<span class="number">2</span>]*fac[(n+<span class="number">1</span>)/<span class="number">2</span>]%Mod*ans%Mod);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="day4"><a href="#day4" class="headerlink" title="day4"></a>day4</h1><h2 id="C-2"><a href="#C-2" class="headerlink" title="C"></a>C</h2><ul><li>我们选择一个素数 $p$，若 $i,j$ 不满足 $x_ix_j+y_iy_j\equiv k\pmod p$ ，那么必没有 $x_ix_j+y_iy_j=k$。</li><li>先求出满足 $0\leq a,b,c,d&lt;p$ 的四元组 $(a,b,c,d)$，那么若有 $x_ix_j+y_iy_j\equiv k\pmod p$，必存在 $a,b,c,d$，满足 $(x_i\bmod p,y_i\bmod p,x_j\bmod p,y_j\bmod p)=(a,b,c,d)$ 。</li><li>那么，我们将所有 $(x_i\bmod p,y_i\bmod p)$ 加入数组。然后枚举所有 $(a,b,c,d)$，对于 $(x_i\bmod p,y_i\bmod p)=(a,b),(x_j\bmod p,y_i\bmod p)=(c,d)$ 再暴力判断。</li><li>尝试可以发现 $p=97$ 较优。注意，不需要枚举 $d$，因为 $d\equiv -\frac{ac}b \pmod b$。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*********************************************************************</span></span><br><span class="line"><span class="comment">Problem:Exercise</span></span><br><span class="line"><span class="comment">Author:hydd</span></span><br><span class="line"><span class="comment">Date:2020/7/31</span></span><br><span class="line"><span class="comment">*********************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> File(x) freopen(x<span class="meta-string">&quot;.in&quot;</span>,<span class="meta-string">&quot;r&quot;</span>,stdin);freopen(x<span class="meta-string">&quot;.out&quot;</span>,<span class="meta-string">&quot;w&quot;</span>,stdout);</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Mod=<span class="number">97</span>;</span><br><span class="line"><span class="keyword">int</span> n,A[<span class="number">210000</span>],B[<span class="number">210000</span>];</span><br><span class="line"><span class="keyword">int</span> edgenum,vet[<span class="number">210000</span>],Next[<span class="number">210000</span>],Head[Mod*Mod];</span><br><span class="line">ll k;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">Getchar</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> now[<span class="number">1</span>&lt;&lt;<span class="number">20</span>],*S,*T;</span><br><span class="line"><span class="keyword">if</span> (T==S)&#123;</span><br><span class="line">T=(S=now)+fread(now,<span class="number">1</span>,<span class="number">1</span>&lt;&lt;<span class="number">20</span>,<span class="built_in">stdin</span>);</span><br><span class="line"><span class="keyword">if</span> (T==S) <span class="keyword">return</span> EOF;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> *S++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> ch=Getchar();</span><br><span class="line"><span class="keyword">while</span> (ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">if</span> (ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">-1</span>;</span><br><span class="line">ch=Getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (ch&lt;=<span class="string">&#x27;9&#x27;</span>&amp;&amp;ch&gt;=<span class="string">&#x27;0&#x27;</span>) x=x*<span class="number">10</span>+ch-<span class="string">&#x27;0&#x27;</span>,ch=Getchar();</span><br><span class="line"><span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">readll</span><span class="params">()</span></span>&#123;</span><br><span class="line">ll x=<span class="number">0</span>,f=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> ch=Getchar();</span><br><span class="line"><span class="keyword">while</span> (ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">if</span> (ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">-1</span>;</span><br><span class="line">ch=Getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (ch&lt;=<span class="string">&#x27;9&#x27;</span>&amp;&amp;ch&gt;=<span class="string">&#x27;0&#x27;</span>) x=x*<span class="number">10</span>+ch-<span class="string">&#x27;0&#x27;</span>,ch=Getchar();</span><br><span class="line"><span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!y) <span class="keyword">return</span> x;</span><br><span class="line"><span class="keyword">return</span> gcd(y,x%y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">hs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x%Mod*Mod+y%Mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">vet[++edgenum]=v;</span><br><span class="line">Next[edgenum]=Head[u];</span><br><span class="line">Head[u]=edgenum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (a)&#123;</span><br><span class="line">        <span class="keyword">if</span> (a&amp;<span class="number">1</span>) res=res*x%Mod;</span><br><span class="line">        x=x*x%Mod; a&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> c,<span class="keyword">int</span> d)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> ((a*c+b*d)%Mod!=k%Mod) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">int</span> p=a*Mod+b,q=c*Mod+d,x,y;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> u=Head[p];u;u=Next[u])</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> v=Head[q];v;v=Next[v])&#123;</span><br><span class="line">x=vet[u]; y=vet[v];</span><br><span class="line"><span class="keyword">if</span> (<span class="number">1l</span>l*A[x]*A[y]+<span class="number">1l</span>l*B[x]*B[y]==k)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>,x,y);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> a=<span class="number">0</span>;a&lt;Mod;++a)&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> b=<span class="number">1</span>;b&lt;Mod;++b)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> c=<span class="number">0</span>;c&lt;Mod;++c)&#123;</span><br><span class="line"><span class="keyword">int</span> d=(<span class="number">1l</span>l*(k%Mod-a*c)*qpow(b,Mod<span class="number">-2</span>)%Mod+Mod)%Mod;</span><br><span class="line">calc(a,b,c,d);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> b=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> c=<span class="number">0</span>;c&lt;Mod;++c)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> d=<span class="number">0</span>;d&lt;Mod;++d)</span><br><span class="line">calc(a,b,c,d);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//File(&quot;data2&quot;);</span></span><br><span class="line">n=read(); k=readll();</span><br><span class="line"><span class="keyword">int</span> g;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">A[i]=read(); B[i]=read();</span><br><span class="line">g=gcd(A[i],B[i]);</span><br><span class="line"><span class="keyword">if</span> (k%g) <span class="keyword">continue</span>;</span><br><span class="line">addedge(hs(A[i],B[i]),i);</span><br><span class="line">&#125;</span><br><span class="line">work();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="B-1"><a href="#B-1" class="headerlink" title="B"></a>B</h2><ul><li>首先我们设 $dp_i$ 表示前 $i$ 个数分段排好序的最小代价，$dp_i=x+\min_{j&lt;i}dp_j+calc(j+1,i)$。（其中 $calc(l,r)$ 表示 $a_l,a_{l+1},\cdots,a_r$ 的逆序对数。</li><li>首先，根据 $dp$ 的定义，可以显然的发现决策单调性。证明的话可以直接考虑所有 $dp_j(j&lt;i)$ 的 $dp_i$ 的贡献，显然随着 $i$ 增大，$\Delta dp_1\geq \Delta dp_2\geq \cdots \geq \Delta dp_{i-1}$。那么显然是决策单调的。</li><li>但是，由于是 $1D$ 的 $dp$，后面的 $dp$ 值依赖前面的 $dp$ 值。但是我们可以类似于分治 $FFT$ 那样，外面套一层 $CDQ$ 分治，再递归的过程中，求出了 $[l,mid]$ 的 $dp$ 值，先将 $[mid+1,r]$ 通过 $[l,mid]$ 更新，然后继续递归 $[mid+1,r]$ 求出 $dp$ 值。 $[mid+1,r]$ 通过 $[l,mid]$ 更新的时候，前面的 $dp$ 值就已经算出来了，可以直接分治。</li><li>维护逆序对数可以类似于莫队一样的移动，可以证明移动的步数是 $O(n\log n)$ 级别。每次移动暴力树状数组插入删除，时间复杂度 $O(\log n)$。</li><li>总时间复杂度 $O(n \log^3 n)$。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*********************************************************************</span></span><br><span class="line"><span class="comment">Problem:Dispatch Money</span></span><br><span class="line"><span class="comment">Author:hydd</span></span><br><span class="line"><span class="comment">Date:2020/7/31</span></span><br><span class="line"><span class="comment">*********************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> File(x) freopen(x<span class="meta-string">&quot;.in&quot;</span>,<span class="meta-string">&quot;r&quot;</span>,stdin);freopen(x<span class="meta-string">&quot;.out&quot;</span>,<span class="meta-string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ADD_Left() L--,num+=R-L-query(p[L]),add(p[L],1);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ADD_Right() R++,num+=query(p[R]),add(p[R],1);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DEL_Left() add(p[L],-1),num-=R-L-query(p[L]),L++;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DEL_Right() add(p[R],-1),num-=query(p[R]),R--;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll INF=<span class="number">1l</span>l&lt;&lt;<span class="number">60</span>;</span><br><span class="line"><span class="keyword">int</span> n,k,p[<span class="number">310000</span>],tree[<span class="number">310000</span>];</span><br><span class="line"><span class="keyword">int</span> L,R; ll num,f[<span class="number">310000</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (;x;x-=x&amp;-x) tree[x]+=y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (;x&lt;=n;x+=x&amp;-x) res+=tree[x];</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sol</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (l&gt;r) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>; </span><br><span class="line"><span class="keyword">while</span> (L&gt;x+<span class="number">1</span>) ADD_Left();</span><br><span class="line"><span class="keyword">while</span> (R&lt;mid) ADD_Right();</span><br><span class="line"><span class="keyword">while</span> (L&lt;x+<span class="number">1</span>) DEL_Left();</span><br><span class="line"><span class="keyword">while</span> (R&gt;mid) DEL_Right();</span><br><span class="line">ll now=f[mid]; <span class="keyword">int</span> m=x;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=x;i&lt;=y;i++)&#123;</span><br><span class="line"><span class="keyword">if</span> (f[i]+num+k&lt;now)&#123; now=f[i]+num+k; m=i;&#125;</span><br><span class="line">DEL_Left();</span><br><span class="line">&#125;</span><br><span class="line">f[mid]=now;</span><br><span class="line">sol(l,mid<span class="number">-1</span>,x,m); sol(mid+<span class="number">1</span>,r,m,y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (l==r) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">solve(l,mid);</span><br><span class="line">sol(mid+<span class="number">1</span>,r,l,mid);</span><br><span class="line">solve(mid+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;k);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;p[i]),f[i]=INF;</span><br><span class="line">L=<span class="number">1</span>; R=<span class="number">0</span>; solve(<span class="number">0</span>,n);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,f[n]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="A-3"><a href="#A-3" class="headerlink" title="A"></a>A</h2><ul><li>题目要求我们找到一个边集，使得所有顶点的度数 $\leq 2$，并且所有度数为 $1$ 的顶点都有标记，使得它们的权值和应该尽可能大。</li><li>让我们将每个顶点 $v$ 分成两个点 $(v,0)$ 和 $(v,1)$，并在 $(v,0)$ 和 $(v,1)$ 之间添加一条边权为 $0$ 的边。</li><li>$(u,v)$ 是白色边，在 $(u,0)$ 和 $(v,0)$ 之间添加一条边权为 $0$ 的边。</li><li>$(u,v)$ 是黑色边，在 $(u,1)$ 和 $(v,1)$ 之间添加一条边权为 $0$ 的边。</li><li>对于被标记的顶点 $v$，创建一个顶点 $(v,2)$，并在 $(v,2)$ 和 $(v,0)$ 之间以及 $(v,2)$ 和 $(v,1)$ 之间添加边，权重为 $w_v$。</li><li>直接最大权最大匹配即可。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DIST(e) (lab[e.u]+lab[e.v]-g[e.u][e.v].w*2)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1023</span>,INF=<span class="number">1e6</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> u,v,w;</span><br><span class="line">&#125; g[N][N];</span><br><span class="line"><span class="keyword">int</span> n,m,k,n_x,lab[N],match[N],slack[N],st[N],pa[N],flower_from[N][N],S[N],vis[N];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; flower[N];</span><br><span class="line"><span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">Getchar</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> now[<span class="number">1</span>&lt;&lt;<span class="number">20</span>],*S,*T;</span><br><span class="line"><span class="keyword">if</span> (T==S)&#123;</span><br><span class="line">T=(S=now)+fread(now,<span class="number">1</span>,<span class="number">1</span>&lt;&lt;<span class="number">20</span>,<span class="built_in">stdin</span>);</span><br><span class="line"><span class="keyword">if</span> (T==S) <span class="keyword">return</span> EOF;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> *S++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> ch=Getchar();</span><br><span class="line"><span class="keyword">while</span> (ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">if</span> (ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">-1</span>;</span><br><span class="line">ch=Getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (ch&lt;=<span class="string">&#x27;9&#x27;</span>&amp;&amp;ch&gt;=<span class="string">&#x27;0&#x27;</span>) x=x*<span class="number">10</span>+ch-<span class="string">&#x27;0&#x27;</span>,ch=Getchar();</span><br><span class="line"><span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update_slack</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!slack[x]||DIST(g[u][x])&lt;DIST(g[slack[x]][x])) slack[x]=u;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">set_slack</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">slack[x]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> u=<span class="number">1</span>;u&lt;=n;++u)</span><br><span class="line"><span class="keyword">if</span> (g[u][x].w&gt;<span class="number">0</span>&amp;&amp;st[u]!=x&amp;&amp;S[st[u]]==<span class="number">0</span>) update_slack(u,x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">q_push</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x&lt;=n) <span class="keyword">return</span> q.push_back(x);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;(<span class="keyword">int</span>)flower[x].size();i++) q_push(flower[x][i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">set_st</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">st[x]=b;</span><br><span class="line"><span class="keyword">if</span> (x&lt;=n) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;(<span class="keyword">int</span>)flower[x].size();++i) set_st(flower[x][i],b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_pr</span><span class="params">(<span class="keyword">int</span> b,<span class="keyword">int</span> xr)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> pr=find(flower[b].begin(),flower[b].end(),xr)-flower[b].begin();</span><br><span class="line"><span class="keyword">if</span> (pr%<span class="number">2</span>==<span class="number">1</span>)&#123;</span><br><span class="line">reverse(flower[b].begin()+<span class="number">1</span>,flower[b].end());</span><br><span class="line"><span class="keyword">return</span> (<span class="keyword">int</span>)flower[b].size()-pr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> pr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">set_match</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">match[u]=g[u][v].v;</span><br><span class="line"><span class="keyword">if</span> (u&lt;=n) <span class="keyword">return</span>;</span><br><span class="line">Edge e=g[u][v];</span><br><span class="line"><span class="keyword">int</span> xr=flower_from[u][e.u],pr=get_pr(u,xr);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;pr;++i) set_match(flower[u][i],flower[u][i^<span class="number">1</span>]);</span><br><span class="line">set_match(xr,v);</span><br><span class="line">rotate(flower[u].begin(),flower[u].begin()+pr,flower[u].end());</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">augment</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> xnv=st[match[u]];</span><br><span class="line">set_match(u,v);</span><br><span class="line"><span class="keyword">if</span> (!xnv) <span class="keyword">return</span>;</span><br><span class="line">set_match(xnv,st[pa[xnv]]);</span><br><span class="line">augment(st[pa[xnv]],xnv);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_lca</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> t=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (++t;u||v;swap(u,v))&#123;</span><br><span class="line"><span class="keyword">if</span> (u==<span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> (vis[u]==t) <span class="keyword">return</span> u;</span><br><span class="line">vis[u]=t;</span><br><span class="line">u=st[match[u]];</span><br><span class="line"><span class="keyword">if</span> (u) u=st[pa[u]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_blossom</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> lca,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> b=n+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (b&lt;=n_x&amp;&amp;st[b]) ++b;</span><br><span class="line"><span class="keyword">if</span> (b&gt;n_x) ++n_x;</span><br><span class="line">lab[b]=<span class="number">0</span>,S[b]=<span class="number">0</span>;</span><br><span class="line">match[b]=match[lca];</span><br><span class="line">flower[b].clear();</span><br><span class="line">flower[b].push_back(lca);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> x=u,y;x!=lca;x=st[pa[y]])</span><br><span class="line">flower[b].push_back(x),flower[b].push_back(y=st[match[x]]),q_push(y);</span><br><span class="line">reverse(flower[b].begin()+<span class="number">1</span>,flower[b].end());</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> x=v,y;x!=lca;x=st[pa[y]])</span><br><span class="line">flower[b].push_back(x),flower[b].push_back(y=st[match[x]]),q_push(y);</span><br><span class="line">set_st(b,b);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> x=<span class="number">1</span>;x&lt;=n_x;++x) g[b][x].w=g[x][b].w=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> x=<span class="number">1</span>;x&lt;=n;++x) flower_from[b][x]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;(<span class="keyword">int</span>)flower[b].size();++i)&#123;</span><br><span class="line"><span class="keyword">int</span> xs=flower[b][i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> x=<span class="number">1</span>;x&lt;=n_x;++x)</span><br><span class="line"><span class="keyword">if</span> (g[b][x].w==<span class="number">0</span>||DIST(g[xs][x])&lt;DIST(g[b][x]))</span><br><span class="line">g[b][x]=g[xs][x],g[x][b]=g[x][xs];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> x=<span class="number">1</span>;x&lt;=n;++x)</span><br><span class="line"><span class="keyword">if</span> (flower_from[xs][x]) flower_from[b][x]=xs;</span><br><span class="line">&#125;</span><br><span class="line">set_slack(b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">expand_blossom</span><span class="params">(<span class="keyword">int</span> b)</span></span>&#123;<span class="comment">//S[b]==1</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;(<span class="keyword">int</span>)flower[b].size();++i)</span><br><span class="line">set_st(flower[b][i],flower[b][i]);</span><br><span class="line"><span class="keyword">int</span> xr=flower_from[b][g[b][pa[b]].u],pr=get_pr(b,xr);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;pr;i+=<span class="number">2</span>)&#123;</span><br><span class="line"><span class="keyword">int</span> xs=flower[b][i],xns=flower[b][i+<span class="number">1</span>];</span><br><span class="line">pa[xs]=g[xns][xs].u;</span><br><span class="line">S[xs]=<span class="number">1</span>,S[xns]=<span class="number">0</span>;</span><br><span class="line">slack[xs]=<span class="number">0</span>,set_slack(xns);</span><br><span class="line">q_push(xns);</span><br><span class="line">&#125;</span><br><span class="line">S[xr]=<span class="number">1</span>,pa[xr]=pa[b];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=pr+<span class="number">1</span>;i&lt;(<span class="keyword">int</span>)flower[b].size();++i)&#123;</span><br><span class="line"><span class="keyword">int</span> xs=flower[b][i];</span><br><span class="line">S[xs]=<span class="number">-1</span>,set_slack(xs);</span><br><span class="line">&#125;</span><br><span class="line">st[b]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">on_found_Edge</span><span class="params">(<span class="keyword">const</span> Edge &amp;e)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> u=st[e.u],v=st[e.v];</span><br><span class="line"><span class="keyword">if</span> (S[v]==<span class="number">-1</span>)&#123;</span><br><span class="line">pa[v]=e.u,S[v]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> nu=st[match[v]];</span><br><span class="line">slack[v]=slack[nu]=<span class="number">0</span>;</span><br><span class="line">S[nu]=<span class="number">0</span>,q_push(nu);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (S[v]==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">int</span> lca=get_lca(u,v);</span><br><span class="line"><span class="keyword">if</span> (!lca) <span class="keyword">return</span> augment(u,v),augment(v,u),<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> add_blossom(u,lca,v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">matching</span><span class="params">()</span></span>&#123;</span><br><span class="line">fill(S,S+n_x+<span class="number">1</span>,<span class="number">-1</span>),fill(slack,slack+n_x+<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">q.clear();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> x=<span class="number">1</span>;x&lt;=n_x;++x)</span><br><span class="line"><span class="keyword">if</span> (st[x]==x&amp;&amp;!match[x]) pa[x]=<span class="number">0</span>,S[x]=<span class="number">0</span>,q_push(x);</span><br><span class="line"><span class="keyword">if</span> (q.empty()) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (;;)&#123;</span><br><span class="line"><span class="keyword">while</span> (q.size())&#123;</span><br><span class="line"><span class="keyword">int</span> u=q.front();</span><br><span class="line">q.pop_front();</span><br><span class="line"><span class="keyword">if</span> (S[st[u]]==<span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> v=<span class="number">1</span>;v&lt;=n;++v)</span><br><span class="line"><span class="keyword">if</span> (g[u][v].w&gt;<span class="number">0</span>&amp;&amp;st[u]!=st[v])&#123;</span><br><span class="line"><span class="keyword">if</span> (DIST(g[u][v])==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">if</span> (on_found_Edge(g[u][v])) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> update_slack(u,st[v]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> d=<span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> b=n+<span class="number">1</span>;b&lt;=n_x;++b)</span><br><span class="line"><span class="keyword">if</span> (st[b]==b&amp;&amp;S[b]==<span class="number">1</span>) d=min(d,lab[b]/<span class="number">2</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> x=<span class="number">1</span>;x&lt;=n_x;++x)</span><br><span class="line"><span class="keyword">if</span> (st[x]==x&amp;&amp;slack[x])&#123;</span><br><span class="line"><span class="keyword">if</span> (S[x]==<span class="number">-1</span>) d=min(d,DIST(g[slack[x]][x]));</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (S[x]==<span class="number">0</span>) d=min(d,DIST(g[slack[x]][x])/<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> u=<span class="number">1</span>;u&lt;=n;++u)&#123;</span><br><span class="line"><span class="keyword">if</span> (S[st[u]]==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">if</span> (lab[u]&lt;=d) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">lab[u]-=d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (S[st[u]]==<span class="number">1</span>) lab[u]+=d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> b=n+<span class="number">1</span>;b&lt;=n_x;++b)</span><br><span class="line"><span class="keyword">if</span> (st[b]==b)&#123;</span><br><span class="line"><span class="keyword">if</span> (S[st[b]]==<span class="number">0</span>) lab[b]+=d*<span class="number">2</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (S[st[b]]==<span class="number">1</span>) lab[b]-=d*<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">q.clear();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> x=<span class="number">1</span>;x&lt;=n_x;++x)</span><br><span class="line"><span class="keyword">if</span> (st[x]==x&amp;&amp;slack[x]&amp;&amp;st[slack[x]]!=x&amp;&amp;DIST(g[slack[x]][x])==<span class="number">0</span>)</span><br><span class="line"><span class="keyword">if</span> (on_found_Edge(g[slack[x]][x])) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> b=n+<span class="number">1</span>;b&lt;=n_x;++b)</span><br><span class="line"><span class="keyword">if</span> (st[b]==b&amp;&amp;S[b]==<span class="number">1</span>&amp;&amp;lab[b]==<span class="number">0</span>) expand_blossom(b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">pair&lt;ll,int&gt; weight_blossom()&#123;</span><br><span class="line">fill(match,match+n+<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">n_x=n;</span><br><span class="line"><span class="keyword">int</span> n_matches=<span class="number">0</span>;</span><br><span class="line">ll tot_weight=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> u=<span class="number">0</span>;u&lt;=n;++u) st[u]=u,flower[u].clear();</span><br><span class="line"><span class="keyword">int</span> w_max=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> u=<span class="number">1</span>;u&lt;=n;++u)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> v=<span class="number">1</span>;v&lt;=n;++v)&#123;</span><br><span class="line">flower_from[u][v]=(u==v?u:<span class="number">0</span>);</span><br><span class="line">w_max=max(w_max,g[u][v].w);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> u=<span class="number">1</span>;u&lt;=n;++u) lab[u]=w_max;</span><br><span class="line"><span class="keyword">while</span> (matching()) ++n_matches;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> u=<span class="number">1</span>;u&lt;=n;++u)</span><br><span class="line"><span class="keyword">if</span> (match[u]&amp;&amp;match[u]&lt;u)</span><br><span class="line">tot_weight+=g[u][match[u]].w;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">make_pair</span>(tot_weight,n_matches);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">n=read(); m=read();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> u=<span class="number">1</span>;u&lt;=n+n+n;++u)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> v=<span class="number">1</span>;v&lt;=n+n+n;++v)</span><br><span class="line">g[u][v]=Edge&#123;u,v,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">g[i][i+n].w=INF*<span class="number">2</span>;</span><br><span class="line">g[i+n][i].w=INF*<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>,u,v,w;i&lt;m;++i)&#123;</span><br><span class="line">u=read(); v=read(); w=read();</span><br><span class="line">g[u+w*n][v+w*n].w=INF*<span class="number">2</span>;</span><br><span class="line">g[v+w*n][u+w*n].w=INF*<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">k=read();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>,x,v;i&lt;=k;++i)&#123;</span><br><span class="line">x=read(); v=read();</span><br><span class="line">g[x][x+n+n].w=max(INF+v,g[x][x+n+n].w);</span><br><span class="line">g[x+n+n][x].w=max(INF+v,g[x+n+n][x].w);</span><br><span class="line">g[x+n][x+n+n].w=max(INF+v,g[x][x+n+n].w);</span><br><span class="line">g[x+n+n][x+n].w=max(INF+v,g[x+n+n][x].w);</span><br><span class="line">&#125; </span><br><span class="line">n=n+n+n;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;weight_blossom().first%INF&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="day10"><a href="#day10" class="headerlink" title="day10"></a>day10</h1><h2 id="C-3"><a href="#C-3" class="headerlink" title="C"></a>C</h2><ul><li>一次操作可能对区间内的数没有实质性的改变，我们可以维护区间的数是否相同，如果相同则记录那个数，不同则记录为0。</li><li>那么若 相同的数|修改的值，那么说明本次修改对区间没有贡献，可以直接返回。</li><li>但是这个算法对于 2424242424242 这样的序列，修改的值为 $4,8,16\cdots$ 要递归到叶子节点才能返回，而且对序列没有任何改变。</li><li>所以我们可以不维护区间相同的数，记录区间的 $lcm$，对于某次修改如果 $lcm$|修改的值，那么本次修改对区间无贡献。可以直接返回。</li><li>注意 $lcm&gt;10^{18}$ 要特判。题解详细分析了复杂度，说明了复杂度是 $O((nw+m)(w+\log n))$ 的。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*********************************************************************</span></span><br><span class="line"><span class="comment">Problem:lxl题2</span></span><br><span class="line"><span class="comment">Author:hydd</span></span><br><span class="line"><span class="comment">Date:2020/8/6</span></span><br><span class="line"><span class="comment">*********************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls now&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs now&lt;&lt;1|1</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> uint;</span><br><span class="line"><span class="keyword">const</span> uint lim=<span class="number">-1u</span>;</span><br><span class="line"><span class="keyword">const</span> ull INF=<span class="number">2e18</span>;</span><br><span class="line"><span class="keyword">int</span> n,q;</span><br><span class="line">ull a[<span class="number">1610000</span>],tag[<span class="number">1610000</span>];</span><br><span class="line">uint sum[<span class="number">1610000</span>];</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">Getchar</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">char</span> now[<span class="number">1</span>&lt;&lt;<span class="number">20</span>],*S,*T;</span><br><span class="line">    <span class="keyword">if</span> (T==S)&#123;</span><br><span class="line">        T=(S=now)+fread(now,<span class="number">1</span>,<span class="number">1</span>&lt;&lt;<span class="number">20</span>,<span class="built_in">stdin</span>);</span><br><span class="line">        <span class="keyword">if</span> (T==S) <span class="keyword">return</span> EOF;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> *S++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> ch=Getchar();</span><br><span class="line">    <span class="keyword">while</span> (ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">-1</span>;</span><br><span class="line">        ch=Getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (ch&lt;=<span class="string">&#x27;9&#x27;</span>&amp;&amp;ch&gt;=<span class="string">&#x27;0&#x27;</span>) x=x*<span class="number">10</span>+ch-<span class="string">&#x27;0&#x27;</span>,ch=Getchar();</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ull <span class="title">readull</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ull x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> ch=Getchar();</span><br><span class="line">    <span class="keyword">while</span> (ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) ch=Getchar();</span><br><span class="line">    <span class="keyword">while</span> (ch&lt;=<span class="string">&#x27;9&#x27;</span>&amp;&amp;ch&gt;=<span class="string">&#x27;0&#x27;</span>) x=x*<span class="number">10</span>+ch-<span class="string">&#x27;0&#x27;</span>,ch=Getchar();</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ull <span class="title">gcd</span><span class="params">(ull a,ull b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!b) <span class="keyword">return</span> a;</span><br><span class="line">    <span class="keyword">return</span> gcd(b,a%b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ull <span class="title">lcm</span><span class="params">(ull x,ull y)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x==INF||y==INF) <span class="keyword">return</span> INF;</span><br><span class="line">ull g=gcd(x,y); x/=g;</span><br><span class="line"><span class="keyword">if</span> (x&gt;INF/y+<span class="number">1</span>) <span class="keyword">return</span> INF;</span><br><span class="line"><span class="keyword">if</span> (x*y&gt;=INF) <span class="keyword">return</span> INF;</span><br><span class="line"><span class="keyword">return</span> x*y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> now)</span></span>&#123;</span><br><span class="line">    sum[now]=sum[ls]+sum[rs];</span><br><span class="line">    tag[now]=lcm(tag[ls],tag[rs]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> now,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l==r)&#123;</span><br><span class="line">        tag[now]=a[l];</span><br><span class="line">        sum[now]=tag[now]&amp;lim;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    build(ls,l,mid); build(rs,mid+<span class="number">1</span>,r);</span><br><span class="line">    pushup(now);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> now,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x,<span class="keyword">int</span> y,ull v)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l==r)&#123;</span><br><span class="line">        tag[now]=gcd(tag[now],v);</span><br><span class="line">        sum[now]=tag[now]&amp;lim;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (x&lt;=l&amp;&amp;r&lt;=y)&#123;</span><br><span class="line">        <span class="keyword">if</span> (v%tag[now]) tag[now]=gcd(tag[now],v);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (x&lt;=mid) change(now&lt;&lt;<span class="number">1</span>,l,mid,x,y,v);</span><br><span class="line">    <span class="keyword">if</span> (y&gt;mid) change(now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,x,y,v);</span><br><span class="line">    pushup(now);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">uint <span class="title">query</span><span class="params">(<span class="keyword">int</span> now,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x&lt;=l&amp;&amp;r&lt;=y) <span class="keyword">return</span> sum[now];</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>; uint res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (x&lt;=mid) res+=query(now&lt;&lt;<span class="number">1</span>,l,mid,x,y);</span><br><span class="line">    <span class="keyword">if</span> (y&gt;mid) res+=query(now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,x,y);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    n=read(); q=read();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) a[i]=readull();</span><br><span class="line">    build(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">    <span class="keyword">int</span> op,l,r; ull x;</span><br><span class="line">    <span class="keyword">while</span> (q--)&#123;</span><br><span class="line">        op=read(); l=read(); r=read();</span><br><span class="line">        <span class="keyword">if</span> (op==<span class="number">1</span>)&#123;</span><br><span class="line">            x=readull();</span><br><span class="line">            change(<span class="number">1</span>,<span class="number">1</span>,n,l,r,x);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%u\n&quot;</span>,query(<span class="number">1</span>,<span class="number">1</span>,n,l,r));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;day1&quot;&gt;&lt;a href=&quot;#day1&quot; class=&quot;headerlink&quot; title=&quot;day1&quot;&gt;&lt;/a&gt;day1&lt;/h1&gt;&lt;h2 id=&quot;B&quot;&gt;&lt;a href=&quot;#B&quot; class=&quot;headerlink&quot; title=&quot;B&quot;&gt;&lt;/a&gt;B&lt;/h2&gt;&lt;u</summary>
      
    
    
    
    <category term="NOI模拟赛" scheme="http://hydd.cf/categories/NOI%E6%A8%A1%E6%8B%9F%E8%B5%9B/"/>
    
    
  </entry>
  
  <entry>
    <title>20200726 讲课</title>
    <link href="http://hydd.cf/2020/07/26/sol_12/"/>
    <id>http://hydd.cf/2020/07/26/sol_12/</id>
    <published>2020-07-25T16:00:00.000Z</published>
    <updated>2020-09-30T13:09:47.339Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CF710F"><a href="#CF710F" class="headerlink" title="CF710F"></a>CF710F</h2><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><ul><li>有一个字符串集合 $S$，有 $m$ 个操作，每种操作是以下三种中的一种。</li><li><code>1 str</code> 表示在 $S$ 中加入字符串 str。</li><li><code>2 str</code> 表示在 $S$ 中删除字符串 str。</li><li><code>3 str</code> 表示询问在 $S$ 中每个字符串在 str 中出现次数之和。</li><li>强制在线。 $m,\sum |str|\leq 3\times 10^5$.</li></ul><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><ul><li>首先我们可以发现，$S$ 中的每个字符串的贡献是互不影响的，也就是满足可减性。所以如果分别求出了 $1,2$ 操作各自的字符串集合，那么答案就是 $1$ 集合的答案 $-$ $2$ 集合的答案。</li><li>如何暴力求答案？将字符串集合建成 $AC$ 自动机，那么答案即为所有在 str 在树上走的路径上节点，它到根的 $fail$ 路径上的点的数量之和。（相当于现在当前右端点为 $i$ 的所有串一起算）</li><li>现在要加入一个字符串，怎么快速的维护 $fail$ 呢？</li><li>我们会发现并没有很好的维护方法，因为 $fail$ 不是按照增量法构造的。</li><li>所以只能暴力重构。现在需要是否有一种方案能以较少的重构次数来维护这个问题，那么我们想到了二进制分组。每次加入集合，先放入 $2^0$ 这个组。如果现在有两个 $2^k$ 的组，就将它们合并后暴力重构，得到一个 $2^{k+1}$ 的组。一直合并直到没有两个 $2^k$ 的组即可。</li><li>可以发现，每个字符串被合并一次后，所在的集合大小就会 $\times 2$，所以每个字符串最多会合并 $O(\log n)$ 次。</li><li>查询的时候，直接查询所有组的答案，求和即可。时间复杂度 $O(n\log n)$。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*********************************************************************</span></span><br><span class="line"><span class="comment">Problem:CF710F</span></span><br><span class="line"><span class="comment">Author:hydd</span></span><br><span class="line"><span class="comment">Date:2020/7/26</span></span><br><span class="line"><span class="comment">*********************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> File(x) freopen(x<span class="meta-string">&quot;.in&quot;</span>,<span class="meta-string">&quot;r&quot;</span>,stdin);freopen(x<span class="meta-string">&quot;.out&quot;</span>,<span class="meta-string">&quot;w&quot;</span>,stdout);</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> m,op;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">310000</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> tot,cnt[<span class="number">310000</span>],son[<span class="number">310000</span>][<span class="number">26</span>],ch[<span class="number">310000</span>][<span class="number">26</span>];</span><br><span class="line"><span class="keyword">int</span> top,rt[<span class="number">21</span>],sz[<span class="number">21</span>],que[<span class="number">310000</span>],fail[<span class="number">310000</span>],num[<span class="number">310000</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!x||!y) <span class="keyword">return</span> x|y;</span><br><span class="line">cnt[x]+=cnt[y];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++) son[x][i]=merge(son[x][i],son[y][i]);</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> head=<span class="number">1</span>,tail=<span class="number">0</span>;</span><br><span class="line">fail[x]=x;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)&#123;</span><br><span class="line">ch[x][i]=son[x][i];</span><br><span class="line"><span class="keyword">if</span> (ch[x][i])&#123;</span><br><span class="line">fail[ch[x][i]]=x;</span><br><span class="line">que[++tail]=ch[x][i];</span><br><span class="line">&#125; <span class="keyword">else</span> ch[x][i]=x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (head&lt;=tail)&#123;</span><br><span class="line"><span class="keyword">int</span> now=que[head++];</span><br><span class="line"><span class="comment">//if (now==3) puts(&quot;&quot;);</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)&#123;</span><br><span class="line">ch[now][i]=son[now][i];</span><br><span class="line"><span class="keyword">if</span> (ch[now][i])&#123;</span><br><span class="line">fail[ch[now][i]]=ch[fail[now]][i];</span><br><span class="line">que[++tail]=ch[now][i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> ch[now][i]=ch[fail[now]][i];</span><br><span class="line">&#125;</span><br><span class="line">num[now]=cnt[now]+num[fail[now]];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">char</span> *s)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line">rt[++top]=++tot; sz[top]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> x=tot;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span> (!son[x][s[i]-<span class="string">&#x27;a&#x27;</span>]) son[x][s[i]-<span class="string">&#x27;a&#x27;</span>]=++tot;</span><br><span class="line">x=son[x][s[i]-<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line">cnt[x]++;</span><br><span class="line"><span class="keyword">while</span> (top&gt;<span class="number">1</span>&amp;&amp;sz[top]==sz[top<span class="number">-1</span>])&#123;</span><br><span class="line">rt[top<span class="number">-1</span>]=merge(rt[top<span class="number">-1</span>],rt[top]); sz[top<span class="number">-1</span>]+=sz[top];</span><br><span class="line">top--;</span><br><span class="line">&#125;</span><br><span class="line">build(rt[top]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">char</span> *s)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=top;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> x=rt[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">x=ch[x][s[j]-<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">res+=num[x];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">&#125; T1,T2;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;m);</span><br><span class="line"><span class="keyword">while</span> (m--)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%s&quot;</span>,&amp;op,s+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (op==<span class="number">1</span>) T1.ins(s);</span><br><span class="line"><span class="keyword">if</span> (op==<span class="number">2</span>) T2.ins(s);</span><br><span class="line"><span class="keyword">if</span> (op==<span class="number">3</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,T1.query(s)-T2.query(s)),fflush(<span class="built_in">stdout</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">4</span></span><br><span class="line"><span class="comment">1 abc</span></span><br><span class="line"><span class="comment">2 abc</span></span><br><span class="line"><span class="comment">1 aba</span></span><br><span class="line"><span class="comment">3 abababc</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="CF700E"><a href="#CF700E" class="headerlink" title="CF700E"></a>CF700E</h2><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><ul><li>给定一个长度为 $n$ 的字符串 $S$，求一个最大的 $k$ 满足存在一个长为 $k$ 的字符串序列 $a$，使得序列中的每一个字符串都是 $S$ 的子串，且对于任意的 $1&lt;i\leq k$ 都有 $a_{i−1}$ 在 $a_i$ 中至少出现两次（允许重叠）。</li><li>$n\leq 200000$。</li></ul><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h3><ul><li>先把 $SAM$ 建出来。根据条件，那么 $a_{i-1}$ 的 $right$ 集合一定完全包含 $a_i$ 的 $right$ 集合，同时求出 $pos[i]$ 表示当前节点在原串右端点的位置。</li><li>那么我们需要先维护出 $right$ 集合，可以使用线段树合并的方式（父亲的 $right$ 集合为子节点的 $right$ 集合的并）。</li><li>然后我们可以考虑 $dp$。设 $g_s$ 表示满足条件的情况下， $s$ 最大能做 $a$ 的第几个数。</li><li>然后我们可以发现，同个节点表示的串，因为它们的 $right$ 集合相同，所以只考虑最长的串即可。（根据条件显然不可能同个节点的多个串都在 $a$ 中）。</li><li>于是我们可以设 $f_x$ 为 $x$ 节点表示的最长串，它最大能做 $a$ 的第几个数。</li><li>那么，转移方程为：$f[u]=1+\max_{v\texttt{在}u\texttt{中至少出现两次}} f[v]$。</li><li>我们看一下从上往下转移点之间的关系，由于 $right$ 集合的性质，如果当前点从某个祖先 $v$ 转移过来，那么 $v$ 显然已经在 $pos[u]$ 出现过一次。那么我们就只需要查询是否出现第二次。则此时的这一个有效区间为 $[pos[u]−len[u]+len[v],pos[u]−1]$，如果有值则说明出现了第二次。</li><li>设父亲节点的状态从 $vv$ 转移过来，那么 $u$ 只能从 $vv$ 或 $fa$ 转移过来。若有从 $vv$ 到 $fa$ 之间的一个点 $t$  转移过来，那么有 $[pos[u]−len[u]+len[t],pos[u]−1]$ 有值，而 $[pos[fa]-len[fa]+len[t],pos[fa]-1]$ 没有值，那么显然从 $fa$ 转移不会更劣。</li><li>若父亲状态的串在当前节点的串中出现两次，则由父亲状态转移过来，否则直接继承父亲的状态。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*********************************************************************</span></span><br><span class="line"><span class="comment">Problem:CF700E</span></span><br><span class="line"><span class="comment">Author:hydd</span></span><br><span class="line"><span class="comment">Date:2020/7/27</span></span><br><span class="line"><span class="comment">*********************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> S=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> z,n,cnt,a[<span class="number">410000</span>],c[<span class="number">410000</span>],len[<span class="number">410000</span>];</span><br><span class="line"><span class="keyword">int</span> f[<span class="number">410000</span>],g[<span class="number">410000</span>];</span><br><span class="line"><span class="keyword">int</span> link[<span class="number">410000</span>],trans[<span class="number">410000</span>][<span class="number">26</span>],num[<span class="number">410000</span>];</span><br><span class="line"><span class="keyword">int</span> treesize,ls[<span class="number">11000000</span>],rs[<span class="number">11000000</span>],rt[<span class="number">410000</span>];</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">410000</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> &amp;now,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!now) now=++treesize;</span><br><span class="line"><span class="keyword">if</span> (l==r) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (x&lt;=mid) change(ls[now],l,mid,x);</span><br><span class="line"><span class="keyword">else</span> change(rs[now],mid+<span class="number">1</span>,r,x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!x||!y) <span class="keyword">return</span> x|y;</span><br><span class="line"><span class="keyword">int</span> z=++treesize;</span><br><span class="line">ls[z]=merge(ls[x],ls[y]);</span><br><span class="line">rs[z]=merge(rs[x],rs[y]);</span><br><span class="line"><span class="keyword">return</span> z;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> now,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!now) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (l==x&amp;&amp;r==y) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (y&lt;=mid) <span class="keyword">return</span> query(ls[now],l,mid,x,y);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (x&gt;mid) <span class="keyword">return</span> query(rs[now],mid+<span class="number">1</span>,r,x,y);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> query(ls[now],l,mid,x,mid)||query(rs[now],mid+<span class="number">1</span>,r,mid+<span class="number">1</span>,y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> loc)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> c=s[loc]-<span class="string">&#x27;a&#x27;</span>,v=z;</span><br><span class="line">z=++cnt; len[z]=loc; num[z]=loc;</span><br><span class="line"><span class="keyword">for</span> (;v&amp;&amp;!trans[v][c];v=link[v]) trans[v][c]=z;</span><br><span class="line"><span class="keyword">if</span> (!v) link[z]=S;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">int</span> x=trans[v][c];</span><br><span class="line"><span class="keyword">if</span> (len[v]+<span class="number">1</span>==len[x]) link[z]=x;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> y=++cnt; len[y]=len[v]+<span class="number">1</span>; num[y]=num[z];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++) trans[y][i]=trans[x][i];</span><br><span class="line">link[y]=link[x]; link[x]=y; link[z]=y;</span><br><span class="line"><span class="keyword">for</span> (;trans[v][c]==x;v=link[v]) trans[v][c]=y;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">z=<span class="number">1</span>; cnt=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) add(i),change(rt[z],<span class="number">1</span>,n,i);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++) c[len[i]]++;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++) c[i]+=c[i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++) a[c[len[i]]--]=i;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=cnt;i&gt;=<span class="number">2</span>;i--)</span><br><span class="line">rt[link[a[i]]]=merge(rt[link[a[i]]],rt[a[i]]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=cnt;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> x=a[i],y=link[x];</span><br><span class="line"><span class="keyword">if</span> (y==<span class="number">1</span>)&#123;</span><br><span class="line">f[x]=<span class="number">1</span>; g[x]=x;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> t=query(rt[g[y]],<span class="number">1</span>,n,num[x]-len[x]+len[g[y]],num[x]<span class="number">-1</span>);</span><br><span class="line">f[x]=f[y]+t; g[x]=t?x:g[y];</span><br><span class="line">ans=max(ans,f[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s+<span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,solve());</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;CF710F&quot;&gt;&lt;a href=&quot;#CF710F&quot; class=&quot;headerlink&quot; title=&quot;CF710F&quot;&gt;&lt;/a&gt;CF710F&lt;/h2&gt;&lt;h3 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="字符串" scheme="http://hydd.cf/categories/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    
  </entry>
  
  <entry>
    <title>20200718 讲课</title>
    <link href="http://hydd.cf/2020/07/18/sol_13/"/>
    <id>http://hydd.cf/2020/07/18/sol_13/</id>
    <published>2020-07-17T16:00:00.000Z</published>
    <updated>2020-09-30T13:25:26.945Z</updated>
    
    <content type="html"><![CDATA[<h2 id="bzoj2563"><a href="#bzoj2563" class="headerlink" title="bzoj2563"></a>bzoj2563</h2><ul><li>在既有边权且又有点权比较难做，我们可以将边权分配到点权上。</li><li>我们把边权的一半分别放到相邻两个点的点权上，这样若两个点不属于同一集合，相减后这条边的贡献为 $0$，而属于同一集合的贡献为原边权。最后两个人显然是从大到小取的。</li><li>实现时可以把所有权值都乘 $2$。输出的时候再除以 $2$ 即可。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*********************************************************************</span></span><br><span class="line"><span class="comment">Problem:bzoj2563</span></span><br><span class="line"><span class="comment">Author:hydd</span></span><br><span class="line"><span class="comment">Date:2020/7/18</span></span><br><span class="line"><span class="comment">*********************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> File(x) freopen(x<span class="meta-string">&quot;.in&quot;</span>,<span class="meta-string">&quot;r&quot;</span>,stdin);freopen(x<span class="meta-string">&quot;.out&quot;</span>,<span class="meta-string">&quot;w&quot;</span>,stdout);</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,u,v,cost;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">110000</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">a[i]&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;u,&amp;v,&amp;cost);</span><br><span class="line">a[u]+=cost; a[v]+=cost;</span><br><span class="line">&#125;</span><br><span class="line">sort(a+<span class="number">1</span>,a+n+<span class="number">1</span>,greater&lt;<span class="keyword">int</span>&gt;());</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">if</span> (i&amp;<span class="number">1</span>) ans+=a[i];</span><br><span class="line"><span class="keyword">else</span> ans-=a[i];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans&gt;&gt;<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CF1221E"><a href="#CF1221E" class="headerlink" title="CF1221E"></a>CF1221E</h2><ul><li>求出所有 $.$ 段的长度后分类讨论。</li><li>1：$len&lt;b$，先后手都不能选。</li><li>2：$b\leq len&lt;a$，这种线段只有后手能选，所以后手必胜（因为先手能选的位置后手也能选，若先手没有能选的位置，那么后手选这个，先手就输了）。</li><li>3：$a\leq len&lt;2b$，这种线段先后手都能选且只能选一次。</li><li>4：$len&gt;2b$，这种线段如果有两个以上，那么后手一定可以切一次，留下长度为 $[b,a)$ 的段。只出现了一次，先手就可能先将它破坏掉，使它剩下情况1或情况3的两段。</li></ul><ul><li>具体实现：</li><li>先看有没有情况2，然后看情况4的数量，判断掉非法情况。</li><li>如果情况4没有就可以直接判断种类3的奇偶性。</li><li>否则枚举先手把情况4分成哪两段，然后再判断一下种类3的奇偶性即可。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*********************************************************************</span></span><br><span class="line"><span class="comment">Problem:CF1221E</span></span><br><span class="line"><span class="comment">Author:hydd</span></span><br><span class="line"><span class="comment">Date:2020/7/18</span></span><br><span class="line"><span class="comment">*********************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> File(x) freopen(x<span class="meta-string">&quot;.in&quot;</span>,<span class="meta-string">&quot;r&quot;</span>,stdin);freopen(x<span class="meta-string">&quot;.out&quot;</span>,<span class="meta-string">&quot;w&quot;</span>,stdout);</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> T,a,b,n,cnt,v[<span class="number">1100000</span>];</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">1100000</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> tot=<span class="number">0</span>,tot2=<span class="number">0</span>,tmp;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)&#123;</span><br><span class="line"><span class="keyword">if</span> (b&lt;=v[i]&amp;&amp;v[i]&lt;a) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (a&lt;=v[i]&amp;&amp;v[i]&lt;<span class="number">2</span>*b) tot++;</span><br><span class="line"><span class="keyword">if</span> (v[i]&gt;=<span class="number">2</span>*b) tmp=v[i],tot2++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (tot2==<span class="number">0</span>) <span class="keyword">return</span> tot&amp;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (tot2&gt;<span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=tmp-a+<span class="number">1</span>;i++)&#123;<span class="comment">//1&lt;=i..i+a-1&lt;=tmp</span></span><br><span class="line"><span class="keyword">int</span> l=i<span class="number">-1</span>,r=tmp-(i+a<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">if</span> (l&gt;=<span class="number">2</span>*b||r&gt;=<span class="number">2</span>*b||(b&lt;=l&amp;&amp;l&lt;a)||(b&lt;=r&amp;&amp;r&lt;a)) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">int</span> d=(a&lt;=l&amp;&amp;l&lt;<span class="number">2</span>*b)+(a&lt;=r&amp;&amp;r&lt;<span class="number">2</span>*b);</span><br><span class="line"><span class="keyword">if</span> (!((tot+d)&amp;<span class="number">1</span>)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;T);</span><br><span class="line"><span class="keyword">while</span> (T--)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;a,&amp;b);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s); n=<span class="built_in">strlen</span>(s);</span><br><span class="line">cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>,j;i&lt;n;i=j+<span class="number">1</span>)&#123;</span><br><span class="line">j=i;</span><br><span class="line"><span class="keyword">while</span> (j&lt;n&amp;&amp;s[j]==<span class="string">&#x27;.&#x27;</span>) j++;</span><br><span class="line"><span class="keyword">if</span> (i!=j) v[++cnt]=j-i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (check()) <span class="built_in">puts</span>(<span class="string">&quot;YES&quot;</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">&quot;NO&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="异世界的文章分割者"><a href="#异世界的文章分割者" class="headerlink" title="异世界的文章分割者"></a>异世界的文章分割者</h2><ul><li>对 $t$ 建 $SAM$，求出每个节点 $right$ 集合中的最小值和最大值，并分别记为 $mn,mx$。</li><li>这个怎么求呢？我们知道该节点的 $right$ 集合=该节点所有儿子节点的 $right$ 集合的并集，所以我们可以从叶子节点往上更新。</li><li>设该节点代表的子串的长度区间为 $[l,r]$，并令 $w[i]=w(t[1,i],t[i+1,|t|])$。</li><li>容易发现该节点对 $w[mn..mx-r]$ 的贡献是 $r-l+1$。对 $w[mx-r+ 1..mx-l]$的贡献是首项为 $r-l$，公差为 $-1$ 的等差数列。因此可以通过二维差分处理出所有的 $w$。</li><li>故计算一次 $val(t)$ 的复杂度为 $O(|t|)$。</li><li>注意到左端点确定后,该段的权值随右端点增大而单调不降。因此可以二分答案,每次找尽可能靠后的右端点扩展。</li><li>用倍增优化找右端点的过程。</li><li>具体来说,每次右端点尝试移动 $2^0, 2^1,..$ 步。假设移动到 $2^k$ 时停止,再尝试移动 $2^{k-1}, ..,2^0$步。每次移动后都重新求一遍 $val(t)$。</li><li>该做法的正确性显然。</li><li>假设划分出的一段长度为 $L$，则在划分的过程中会尝试移动 $O(\log L)$ 次，每次求 $val(t)$ 的复杂度为 $O(L)$，因此划分一次的时间复杂度为 $O(|s|\log|s|)$。</li><li>总的时间复杂度为 $O(|s|log|s|\log MAXV)$。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*********************************************************************</span></span><br><span class="line"><span class="comment">Problem:异世界的文章分割者</span></span><br><span class="line"><span class="comment">Author:hydd</span></span><br><span class="line"><span class="comment">Date:2020/7/18 - 2020/7/19</span></span><br><span class="line"><span class="comment">*********************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> File(x) freopen(x<span class="meta-string">&quot;.in&quot;</span>,<span class="meta-string">&quot;r&quot;</span>,stdin);freopen(x<span class="meta-string">&quot;.out&quot;</span>,<span class="meta-string">&quot;w&quot;</span>,stdout);</span></span><br><span class="line"><span class="comment">//#define clr(arr) memset(arr,0,sizeof(arr))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,k,z,cnt; ll sum,ans,t[<span class="number">510000</span>],f[<span class="number">510000</span>];</span><br><span class="line"><span class="keyword">int</span> trans[<span class="number">510000</span>][<span class="number">30</span>],link[<span class="number">510000</span>],len[<span class="number">510000</span>],mn[<span class="number">510000</span>],mx[<span class="number">510000</span>];</span><br><span class="line"><span class="keyword">int</span> mns[<span class="number">510000</span>],mxs[<span class="number">510000</span>],c[<span class="number">510000</span>],a[<span class="number">510000</span>];</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">510000</span>],st[<span class="number">510000</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> c)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> v=z;</span><br><span class="line">z=++cnt; len[z]=len[v]+<span class="number">1</span>;</span><br><span class="line">mn[cnt]=INF; </span><br><span class="line"><span class="keyword">for</span> (;v&gt;=<span class="number">0</span>&amp;&amp;!trans[v][c];v=link[v]) trans[v][c]=z;</span><br><span class="line"><span class="keyword">if</span> (v==<span class="number">-1</span>) link[z]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">int</span> x=trans[v][c];</span><br><span class="line"><span class="keyword">if</span> (len[x]==len[v]+<span class="number">1</span>) link[z]=x;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">int</span> y=++cnt;</span><br><span class="line">mn[cnt]=INF; len[y]=len[v]+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++) trans[y][i]=trans[x][i];</span><br><span class="line">link[y]=link[x]; link[x]=y; link[z]=y;</span><br><span class="line"><span class="keyword">for</span> (;v&gt;=<span class="number">0</span>&amp;&amp;trans[v][c]==x;v=link[v]) trans[v][c]=y;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">work</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">m=<span class="number">0</span>; z=<span class="number">0</span>; cnt=<span class="number">0</span>; sum=<span class="number">0</span>; ans=<span class="number">0</span>;</span><br><span class="line"><span class="comment">//clr(trans); clr(link); clr(len);</span></span><br><span class="line"><span class="comment">//clr(mn); clr(mx); clr(mns); clr(mxs);</span></span><br><span class="line"><span class="comment">//clr(c); clr(t); clr(f); clr(a);</span></span><br><span class="line">link[<span class="number">0</span>]=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">change(s[i]-<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">mx[z]=i; mn[z]=i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++) sum+=(len[i]-len[link[i]]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=cnt;i++) c[len[i]]++;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=len[z];i++) c[i]+=c[i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=cnt;i++) a[c[len[i]]--]=i;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=cnt+<span class="number">1</span>;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line">mn[link[a[i]]]=min(mn[link[a[i]]],mn[a[i]]);</span><br><span class="line">mx[link[a[i]]]=max(mx[link[a[i]]],mx[a[i]]);</span><br><span class="line">mxs[a[i]]=len[a[i]]; mns[a[i]]=len[link[a[i]]]+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> l,r,x,y;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)&#123;</span><br><span class="line">l=mns[i]; r=mxs[i];</span><br><span class="line">x=max(mn[i],mx[i]-r+<span class="number">1</span>); y=mx[i]-l;</span><br><span class="line"><span class="keyword">if</span> (x==y)&#123; f[x]++; f[x+<span class="number">1</span>]--;&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (x&lt;y)&#123; t[x]+=(y-x+<span class="number">1</span>); t[x+<span class="number">1</span>]-=(y-x+<span class="number">2</span>); t[y+<span class="number">2</span>]++;&#125;</span><br><span class="line"><span class="keyword">if</span> (mn[i]&lt;=mx[i]-r)&#123; f[mn[i]]+=(r-l+<span class="number">1</span>); f[mx[i]-r+<span class="number">1</span>]-=(r-l+<span class="number">1</span>);&#125;</span><br><span class="line">&#125; </span><br><span class="line">ll s=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">s+=t[i];</span><br><span class="line">f[i]+=s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) f[i]+=f[i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=n<span class="number">-1</span>;i&gt;=<span class="number">1</span>;i--) ans+=<span class="number">1l</span>l*f[i]*f[i];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n+<span class="number">10</span>;i++) f[i]=<span class="number">0</span>,t[i]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=len[z]+<span class="number">10</span>;i++) c[i]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=cnt+<span class="number">10</span>;i++)&#123;</span><br><span class="line">mn[i]=<span class="number">0</span>,mx[i]=<span class="number">0</span>,mns[i]=<span class="number">0</span>,mxs[i]=<span class="number">0</span>,a[i]=<span class="number">0</span>,link[i]=<span class="number">0</span>,len[i]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">26</span>;j++) trans[i][j]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">File(<span class="string">&quot;article&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n); <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;k);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,st+<span class="number">1</span>);</span><br><span class="line">ll l=<span class="number">0</span>,r=<span class="number">1e18</span>,mid;</span><br><span class="line"><span class="keyword">while</span> (l&lt;r)&#123;</span><br><span class="line">mid=(l+r)&gt;&gt;<span class="number">1</span>; <span class="keyword">int</span> tot=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;)&#123;</span><br><span class="line"><span class="keyword">int</span> t=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;i+(<span class="number">1</span>&lt;&lt;j)<span class="number">-1</span>&lt;=n;j++)&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=(<span class="number">1</span>&lt;&lt;j);k++) s[k]=st[i+k<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">if</span> (work(<span class="number">1</span>&lt;&lt;j)&gt;mid) <span class="keyword">break</span>;</span><br><span class="line">t=j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> now=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=t;j&gt;=<span class="number">0</span>;j--)&#123;</span><br><span class="line"><span class="keyword">if</span> (i+(now|(<span class="number">1</span>&lt;&lt;j))<span class="number">-1</span>&gt;n) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=(now|(<span class="number">1</span>&lt;&lt;j));k++) s[k]=st[i+k<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">if</span> (work(now|(<span class="number">1</span>&lt;&lt;j))&lt;=mid) now|=(<span class="number">1</span>&lt;&lt;j);</span><br><span class="line">&#125;</span><br><span class="line">i+=now; tot++;</span><br><span class="line"><span class="keyword">if</span> (tot&gt;k) <span class="keyword">break</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">if</span> (tot&lt;=k) r=mid;</span><br><span class="line"><span class="keyword">else</span> l=mid+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,l);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">10 3</span></span><br><span class="line"><span class="comment">ababababab</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">15 2</span></span><br><span class="line"><span class="comment">abcabcddcbacbad</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;bzoj2563&quot;&gt;&lt;a href=&quot;#bzoj2563&quot; class=&quot;headerlink&quot; title=&quot;bzoj2563&quot;&gt;&lt;/a&gt;bzoj2563&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;在既有边权且又有点权比较难做，我们可以将边权分配到点权上。&lt;/li&gt;
&lt;li&gt;我</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>20200716 讲课</title>
    <link href="http://hydd.cf/2020/07/16/sol_14/"/>
    <id>http://hydd.cf/2020/07/16/sol_14/</id>
    <published>2020-07-15T16:00:00.000Z</published>
    <updated>2020-09-30T13:25:31.007Z</updated>
    
    <content type="html"><![CDATA[<h2 id="uoj424"><a href="#uoj424" class="headerlink" title="uoj424"></a>uoj424</h2><ul><li>按照老师的题解写的。</li><li>每次取最大，那么我们考虑对序列建笛卡尔树。两个序列同构，当且仅当它们的笛卡尔树形状相同。不同构的序列，和最长左链（某个节点到根的路径中，作为左儿子的次数 $+1$）不超过 $m$ 的笛卡尔树是一一对应的。反过来，用归纳法可以证明，一棵满足上述条件的笛卡尔树，必然能构造出对应的序列。</li><li><p>那么问题转化成求 $n$ 个节点且最长左链不超过 $m$ 的笛卡尔树数量。</p></li><li><p>通过多叉树转二叉树的方法（左儿子右兄弟），将 $n$ 个节点的二叉树与 $n+1$ 个节点的多叉树（要补一个根，否则可能不连通）一一对应，且二叉树的最长左链不超过 $m$，等价于其对应的多叉树的深度不超过 $m$（根节点深度为 $0$）。问题转化为求 $n+1$ 个节点深度不超过 $m$ 的多叉树数量。</p></li><li><p>将 $n+1$ 个节点多叉树的入栈出栈序看成括号序 $(X)$，其中 $X$ 是由 $n$ 对括号组成的合法括号序。将左括号看成 $+1$，右括号看成 $−1$，该多叉树深度不超过 $m$ 当且仅当括号序的每个前缀均不超过 $m$。问题转化为求 $n$ 对括号组成且前缀不超过 $m$ 的合法括号序数量。</p></li><li><p>用类似证明卡特兰数的方法，将其放到二维平面上，变为求从 $(0,0)$ 走到 $(2n,0)$，每次横坐标 $+1$，纵坐标 $+1$ 或 $−1$，且不经过 $y=m+1$ 和 $y=−1$ 的路径数量。这个可以用容斥来算。具体来说，设其先经过若干次 $y=m+1$，再经过若干次 $y=−1$，再经过若干次 $y=m+1$，如此类推。则把起点沿 $y=m+1$ 对称，再沿 $y=−1$ 对称，再沿 $y=m+1$ 对称，如此类推。再计算最终得到的起点到 $(2n,0)$ 的路径数量，就是对应的方案数。容斥系数为 $(-1)^\texttt{交错次数}$  。</p></li><li><p>时间复杂度 $O(n)$。</p></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*********************************************************************</span></span><br><span class="line"><span class="comment">Problem:uoj424</span></span><br><span class="line"><span class="comment">Author:hydd</span></span><br><span class="line"><span class="comment">Date:2020/7/16</span></span><br><span class="line"><span class="comment">*********************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> File(x) freopen(x<span class="meta-string">&quot;.in&quot;</span>,<span class="meta-string">&quot;r&quot;</span>,stdin);freopen(x<span class="meta-string">&quot;.out&quot;</span>,<span class="meta-string">&quot;w&quot;</span>,stdout);</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">pair</span>&lt;ll,ll&gt; pii;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">int</span> n,m; ll fac[<span class="number">210000</span>],inv[<span class="number">210000</span>];</span><br><span class="line"><span class="function">pii <span class="title">flip</span><span class="params">(pii x,ll c)</span></span>&#123; <span class="keyword">return</span> pii(x.second-c,x.first+c);&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">C</span><span class="params">(<span class="keyword">int</span> a,ll b)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (a&lt;b) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (b&lt;<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1l</span>l*fac[a]*inv[b]%Mod*inv[a-b]%Mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">if</span> (m&gt;n)&#123; <span class="built_in">puts</span>(<span class="string">&quot;0&quot;</span>); <span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">fac[<span class="number">0</span>]=<span class="number">1</span>; <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">200010</span>;i++) fac[i]=fac[i<span class="number">-1</span>]*i%Mod;</span><br><span class="line">inv[<span class="number">1</span>]=<span class="number">1</span>; <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=<span class="number">200010</span>;i++) inv[i]=(Mod-Mod/i)*inv[Mod%i]%Mod;</span><br><span class="line">inv[<span class="number">0</span>]=<span class="number">1</span>; <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">200010</span>;i++) inv[i]=inv[i<span class="number">-1</span>]*inv[i]%Mod;</span><br><span class="line">pii a(0,0),b(0,0);</span><br><span class="line"><span class="keyword">int</span> ans=C(<span class="number">2</span>*n,n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>,c=Mod<span class="number">-1</span>;i&lt;=n;i++,c=Mod-c)&#123;</span><br><span class="line"><span class="keyword">if</span> (i&amp;<span class="number">1</span>) a=flip(a,<span class="number">-1</span>),b=flip(b,m+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">else</span> a=flip(a,m+<span class="number">1</span>),b=flip(b,<span class="number">-1</span>);</span><br><span class="line">ans=(ans+<span class="number">1l</span>l*c*C(n*<span class="number">2</span>,n-a.first))%Mod;</span><br><span class="line">ans=(ans+<span class="number">1l</span>l*c*C(n*<span class="number">2</span>,n-b.first))%Mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CC-DEVLOCK"><a href="#CC-DEVLOCK" class="headerlink" title="CC DEVLOCK"></a>CC DEVLOCK</h2><ul><li>不同的位对数位和的贡献都是等价的，区别在于它们模 $p$ 的值。然而实际上不等价的只有 $p$ 类。</li><li>预处理出 $num_i$ 表示模 $p=i$ 的 $10^x$ 种数。然后对每一种去做个倍增 $FFT$，得到 $f_j$ 表示 $num_i$ 个 $0..9$，和为 $j$ 的方案数，倍增后的结果可以共用。</li><li>若第 $i$ 类有 $j$ 个，那么贡献就是 $ij \bmod p$。然后把 $p$ 类用二维 $FFT$ 乘起来起来。$p$ 这一维很小，暴力卷积就行了。做 $p$ 次 $DFT$，再做一次 $IDFT$ 即可。</li><li>总时间复杂度为 $O(pm\log m\log n+p^2m\log m+p^3m)$。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*********************************************************************</span></span><br><span class="line"><span class="comment">Problem:DEVLOCK</span></span><br><span class="line"><span class="comment">Author:hydd</span></span><br><span class="line"><span class="comment">Date:2020/7/17</span></span><br><span class="line"><span class="comment">*********************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> File(x) freopen(x<span class="meta-string">&quot;.in&quot;</span>,<span class="meta-string">&quot;r&quot;</span>,stdin);freopen(x<span class="meta-string">&quot;.out&quot;</span>,<span class="meta-string">&quot;w&quot;</span>,stdout);</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; poly;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> g=<span class="number">3</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123; <span class="keyword">return</span> x+y&gt;=Mod?x+y-Mod:x+y;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">dec</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123; <span class="keyword">return</span> x-y&lt;<span class="number">0</span>?x-y+Mod:x-y;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123; <span class="keyword">return</span> <span class="number">1l</span>l*x*y%Mod;&#125;</span><br><span class="line"><span class="keyword">int</span> n,p,m,N,rev[<span class="number">1100000</span>];</span><br><span class="line"><span class="keyword">int</span> cnt[<span class="number">110</span>]; poly B[<span class="number">110</span>];</span><br><span class="line">poly F[<span class="number">110</span>],G[<span class="number">110</span>],H[<span class="number">110</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">matrix</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> v[<span class="number">110</span>][<span class="number">110</span>];</span><br><span class="line">matrix()&#123; <span class="built_in">memset</span>(v,<span class="number">0</span>,<span class="keyword">sizeof</span>(v));&#125;</span><br><span class="line">&#125;;</span><br><span class="line">matrix <span class="keyword">operator</span>*(<span class="keyword">const</span> matrix &amp;a,<span class="keyword">const</span> matrix &amp;b)&#123;</span><br><span class="line">matrix res;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;N;k++)</span><br><span class="line"><span class="keyword">if</span> (a.v[i][k])</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;N;j++)</span><br><span class="line">res.v[i][j]=add(res.v[i][j],mul(a.v[i][k],b.v[k][j]));</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll x,ll a)</span></span>&#123;</span><br><span class="line">ll res=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (a)&#123;</span><br><span class="line"><span class="keyword">if</span> (a&amp;<span class="number">1</span>) res=res*x%Mod;</span><br><span class="line">x=x*x%Mod; a&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">getinv</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123; <span class="keyword">return</span> qpow(x,Mod<span class="number">-2</span>);&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">NTT</span><span class="params">(poly &amp;a,<span class="keyword">int</span> len,<span class="keyword">int</span> inv)</span></span>&#123;</span><br><span class="line">a.resize(len);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line"><span class="keyword">if</span> (i&lt;rev[i]) swap(a[i],a[rev[i]]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> mid=<span class="number">1</span>;mid&lt;len;mid&lt;&lt;=<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">int</span> tmp=qpow(g,(Mod<span class="number">-1</span>)/(mid&lt;&lt;<span class="number">1</span>));</span><br><span class="line"><span class="keyword">if</span> (inv==<span class="number">-1</span>) tmp=getinv(tmp);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i+=(mid&lt;&lt;<span class="number">1</span>))&#123;</span><br><span class="line">ll omega=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (ll j=<span class="number">0</span>;j&lt;mid;j++,omega=mul(omega,tmp))&#123;</span><br><span class="line"><span class="keyword">int</span> x=a[i+j],y=mul(omega,a[i+j+mid]);</span><br><span class="line">a[i+j]=add(x,y),a[i+j+mid]=dec(x,y);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (inv==<span class="number">-1</span>)&#123;</span><br><span class="line">ll inv=getinv(len);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++) a[i]=mul(a[i],inv);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getbit</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> bit=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> ((<span class="number">1</span>&lt;&lt;bit)&lt;x) bit++;</span><br><span class="line"><span class="keyword">return</span> bit;</span><br><span class="line">&#125;</span><br><span class="line">poly <span class="keyword">operator</span>*(poly a,poly b)&#123;</span><br><span class="line"><span class="keyword">int</span> bit=getbit((<span class="keyword">int</span>)a.size()+b.size()<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">int</span> len=<span class="number">1</span>&lt;&lt;bit;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++) rev[i]=(rev[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)&lt;&lt;(bit<span class="number">-1</span>));</span><br><span class="line">NTT(a,len,<span class="number">1</span>); NTT(b,len,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++) a[i]=mul(a[i],b[i]);</span><br><span class="line">NTT(a,len,<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">matrix <span class="title">qpow</span><span class="params">(matrix x,<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line">matrix res;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++) res.v[i][i]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (a)&#123;</span><br><span class="line"><span class="keyword">if</span> (a&amp;<span class="number">1</span>) res=res*x;</span><br><span class="line">x=x*x; a&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;n,&amp;p,&amp;m);</span><br><span class="line"><span class="keyword">if</span> (p==<span class="number">1</span>) cnt[<span class="number">0</span>]=n;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">matrix a;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;p;i++)&#123;</span><br><span class="line">a.v[i][i*<span class="number">10</span>%p]++;</span><br><span class="line">a.v[i][i+p]++; a.v[i+p][i+p]++;</span><br><span class="line">&#125;</span><br><span class="line">N=<span class="number">2</span>*p; a=qpow(a,n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;p;i++) cnt[i]=a.v[<span class="number">1</span>][i+p];</span><br><span class="line">&#125;</span><br><span class="line">B[<span class="number">0</span>].resize(m+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=min(<span class="number">9</span>,m);i++) B[<span class="number">0</span>][i]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;(<span class="number">1</span>&lt;&lt;i)&lt;=n;i++)&#123;</span><br><span class="line">B[i]=B[i<span class="number">-1</span>]*B[i<span class="number">-1</span>];</span><br><span class="line">B[i].resize(m+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> len=<span class="number">1</span>&lt;&lt;getbit(<span class="number">2</span>*m+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;p;j++)&#123;</span><br><span class="line">F[j].clear();</span><br><span class="line">F[j].resize(len);</span><br><span class="line">&#125;</span><br><span class="line">F[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;p;i++)</span><br><span class="line"><span class="keyword">if</span> (cnt[i])&#123;</span><br><span class="line"><span class="function">poly <span class="title">A</span><span class="params">(m+<span class="number">1</span>)</span></span>;</span><br><span class="line">A[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;(<span class="number">1</span>&lt;&lt;j)&lt;=cnt[i];j++)</span><br><span class="line"><span class="keyword">if</span> ((cnt[i]&gt;&gt;j)&amp;<span class="number">1</span>)&#123;</span><br><span class="line">A=A*B[j];</span><br><span class="line">A.resize(m+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;p;j++)&#123;</span><br><span class="line">G[j].clear();</span><br><span class="line">G[j].resize(len);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=m;j++) G[i*j%p][j]=A[j];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;p;j++)&#123;</span><br><span class="line">NTT(F[j],len,<span class="number">1</span>);</span><br><span class="line">NTT(G[j],len,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;p;j++)&#123;</span><br><span class="line">H[j].clear();</span><br><span class="line">H[j].resize(len);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;p;j++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;p;k++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> l=<span class="number">0</span>;l&lt;len;l++)</span><br><span class="line">H[(j+k)%p][l]=add(H[(j+k)%p][l],mul(F[j][l],G[k][l]));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;p;j++)&#123;</span><br><span class="line">NTT(H[j],len,<span class="number">-1</span>);</span><br><span class="line">H[j].resize(m+<span class="number">1</span>);</span><br><span class="line">F[j]=H[j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) F[<span class="number">0</span>][i]=add(F[<span class="number">0</span>][i<span class="number">-1</span>],F[<span class="number">0</span>][i]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,F[<span class="number">0</span>][i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,F[<span class="number">0</span>][m]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CC-CLOWAY"><a href="#CC-CLOWAY" class="headerlink" title="CC CLOWAY"></a>CC CLOWAY</h2><ul><li>我们可以发现不走和走自环是等价的，所以我们可以先给所有点加上一个自环，最后再去掉都走自环的情况即可。</li><li>设 $G_{l,r,k}$ 表示对编号在 $[l,r]$ 之间的图进行操作，每轮每张图都可以走自环，在 $k$ 轮后恰好回到起始状态的方案数。</li><li>设 $F_{l,r,k}$ 表示对编号在 $[l,r]$ 之间的图进行操作，每轮必须有图不走自环，在 $k$ 轮后恰好回到起始状态的方案数。</li><li>设 $A_i$ 为加上自环后的第 $i$ 张图的邻接矩阵，$tr(A)$ 表示矩阵的迹，即对角线元素之和。那么第 $i$ 张图走 $k$ 步回到初始状态的方案数为 $tr(A_i^k)$，总方案数为 $\prod\limits_{i=l}^r tr(A_i^k)$，即 $G_{l,r,k}=\prod\limits_{i=l}^r tr(A_i^k)$。</li><li>那么枚举没有全都走自环的轮数 $i$ 有 $G_{l,r,k}=\sum\limits_{i=0}^k\binom kiF_{l,r,i}$，二项式反演可得 $F_{l,r,k}=\sum\limits_{i=0}^k(-1)^{k-i}\binom kiG_{l,r,i}$。</li><li>将其化为卷积形式，有：$\frac{f_{l,r,k}}{k!}=\sum\limits_{i+j=k}\frac{g_{l,r,i}}{i!}\frac{(-1)^j}{j!}$。</li><li>根据矩阵的迹的性质：$tr(A+B)=tr(A)+tr(B),tr(kA)=ktr(A)$（显然）。</li><li>由 $Cayley-Hamilton$ 定理，设 $A$ 的特征多项式为 $c_0x^0+c_1x^1+c_2x^2+\cdots+c_{|A|}x^{|A|}=\sum\limits_{i=0}^{|A|}c_ix^i$，那么 $\sum\limits_{i=0}^{|A|}c_iA^i=0$（$0$ 矩阵），两边同时乘 $A$ 的任意次幂值仍不变，即 $\sum\limits_{i=0}^{|A|}c_iA^{i+t}=0* A^t=0$（$0$ 矩阵）。</li><li>两边同时取 $tr()$，有 $tr(\sum\limits_{i=0}^{|A|}c_iA^{i+t})=tr(0)=0$，而 $tr(\sum\limits_{i=0}^{|A|}c_iA^{i+t})=\sum\limits_{i=0}^{|A|}tr(c_iA^{i+t})=\sum\limits_{i=0}^{|A|}c_itr(A^{i+t})$，则 $\sum\limits_{i=0}^{|A|}c_itr(A^{i+t})=0$，有了这个式子，只需求出特征多项式和矩阵的前 $|A|$ 次的迹，就可以线性递推了。</li><li>特征多项式可以直接插值，$f(\lambda)=|\lambda E-A|$，代入 $\lambda=0\cdots|A|$ 后插值即可。</li><li>时间复杂度 $O(T(N^4+NK)+T^2K\log K+Q)$。模数为 $10^9+7$ 所以可以用拆系数 $FFT$。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*********************************************************************</span></span><br><span class="line"><span class="comment">Problem:CLOWAY</span></span><br><span class="line"><span class="comment">Author:hydd</span></span><br><span class="line"><span class="comment">Date:2020/7/20</span></span><br><span class="line"><span class="comment">*********************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> File(x) freopen(x<span class="meta-string">&quot;.in&quot;</span>,<span class="meta-string">&quot;r&quot;</span>,stdin);freopen(x<span class="meta-string">&quot;.out&quot;</span>,<span class="meta-string">&quot;w&quot;</span>,stdout);</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> ldb;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> ldb Pi=<span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> l,r,k;</span><br><span class="line">&#125; q[<span class="number">1100000</span>];</span><br><span class="line"><span class="keyword">int</span> T,n,m,Q;</span><br><span class="line"><span class="keyword">int</span> mx[<span class="number">55</span>][<span class="number">55</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123; <span class="keyword">return</span> x+y&gt;=Mod?x+y-Mod:x+y;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">dec</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123; <span class="keyword">return</span> x-y&lt;<span class="number">0</span>?x-y+Mod:x-y;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123; <span class="keyword">return</span> <span class="number">1l</span>l*x*y%Mod;&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">complex</span>&#123;</span></span><br><span class="line">ldb x,y;</span><br><span class="line"><span class="built_in">complex</span>(ldb xx=<span class="number">0</span>,ldb yy=<span class="number">0</span>)&#123; x=xx; y=yy;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clr</span><span class="params">()</span></span>&#123; x=<span class="number">0</span>; y=<span class="number">0</span>;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Matrix</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> v[<span class="number">55</span>][<span class="number">55</span>];</span><br><span class="line">Matrix()&#123; <span class="built_in">memset</span>(v,<span class="number">0</span>,<span class="keyword">sizeof</span>(v));&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clr</span><span class="params">()</span></span>&#123; <span class="built_in">memset</span>(v,<span class="number">0</span>,<span class="keyword">sizeof</span>(v));&#125;</span><br><span class="line">Matrix <span class="keyword">operator</span>*(<span class="keyword">const</span> Matrix &amp;x) <span class="keyword">const</span>&#123;</span><br><span class="line">Matrix y;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=n;k++)</span><br><span class="line">y.v[i][j]=add(y.v[i][j],mul(v[i][k],x.v[k][j]));</span><br><span class="line"><span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br><span class="line">&#125; A,B,E,tmp_i;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">tr</span><span class="params">(Matrix &amp;A)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) res=add(res,A.v[i][i]);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> v[<span class="number">55</span>][<span class="number">55</span>];</span><br><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll x,ll a)</span></span>&#123;</span><br><span class="line">    ll res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (a)&#123;</span><br><span class="line">        <span class="keyword">if</span> (a&amp;<span class="number">1</span>) res=res*x%Mod;</span><br><span class="line">        x=x*x%Mod; a&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">det</span><span class="params">(Matrix &amp;a)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> f=<span class="number">0</span>,ans=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">v[i][j]=a.v[i][j];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span> (!v[i][i])</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line"><span class="keyword">if</span> (v[j][i])&#123;</span><br><span class="line">f^=<span class="number">1</span>; swap(v[i],v[j]);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!v[i][i]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> inv=qpow(v[i][i],Mod<span class="number">-2</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line"><span class="keyword">int</span> tmp=mul(v[j][i],inv);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k=i;k&lt;=n;k++) v[j][k]=add(v[j][k],dec(<span class="number">0</span>,mul(tmp,v[i][k])));</span><br><span class="line">&#125;</span><br><span class="line">ans=mul(ans,v[i][i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (f) ans=dec(<span class="number">0</span>,ans);</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Matrix <span class="title">I</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">tmp_i.clr();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) tmp_i.v[i][i]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> tmp_i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> bit,len,rev[<span class="number">66000</span>];</span><br><span class="line">ll fac[<span class="number">21000</span>],inv[<span class="number">21000</span>],aaa[<span class="number">66000</span>],bbb[<span class="number">66000</span>];</span><br><span class="line"><span class="built_in">complex</span> aa[<span class="number">66000</span>],bb[<span class="number">66000</span>],cc[<span class="number">66000</span>],dd[<span class="number">66000</span>],</span><br><span class="line">ee[<span class="number">66000</span>],ff[<span class="number">66000</span>],gg[<span class="number">66000</span>],hh[<span class="number">66000</span>];</span><br><span class="line"><span class="built_in">complex</span> <span class="keyword">operator</span>+(<span class="built_in">complex</span> a,<span class="built_in">complex</span> b)&#123; <span class="keyword">return</span> <span class="built_in">complex</span>(a.x+b.x,a.y+b.y);&#125;</span><br><span class="line"><span class="built_in">complex</span> <span class="keyword">operator</span>-(<span class="built_in">complex</span> a,<span class="built_in">complex</span> b)&#123; <span class="keyword">return</span> <span class="built_in">complex</span>(a.x-b.x,a.y-b.y);&#125;</span><br><span class="line"><span class="built_in">complex</span> <span class="keyword">operator</span>*(<span class="built_in">complex</span> a,<span class="built_in">complex</span> b)&#123; <span class="keyword">return</span> <span class="built_in">complex</span>(a.x*b.x-a.y*b.y,a.x*b.y+a.y*b.x);&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FFT</span><span class="params">(<span class="built_in">complex</span> *A,<span class="keyword">int</span> type)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++) </span><br><span class="line"><span class="keyword">if</span> (i&lt;rev[i]) swap(A[i],A[rev[i]]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> mid=<span class="number">1</span>;mid&lt;len;mid&lt;&lt;=<span class="number">1</span>)&#123;</span><br><span class="line"><span class="function"><span class="built_in">complex</span> <span class="title">Wn</span><span class="params">(<span class="built_in">cos</span>(Pi/mid),type*<span class="built_in">sin</span>(Pi/mid))</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> R=mid&lt;&lt;<span class="number">1</span>,j=<span class="number">0</span>;j&lt;len;j+=R)&#123;</span><br><span class="line"><span class="function"><span class="built_in">complex</span> <span class="title">w</span><span class="params">(<span class="number">1</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;mid;k++,w=w*Wn)&#123;</span><br><span class="line"><span class="built_in">complex</span> x=A[j+k],y=w*A[j+mid+k];</span><br><span class="line">A[j+k]=x+y; A[j+mid+k]=x-y;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MTT</span><span class="params">(ll *A,ll *B,ll *res,<span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line">len=<span class="number">1</span>; bit=<span class="number">0</span>; <span class="keyword">while</span> (len&lt;=m+m) len&lt;&lt;=<span class="number">1</span>,bit++;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++) rev[i]=(rev[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)&lt;&lt;(bit<span class="number">-1</span>));</span><br><span class="line"><span class="comment">//memset(aa,0,sizeof(aa)); memset(bb,0,sizeof(bb));</span></span><br><span class="line"><span class="comment">//memset(cc,0,sizeof(cc)); memset(dd,0,sizeof(dd));</span></span><br><span class="line"><span class="comment">//memset(ee,0,sizeof(ee)); memset(ff,0,sizeof(ff));</span></span><br><span class="line"><span class="comment">//memset(gg,0,sizeof(gg)); memset(hh,0,sizeof(hh));</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=m;i++) aa[i].x=A[i]&gt;&gt;<span class="number">15</span>,aa[i].y=<span class="number">0</span>,bb[i].x=A[i]&amp;<span class="number">32767</span>,bb[i].y=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=m;i++) cc[i].x=B[i]&gt;&gt;<span class="number">15</span>,cc[i].y=<span class="number">0</span>,dd[i].x=B[i]&amp;<span class="number">32767</span>,dd[i].y=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=m+<span class="number">1</span>;i&lt;len;i++) aa[i].clr(),bb[i].clr(),cc[i].clr(),dd[i].clr();</span><br><span class="line">FFT(aa,<span class="number">1</span>); FFT(bb,<span class="number">1</span>);</span><br><span class="line">FFT(cc,<span class="number">1</span>); FFT(dd,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">ee[i]=aa[i]*cc[i]; ff[i]=aa[i]*dd[i];</span><br><span class="line">gg[i]=bb[i]*cc[i]; hh[i]=bb[i]*dd[i];</span><br><span class="line">&#125;</span><br><span class="line">FFT(ee,<span class="number">-1</span>); FFT(ff,<span class="number">-1</span>);</span><br><span class="line">FFT(gg,<span class="number">-1</span>); FFT(hh,<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=m;i++) res[i]=(((ll)(ee[i].x/len+<span class="number">0.5</span>)%Mod&lt;&lt;<span class="number">30</span>)%Mod+</span><br><span class="line">((ll)(ff[i].x/len+<span class="number">0.5</span>)%Mod&lt;&lt;<span class="number">15</span>)%Mod+</span><br><span class="line">((ll)(gg[i].x/len+<span class="number">0.5</span>)%Mod&lt;&lt;<span class="number">15</span>)%Mod+</span><br><span class="line">(ll)(hh[i].x/len+<span class="number">0.5</span>)%Mod)%Mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mult</span><span class="params">(ll *A,ll *B,<span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=m;i++) bbb[i]=B[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=m;i++) aaa[i]=A[i];</span><br><span class="line">MTT(aaa,bbb,B,m);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getfac</span><span class="params">()</span></span>&#123;</span><br><span class="line">fac[<span class="number">0</span>]=<span class="number">1</span>; <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">10000</span>;i++) fac[i]=fac[i<span class="number">-1</span>]*i%Mod;</span><br><span class="line">inv[<span class="number">1</span>]=<span class="number">1</span>; <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=<span class="number">10000</span>;i++) inv[i]=(Mod-Mod/i)*inv[Mod%i]%Mod;</span><br><span class="line">inv[<span class="number">0</span>]=<span class="number">1</span>; <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">10000</span>;i++) inv[i]=inv[i<span class="number">-1</span>]*inv[i]%Mod;</span><br><span class="line">&#125;</span><br><span class="line">ll tmp[<span class="number">21000</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">poly_mul</span><span class="params">(ll *f,ll t)</span></span>&#123;<span class="comment">//*(x+t)</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=n+<span class="number">1</span>;i&gt;<span class="number">0</span>;i--)&#123;</span><br><span class="line">tmp[i]=f[i];</span><br><span class="line">f[i]=f[i<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line">tmp[<span class="number">0</span>]=f[<span class="number">0</span>]; f[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n+<span class="number">1</span>;i++) f[i]=(f[i]+t*tmp[i])%Mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">poly_div</span><span class="params">(ll *f,ll *g,ll t)</span></span>&#123;<span class="comment">///(x-t)</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n+<span class="number">1</span>;i++) tmp[i]=f[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=n+<span class="number">1</span>;i&gt;<span class="number">0</span>;i--)&#123;</span><br><span class="line">g[i<span class="number">-1</span>]=tmp[i];</span><br><span class="line">tmp[i<span class="number">-1</span>]=(tmp[i<span class="number">-1</span>]+t*tmp[i])%Mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">ll a[<span class="number">21000</span>],b[<span class="number">21000</span>],c[<span class="number">21000</span>],F[<span class="number">21000</span>];</span><br><span class="line">ll f[<span class="number">55</span>][<span class="number">55</span>][<span class="number">21000</span>],g[<span class="number">55</span>][<span class="number">55</span>][<span class="number">21000</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Lagrange</span><span class="params">(<span class="keyword">int</span> *r,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span>(a));</span><br><span class="line"><span class="built_in">memset</span>(b,<span class="number">0</span>,<span class="keyword">sizeof</span>(b));</span><br><span class="line">b[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) poly_mul(b,dec(<span class="number">0</span>,i));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++)&#123;</span><br><span class="line">ll s=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=n;j++)</span><br><span class="line"><span class="keyword">if</span> (i!=j) s=s*dec(i,j)%Mod;</span><br><span class="line">s=qpow(s,Mod<span class="number">-2</span>);</span><br><span class="line">s=s*r[i]%Mod;</span><br><span class="line">poly_div(b,c,i);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=n;j++) a[j]=(a[j]+s*c[j])%Mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++) F[i]=a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> r[<span class="number">21000</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">(Matrix a)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">a.v[i][j]=dec(<span class="number">0</span>,a.v[i][j]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++)&#123;<span class="comment">//iE-A</span></span><br><span class="line">r[i]=det(a);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++) a.v[j][j]=add(a.v[j][j],<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">Lagrange(r,n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">getfac();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;T); <span class="keyword">int</span> u,v;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> t=<span class="number">1</span>;t&lt;=T;t++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">A=I(n); E=I(n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;u,&amp;v);</span><br><span class="line">A.v[u][v]=<span class="number">1</span>; A.v[v][u]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">work(A); <span class="built_in">memset</span>(r,<span class="number">0</span>,<span class="keyword">sizeof</span>(r));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) r[i]=tr(E),E=E*A;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=n;i&lt;=<span class="number">10000</span>;i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line">r[i]=add(r[i],dec(<span class="number">0</span>,mul(F[j],r[i-n+j])));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">10000</span>;i++) g[t][t][i]=r[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;Q);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=Q;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;q[i].l,&amp;q[i].r,&amp;q[i].k);</span><br><span class="line">mx[q[i].l][q[i].r]=max(mx[q[i].l][q[i].r],q[i].k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=T;i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;=T;j++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;=<span class="number">10000</span>;k++)</span><br><span class="line">g[i][j][k]=mul(g[i][j<span class="number">-1</span>][k],g[j][j][k]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=T;i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=i;j&lt;=T;j++)&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;=mx[i][j];k++)&#123;</span><br><span class="line">g[i][j][k]=mul(g[i][j][k],inv[k]);</span><br><span class="line">f[i][j][k]=k&amp;<span class="number">1</span>?dec(<span class="number">0</span>,inv[k]):inv[k];</span><br><span class="line">&#125;</span><br><span class="line">mult(g[i][j],f[i][j],mx[i][j]);</span><br><span class="line">f[i][j][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=mx[i][j];k++) f[i][j][k]=add(f[i][j][k<span class="number">-1</span>],mul(f[i][j][k],fac[k]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=Q;i++) <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,f[q[i].l][q[i].r][q[i].k]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">3 3</span></span><br><span class="line"><span class="comment">1 2</span></span><br><span class="line"><span class="comment">2 3</span></span><br><span class="line"><span class="comment">1 3</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">1 1 3</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="CC-POLYEVAL"><a href="#CC-POLYEVAL" class="headerlink" title="CC POLYEVAL"></a>CC POLYEVAL</h2><ul><li>按照老师的题解写的。</li><li>首先 $786433=2^{18}*3+1$，可以取 $n=2^{18}$。</li><li>$DFT$ 的过程本身就是特殊的多点求值，求的是单位根的幂次的值。在 $NTT$ 中，$n$ 次单位根为 $g^\frac{p-1}n=g^3$。</li><li>其中 $g$ 是 $p$ 的一个原根。如果我们直接对多项式做 $DFT$，就可以得到所有离散对数是 $3$ 的幂次的点值。</li><li>注意到 $\sum a_ix^i=\sum a_ir^i(\frac xr)^i$，</li><li>我们构造一个新多项式，系数为 $a_ir^i$，求出来 $x_0$ 处的点值就是原多项式中 $x_0r$ 处的点值。</li><li>故总共只要做三次 $DFT$ 即可。时间复杂度为 $O(n\log n)$。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*********************************************************************</span></span><br><span class="line"><span class="comment">Problem:POLYEVAL</span></span><br><span class="line"><span class="comment">Author:hydd</span></span><br><span class="line"><span class="comment">Date:2020/7/17</span></span><br><span class="line"><span class="comment">*********************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> File(x) freopen(x<span class="meta-string">&quot;.in&quot;</span>,<span class="meta-string">&quot;r&quot;</span>,stdin);freopen(x<span class="meta-string">&quot;.out&quot;</span>,<span class="meta-string">&quot;w&quot;</span>,stdout);</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> g=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Mod=<span class="number">786433</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">810000</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,q,x,len,rev[MAXN],ans[MAXN];</span><br><span class="line"><span class="keyword">int</span> a[MAXN],b[MAXN],c[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">qpow</span><span class="params">(ll x,<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line">ll res=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (a)&#123;</span><br><span class="line"><span class="keyword">if</span> (a&amp;<span class="number">1</span>) res=res*x%Mod;</span><br><span class="line">x=x*x%Mod; a&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getinv</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123; <span class="keyword">return</span> qpow(x,Mod<span class="number">-2</span>);&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">NTT</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> inv)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line"><span class="keyword">if</span> (i&lt;rev[i]) swap(a[i],a[rev[i]]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> mid=<span class="number">1</span>;mid&lt;n;mid&lt;&lt;=<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">int</span> tmp=qpow(g,(Mod<span class="number">-1</span>)/(mid&lt;&lt;<span class="number">1</span>));</span><br><span class="line"><span class="keyword">if</span> (inv==<span class="number">-1</span>) tmp=getinv(tmp);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i+=mid*<span class="number">2</span>)&#123;</span><br><span class="line">ll omega=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (ll j=<span class="number">0</span>;j&lt;mid;j++,omega=omega*tmp%Mod)&#123;</span><br><span class="line"><span class="keyword">int</span> x=a[i+j],y=omega*a[i+j+mid]%Mod;</span><br><span class="line">a[i+j]=(x+y)%Mod,a[i+j+mid]=(x-y+Mod)%Mod;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n); n++;</span><br><span class="line"><span class="keyword">int</span> gi=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">b[i]=<span class="number">1l</span>l*a[i]*gi%Mod;</span><br><span class="line">c[i]=<span class="number">1l</span>l*a[i]*gi%Mod*gi%Mod;</span><br><span class="line">gi=<span class="number">1l</span>l*gi*g%Mod;</span><br><span class="line">&#125;</span><br><span class="line">ans[<span class="number">0</span>]=a[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">int</span> bit=<span class="number">18</span>; n=<span class="number">1</span>&lt;&lt;bit;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) rev[i]=(rev[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)&lt;&lt;(bit<span class="number">-1</span>));</span><br><span class="line"></span><br><span class="line">NTT(a,<span class="number">1</span>); NTT(b,<span class="number">1</span>); NTT(c,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> t1=<span class="number">1</span>,t2=g,t3=<span class="number">1l</span>l*t2*g%Mod;</span><br><span class="line"><span class="keyword">int</span> l=<span class="number">1l</span>l*t3*g%Mod;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">ans[t1]=a[i]; ans[t2]=b[i]; ans[t3]=c[i];</span><br><span class="line">t1=<span class="number">1l</span>l*t1*l%Mod;</span><br><span class="line">t2=<span class="number">1l</span>l*t2*l%Mod;</span><br><span class="line">t3=<span class="number">1l</span>l*t3*l%Mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;q);</span><br><span class="line"><span class="keyword">while</span> (q--)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="uoj269"><a href="#uoj269" class="headerlink" title="uoj269"></a>uoj269</h2><script type="math/tex; mode=display">\begin{aligned}a n s &=\sum_{k=0}^{n} f(k)\binom{n}{k}x^{k}(1-x)^{n-k} \\&=\sum_{k=0}^{n} \sum_{i=0}^{\infty} f_{i} k^{\underline i}\binom{n}{k} x^{k}(1-x)^{n-k} \\&=\sum_{i=0}^{\infty} f_{i} \sum_{k=0}^{n} k^{\underline i}\binom{n}{k} x^{k}(1-x)^{n-k} \\&=\sum_{i=0}^{\infty} f_{i} \sum_{k=0}^{n} k^{\underline i}\binom{n-i}{k-i} \frac{n^{\underline i}}{k^{\underline i}} x^{k}(1-x)^{n-k} \\&=\sum_{i=0}^{\infty} n^{\underline i} f_{i} \sum_{k=0}^{n}\binom{n-i}{k-i} x^{k}(1-x)^{n-k} \\&=\sum_{i=0}^{\infty} n^{\underline i} f_{i} \sum_{k=0}^{n-i}\binom{n-i}{k} x^{k+i}(1-x)^{n-k-i} \\&=\sum_{i=0}^{\infty} x^{i} n^{\underline i} f_{i} \sum_{k=0}^{n-i}\binom{n-i}{k} x^{k}(1-x)^{n-k-i} \\&=\sum_{i=0}^{m} n^{\underline i} f_{i} x^{i}\end{aligned}\\\begin{aligned}f(i)&=\sum_{j=0}^ma_ji^{\underline j}=\sum_{j=0}^ma_j\frac{i!}{(i-j)!} \\\frac{f(i)}{i!}&=\sum_{j=0}^ma_j*\frac{1}{(i-j)!}\end{aligned}</script><ul><li>所以 $f(i)$ 的EGF等于 $a$ 的OGF卷积上 $e^x$，所以 $a$ 的OGF等于 $f(i)$ 的EGF乘上 $e^{−x}$。</li><li>时间复杂度 $O(m\log m)$。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*********************************************************************</span></span><br><span class="line"><span class="comment">Problem:uoj269</span></span><br><span class="line"><span class="comment">Author:hydd</span></span><br><span class="line"><span class="comment">Date:2020/7/18 - 2020/7/19</span></span><br><span class="line"><span class="comment">*********************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> File(x) freopen(x<span class="meta-string">&quot;.in&quot;</span>,<span class="meta-string">&quot;r&quot;</span>,stdin);freopen(x<span class="meta-string">&quot;.out&quot;</span>,<span class="meta-string">&quot;w&quot;</span>,stdout);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; poly;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> g=<span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,x0,rev[<span class="number">1100000</span>];</span><br><span class="line"><span class="keyword">int</span> fac[<span class="number">1100000</span>],inv[<span class="number">1100000</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123; <span class="keyword">return</span> x+y&gt;=Mod?x+y-Mod:x+y;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">dec</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123; <span class="keyword">return</span> x-y&lt;<span class="number">0</span>?x-y+Mod:x-y;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123; <span class="keyword">return</span> <span class="number">1l</span>l*x*y%Mod;&#125;</span><br><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll x,ll a)</span></span>&#123;</span><br><span class="line">ll res=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (a)&#123;</span><br><span class="line"><span class="keyword">if</span> (a&amp;<span class="number">1</span>) res=res*x%Mod;</span><br><span class="line">x=x*x%Mod; a&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">getinv</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123; <span class="keyword">return</span> qpow(x,Mod<span class="number">-2</span>);&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">NTT</span><span class="params">(poly &amp;a,<span class="keyword">int</span> len,<span class="keyword">int</span> inv)</span></span>&#123;</span><br><span class="line">a.resize(len);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line"><span class="keyword">if</span> (i&lt;rev[i]) swap(a[i],a[rev[i]]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> mid=<span class="number">1</span>;mid&lt;len;mid&lt;&lt;=<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">int</span> tmp=qpow(g,(Mod<span class="number">-1</span>)/(mid&lt;&lt;<span class="number">1</span>));</span><br><span class="line"><span class="keyword">if</span> (inv==<span class="number">-1</span>) tmp=getinv(tmp);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i+=(mid&lt;&lt;<span class="number">1</span>))&#123;</span><br><span class="line">ll omega=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (ll j=<span class="number">0</span>;j&lt;mid;j++,omega=mul(omega,tmp))&#123;</span><br><span class="line"><span class="keyword">int</span> x=a[i+j],y=mul(omega,a[i+j+mid]);</span><br><span class="line">a[i+j]=add(x,y),a[i+j+mid]=dec(x,y);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (inv==<span class="number">-1</span>)&#123;</span><br><span class="line">ll inv=getinv(len);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++) a[i]=mul(a[i],inv);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getbit</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> bit=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> ((<span class="number">1</span>&lt;&lt;bit)&lt;x) bit++;</span><br><span class="line"><span class="keyword">return</span> bit;</span><br><span class="line">&#125;</span><br><span class="line">poly <span class="keyword">operator</span>*(poly a,poly b)&#123;</span><br><span class="line"><span class="keyword">int</span> bit=getbit((<span class="keyword">int</span>)a.size()+b.size()<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">int</span> len=<span class="number">1</span>&lt;&lt;bit;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++) rev[i]=(rev[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)&lt;&lt;(bit<span class="number">-1</span>));</span><br><span class="line">NTT(a,len,<span class="number">1</span>); NTT(b,len,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++) a[i]=mul(a[i],b[i]);</span><br><span class="line">NTT(a,len,<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;n,&amp;m,&amp;x0);</span><br><span class="line">fac[<span class="number">0</span>]=<span class="number">1</span>; <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) fac[i]=mul(fac[i<span class="number">-1</span>],i);</span><br><span class="line">inv[<span class="number">1</span>]=<span class="number">1</span>; <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=m;i++) inv[i]=mul((Mod-Mod/i),inv[Mod%i]);</span><br><span class="line">inv[<span class="number">0</span>]=<span class="number">1</span>; <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) inv[i]=mul(inv[i<span class="number">-1</span>],inv[i]);</span><br><span class="line">poly f(m+1), g(m+1);</span><br><span class="line"><span class="comment">//f=f_e(x0) g=e^&#123;-x0&#125;</span></span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">f[i]=mul(x,inv[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=m;i++) g[i]=(i&amp;<span class="number">1</span>)?dec(<span class="number">0</span>,inv[i]):inv[i];</span><br><span class="line">poly h=f*g; h.resize(m+<span class="number">1</span>);<span class="comment">//h=f*g</span></span><br><span class="line"><span class="keyword">int</span> s=<span class="number">1</span>,ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=m;i++)&#123;</span><br><span class="line">ans=(ans+<span class="number">1l</span>l*mul(h[i],s)*qpow(x0,i))%Mod;</span><br><span class="line">s=mul(s,n-i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;uoj424&quot;&gt;&lt;a href=&quot;#uoj424&quot; class=&quot;headerlink&quot; title=&quot;uoj424&quot;&gt;&lt;/a&gt;uoj424&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;按照老师的题解写的。&lt;/li&gt;
&lt;li&gt;每次取最大，那么我们考虑对序列建笛卡尔树。两个序列同构，</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>20200715 五大强校联考题解</title>
    <link href="http://hydd.cf/2020/07/15/sol_15/"/>
    <id>http://hydd.cf/2020/07/15/sol_15/</id>
    <published>2020-07-14T16:00:00.000Z</published>
    <updated>2020-10-01T04:58:59.922Z</updated>
    
    <content type="html"><![CDATA[<h2 id="得分（score"><a href="#得分（score" class="headerlink" title="得分（score)"></a>得分（score)</h2><ul><li>有一个部分分是 $\frac{a_i}{t_i}$ 互不相同，我们考虑 $\frac{a_i}{t_i}$ 的顺序与最优策略的关系。</li><li>我们看在什么情况下，交换相邻的两个数会使答案更优。</li></ul><script type="math/tex; mode=display">\tfrac {a_i}{t_i}<\tfrac{a_{i+1}}{t_{i+1}}\\a_it_{i+1}<a_{i+1}t_i\\a_i(1-c\times \tfrac{t_i+T'}T)+a_{i+1}(1-c\times \tfrac{t_i+t_{i+1}+T'}T)<a_i(1-c\times \tfrac{t_i+t_{i+1}+T'}T)+a_{i+1}(1-c\times \tfrac{t_i+T'}T)\\a_{i+1}(-c\times \tfrac {t_i}T)<a_i(-c\times \tfrac{t_{i+1}}T)\\a_i\times t_{i+1}<a_{i+1}\times t_i\\\tfrac{a_i}{t_i}<\tfrac{a_{i+1}}{t_i+1}</script><ul><li>故在答案中，不存在相邻两个位置满足 $\frac {a_i}{t_i}&lt;\frac {a_{i+1}}{t_{i+1}}$。故最优策略下 $\frac {a_i}{t_i}$ 按降序排列。</li><li><p>但是 $\frac {a_i}{t_i}$ 的顺序是不定的，题目要求所有的最优策略都要满足条件。</p></li><li><p>首先我们可以发现 $c$ 有单调性（显然）。所以我们可以二分 $c$。</p></li><li>如何进行 $check$？</li><li>我们要寻找是否存在 $a_i<a_j,b_i>b_j$ 的排列。</li><li>那么可以以 $a$ 为关键字排序，对 $a$ 相同的一段一起考虑。</li><li>从左往右扫，检查前面 $a$ 更小的位置是否有可能出现 $b$ 更大的情况。</li><li>因为我们要满足这个 $c$ 在所有条件下都符合题意，所以，只需要判断前面能取到的 $b$ 的最大值是否 $&gt;$ 当前能取到的最小值即可。维护前缀 $\max$。题目来源：CF639E。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*********************************************************************</span></span><br><span class="line"><span class="comment">Problem:score</span></span><br><span class="line"><span class="comment">Author:hydd</span></span><br><span class="line"><span class="comment">Date:2020/7/15</span></span><br><span class="line"><span class="comment">*********************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> File(x) freopen(x<span class="meta-string">&quot;.in&quot;</span>,<span class="meta-string">&quot;r&quot;</span>,stdin);freopen(x<span class="meta-string">&quot;.out&quot;</span>,<span class="meta-string">&quot;w&quot;</span>,stdout);</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-9</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">int</span> n; ll sum[<span class="number">210000</span>],T;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> a,t; <span class="keyword">double</span> v;</span><br><span class="line">ll x_min,x_max;</span><br><span class="line"><span class="keyword">double</span> b_min,b_max;</span><br><span class="line">&#125; p[<span class="number">210000</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp1</span><span class="params">(<span class="keyword">const</span> node &amp;x,<span class="keyword">const</span> node &amp;y)</span></span>&#123; <span class="keyword">return</span> x.v&gt;y.v;&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp2</span><span class="params">(<span class="keyword">const</span> node &amp;x,<span class="keyword">const</span> node &amp;y)</span></span>&#123; <span class="keyword">return</span> x.a&lt;y.a;&#125;</span><br><span class="line"><span class="keyword">int</span> L[<span class="number">210000</span>],R[<span class="number">210000</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getrange_x</span><span class="params">()</span></span>&#123;</span><br><span class="line">sort(p+<span class="number">1</span>,p+n+<span class="number">1</span>,cmp1);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) sum[i]=sum[i<span class="number">-1</span>]+p[i].t;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">if</span> (p[i].v!=p[i<span class="number">-1</span>].v) L[i]=i;</span><br><span class="line"><span class="keyword">else</span> L[i]=L[i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=n;i&gt;=<span class="number">1</span>;i--)</span><br><span class="line"><span class="keyword">if</span> (p[i].v!=p[i+<span class="number">1</span>].v) R[i]=i;</span><br><span class="line"><span class="keyword">else</span> R[i]=R[i+<span class="number">1</span>];</span><br><span class="line">T=sum[n];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">p[i].x_min=sum[L[i]<span class="number">-1</span>]+p[i].t;</span><br><span class="line">p[i].x_max=sum[R[i]];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> Next[<span class="number">210000</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getrange_a</span><span class="params">()</span></span>&#123;</span><br><span class="line">sort(p+<span class="number">1</span>,p+n+<span class="number">1</span>,cmp2);</span><br><span class="line">Next[n+<span class="number">1</span>]=n+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=n;i&gt;=<span class="number">1</span>;i--)</span><br><span class="line"><span class="keyword">if</span> (p[i].a!=p[i+<span class="number">1</span>].a) Next[i]=i+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> Next[i]=Next[i+<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getrange_b</span><span class="params">(<span class="keyword">double</span> c)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">p[i].b_min=(<span class="keyword">double</span>)p[i].a*(<span class="number">1.0</span>-c*p[i].x_max/T);</span><br><span class="line">p[i].b_max=(<span class="keyword">double</span>)p[i].a*(<span class="number">1.0</span>-c*p[i].x_min/T);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">double</span> c)</span></span>&#123;</span><br><span class="line">getrange_b(c); <span class="keyword">double</span> mx=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i=Next[i])&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=i;j&lt;Next[i];j++)</span><br><span class="line"><span class="keyword">if</span> (mx&gt;p[j].b_min) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=i;j&lt;Next[i];j++)</span><br><span class="line">mx=max(mx,p[j].b_max);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">File(<span class="string">&quot;score&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;p[i].a);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;p[i].t);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) p[i].v=(<span class="keyword">double</span>)p[i].a/p[i].t;</span><br><span class="line">getrange_x(); getrange_a();</span><br><span class="line"><span class="keyword">double</span> l=<span class="number">0</span>,r=<span class="number">1</span>,mid;</span><br><span class="line"><span class="keyword">while</span> (l+eps&lt;r)&#123;</span><br><span class="line">mid=(l+r)*<span class="number">0.5</span>;</span><br><span class="line"><span class="keyword">if</span> (check(mid)) l=mid;</span><br><span class="line"><span class="keyword">else</span> r=mid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.9lf\n&quot;</span>,l);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="旅行（travel）"><a href="#旅行（travel）" class="headerlink" title="旅行（travel）"></a>旅行（travel）</h2><ul><li>引理：必定存在一条最短路，其横坐标或纵坐标在移动的过程中单调递增，且它只在矩形的边界处拐弯（起点到第一个路径上的矩形除外）。</li><li>证明：如果存在横纵坐标都不单调的的路径为最短路，那么就是在走的过程中在一个矩形上从一侧边界走，然后绕到了另一侧，所以直接走矩形另一侧的边界一定不会变劣。而所有路径的拐弯的位置都可以移到边界上。</li><li>我们考虑横坐标递增的情况。我们先假设起点的横坐标比所有矩形的左侧横坐标更小。</li><li>设 $f[i][0/1]$ 表示原点到第 $i$ 个矩形左上（右上）/左下（右下）角时，在纵坐标移动的最短距离。（其实由于不算横坐标移动距离，所以左上和右上，左下和右下距离相等。</li><li>我们按照矩形的左侧横坐标排序，从左到右扫，显然我们需要纵坐标的移动距离最短，尽量会从包含该纵坐标的矩形转移过来。也就是 $3$ 号矩形的左上角会从 $1$ 号矩形转移，左下角会从 $2$ 号矩形转移。 $4$ 号矩形的左上角会从 $2$ 号矩形转移。显然如果这样的矩形不存在就说明可以直接从原点过来，如 $4$ 号矩形的左下角。（也就是找到的“矩形”是这条绿色的线。）</li><li>如下图所示：</li></ul><p><img src="../Exam_20200715_1.png" alt="Exam_20200715"></p><ul><li>到这里还没完，比如我们现在知道了 $3$ 号矩形的左上角从 $1$ 号矩形转移最优，那么 $(1),(2)$ 两种从哪种更优就得看 $dp[1][0]+len1$ 和 $dp[1][1]+len2$ 哪个更短了。</li><li>由引理我们可知这样转移一定是最优的。我们把终点也当成一个矩形（退化成点），看它的 $dp$ 值即可。</li></ul><ul><li>现在我们要处理起点的横坐标有可能比某些矩形的左侧横坐标更大的情况，对于这样的情况，我们强制将这个矩形的左侧横坐标和起点的横坐标取 $max$，但这样就相当于打通了这条黄色的路径。原图中本应不存在横坐标递增的路径，但现在存在了。而由引理，必定存在横坐标或纵坐标递增的路径，那么说明纵坐标递增的路径在这张图也一定存在，所以对于这张图，这样做它输出的答案应该为 $S,T$ 的曼哈顿距离。</li></ul><p><img src="../Exam_20200715_2.png" alt="Exam_20200715_2"></p><ul><li>我们将纵坐标递增的答案也类似的算出来。</li><li>若存在一条横，纵坐标都递增的路径，那么两个答案都应该为 $S,T$ 的曼哈顿距离。</li><li>若不存在，那么这两个答案一个输出 $S,T$ 的曼哈顿距离，一个输出正确答案。那么正确答案显然不小于曼哈顿距离。</li><li>综上所述，我们直接把这两个答案取 $\max$ 就行了，是不是很巧妙，好写？（手动狗头）</li><li>时间复杂度 $O(n\log n)$。题目来源：gym102201D。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*********************************************************************</span></span><br><span class="line"><span class="comment">Problem:travel</span></span><br><span class="line"><span class="comment">Author:hydd</span></span><br><span class="line"><span class="comment">Date:2020/7/17</span></span><br><span class="line"><span class="comment">*********************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> File(x) freopen(x<span class="meta-string">&quot;.in&quot;</span>,<span class="meta-string">&quot;r&quot;</span>,stdin);freopen(x<span class="meta-string">&quot;.out&quot;</span>,<span class="meta-string">&quot;w&quot;</span>,stdout);</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,sx,sy,tx,ty;</span><br><span class="line"><span class="keyword">int</span> f[<span class="number">410000</span>][<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> tree[<span class="number">1610000</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> a,b,c,d;</span><br><span class="line">&#125; s[<span class="number">210000</span>],t[<span class="number">210000</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> now,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">tree[now]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (l==r) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">build(now&lt;&lt;<span class="number">1</span>,l,mid); build(now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> now,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (l==x&amp;&amp;r==y)&#123;</span><br><span class="line">tree[now]=v;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (y&lt;=mid) change(now&lt;&lt;<span class="number">1</span>,l,mid,x,y,v);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (x&gt;mid) change(now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,x,y,v);</span><br><span class="line"><span class="keyword">else</span> &#123; change(now&lt;&lt;<span class="number">1</span>,l,mid,x,mid,v); change(now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,mid+<span class="number">1</span>,y,v);&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> now,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (l==r) <span class="keyword">return</span> tree[now];</span><br><span class="line"><span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (x&lt;=mid) <span class="keyword">return</span> max(tree[now],query(now&lt;&lt;<span class="number">1</span>,l,mid,x));</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> max(tree[now],query(now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,x));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmpx</span><span class="params">(<span class="keyword">const</span> node &amp;x,<span class="keyword">const</span> node &amp;y)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x.a&lt;y.a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmpy</span><span class="params">(<span class="keyword">const</span> node &amp;x,<span class="keyword">const</span> node &amp;y)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x.b&lt;y.b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> cnt,num[<span class="number">410000</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (sx&gt;tx)&#123;</span><br><span class="line">swap(sx,tx);</span><br><span class="line">swap(sy,ty);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) t[i]=s[i];</span><br><span class="line"><span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">num[++cnt]=sy; num[++cnt]=ty;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">num[++cnt]=t[i].b;</span><br><span class="line">num[++cnt]=t[i].d;</span><br><span class="line">&#125;</span><br><span class="line">sort(num+<span class="number">1</span>,num+cnt+<span class="number">1</span>); cnt=unique(num+<span class="number">1</span>,num+cnt+<span class="number">1</span>)-num<span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">t[<span class="number">0</span>]=(node)&#123;sx,sy,sx,sy&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) t[i].a=max(t[i].a,sx);</span><br><span class="line"></span><br><span class="line">t[++n]=(node)&#123;tx,ty,tx,ty&#125;;</span><br><span class="line">sort(t+<span class="number">1</span>,t+n+<span class="number">1</span>,cmpx);</span><br><span class="line"></span><br><span class="line">build(<span class="number">1</span>,<span class="number">1</span>,cnt);</span><br><span class="line">f[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">0</span>; f[<span class="number">0</span>][<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> L,R;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>,j;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span> (t[i].c&lt;=sx) <span class="keyword">continue</span>;</span><br><span class="line">L=lower_bound(num+<span class="number">1</span>,num+cnt+<span class="number">1</span>,t[i].b)-num;</span><br><span class="line">R=lower_bound(num+<span class="number">1</span>,num+cnt+<span class="number">1</span>,t[i].d)-num;</span><br><span class="line"></span><br><span class="line">j=query(<span class="number">1</span>,<span class="number">1</span>,cnt,L);</span><br><span class="line">f[i][<span class="number">0</span>]=min(f[j][<span class="number">0</span>]+<span class="built_in">abs</span>(t[j].b-t[i].b),f[j][<span class="number">1</span>]+<span class="built_in">abs</span>(t[j].d-t[i].b));</span><br><span class="line"></span><br><span class="line">j=query(<span class="number">1</span>,<span class="number">1</span>,cnt,R);</span><br><span class="line">f[i][<span class="number">1</span>]=min(f[j][<span class="number">0</span>]+<span class="built_in">abs</span>(t[j].b-t[i].d),f[j][<span class="number">1</span>]+<span class="built_in">abs</span>(t[j].d-t[i].d));</span><br><span class="line"></span><br><span class="line">change(<span class="number">1</span>,<span class="number">1</span>,cnt,L,R,i);</span><br><span class="line"><span class="keyword">if</span> (t[i].a==tx&amp;&amp;t[i].b==ty&amp;&amp;t[i].c==tx&amp;&amp;t[i].d==ty) <span class="keyword">return</span> f[i][<span class="number">0</span>]+(tx-sx);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">File(<span class="string">&quot;travel&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d%d&quot;</span>,&amp;n,&amp;sx,&amp;sy,&amp;tx,&amp;ty);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>,&amp;s[i].a,&amp;s[i].b,&amp;s[i].c,&amp;s[i].d);</span><br><span class="line"><span class="keyword">int</span> ans1=solve(n);</span><br><span class="line">swap(sx,sy); swap(tx,ty);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) swap(s[i].a,s[i].b),swap(s[i].c,s[i].d);</span><br><span class="line"><span class="keyword">int</span> ans2=solve(n);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,max(ans1,ans2));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="仙人掌（cactus）"><a href="#仙人掌（cactus）" class="headerlink" title="仙人掌（cactus）"></a>仙人掌（cactus）</h2><ul><li>按照行列式的定义来计算：对于任意排列 $p$，计算它的逆序对个数，乘上 $\prod\limits_ia_{i,p_i}$，然后求和。</li><li>这道题 $a$ 矩阵中的数只有可能是 $0/1$。$\prod\limits_ia_{i,p_i}$ 在图上的贡献，相当于是选了原图中出现过的 $n$ 条边，第 $i$ 条边为 $(i,p[i])$，这样会形成若干个环。</li><li>但是这些 $p$ 的逆序对不好计算。但是我们可以发现，交换 $i$ 和 $j$ 以及指向它们的边相当于是交换邻接矩阵的两行两列，对行列式的取值没有影响。所以我们可以考虑对于一种排列，将每一个环移成编号连续的。</li><li>那么环内就是类似于 $2,3,4,5,6\cdots,n,1$，所以环长为偶数贡献为 $-1$，否则为 $1$。</li><li><p>因为每一种交换方法都是唯一对应的，所以交换完之后计算的排列的贡献回到原矩阵后不会算重。</p></li><li><p>由于是仙人掌，我们建圆方树，然后在圆方树上 $dp$ 即可。</p></li><li>一条边的两个端点也可以算作一个环，仙人掌上的一个环如果对应排列中的一个环，因为有顺时针和逆时针两种方案，贡献要乘 $2$。</li><li>$dp$ 的定义详见代码。题目来源：gym102201C。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*********************************************************************</span></span><br><span class="line"><span class="comment">Problem:cactus</span></span><br><span class="line"><span class="comment">Author:hydd</span></span><br><span class="line"><span class="comment">Date:2020/7/17</span></span><br><span class="line"><span class="comment">*********************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> File(x) freopen(x<span class="meta-string">&quot;.in&quot;</span>,<span class="meta-string">&quot;r&quot;</span>,stdin);freopen(x<span class="meta-string">&quot;.out&quot;</span>,<span class="meta-string">&quot;w&quot;</span>,stdout);</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,cnt;</span><br><span class="line"><span class="keyword">int</span> edgenum,vet[<span class="number">410000</span>],Next[<span class="number">410000</span>],Head[<span class="number">210000</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">vet[++edgenum]=v;</span><br><span class="line">Next[edgenum]=Head[u];</span><br><span class="line">Head[u]=edgenum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> dtime,dfn[<span class="number">210000</span>],low[<span class="number">210000</span>];</span><br><span class="line"><span class="keyword">int</span> top,st[<span class="number">210000</span>];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[<span class="number">410000</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">dfn[u]=low[u]=++dtime;</span><br><span class="line">st[++top]=u;</span><br><span class="line"><span class="keyword">int</span> v,tmp;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> e=Head[u];e;e=Next[e])&#123;</span><br><span class="line">v=vet[e];</span><br><span class="line"><span class="keyword">if</span> (!dfn[v])&#123;</span><br><span class="line">tarjan(v);</span><br><span class="line">low[u]=min(low[u],low[v]);</span><br><span class="line"><span class="keyword">if</span> (low[v]==dfn[u])&#123;<span class="comment">//找到一个以u为根的点双</span></span><br><span class="line">cnt++;</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">tmp=st[top--];</span><br><span class="line">G[cnt].push_back(tmp);</span><br><span class="line">G[tmp].push_back(cnt);</span><br><span class="line">&#125; <span class="keyword">while</span> (tmp!=v);</span><br><span class="line">G[cnt].push_back(u);</span><br><span class="line">G[u].push_back(cnt);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> low[u]=min(low[u],dfn[v]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> f[<span class="number">410000</span>][<span class="number">2</span>],g[<span class="number">410000</span>][<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> t[<span class="number">410000</span>];</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">f[u][0/1]</span></span><br><span class="line"><span class="comment">u is &quot;circle node&quot;:  x is chose?</span></span><br><span class="line"><span class="comment">u is &quot;square node&quot;: fa is chose? </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (u&lt;=n)&#123;<span class="comment">// u is &quot;circle node&quot;</span></span><br><span class="line">f[u][<span class="number">0</span>]=<span class="number">1</span>; f[u][<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> v:G[u])&#123;</span><br><span class="line"><span class="keyword">if</span> (v==fa) <span class="keyword">continue</span>;</span><br><span class="line">dfs(v,u);<span class="comment">// v must be &quot;square node&quot;</span></span><br><span class="line">f[u][<span class="number">1</span>]=(<span class="number">1l</span>l*f[u][<span class="number">1</span>]*f[v][<span class="number">0</span>]+<span class="number">1l</span>l*f[u][<span class="number">0</span>]*f[v][<span class="number">1</span>])%Mod;</span><br><span class="line">f[u][<span class="number">0</span>]=<span class="number">1l</span>l*f[u][<span class="number">0</span>]*f[v][<span class="number">0</span>]%Mod;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span>&#123;<span class="comment">// u is &quot;circle node&quot;</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> v:G[u])&#123;</span><br><span class="line"><span class="keyword">if</span> (v==fa) <span class="keyword">continue</span>;</span><br><span class="line">dfs(v,u);<span class="comment">// v must be &quot;square node&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> flag=<span class="literal">false</span>;</span><br><span class="line"><span class="keyword">int</span> tot=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> v:G[u])&#123;</span><br><span class="line"><span class="keyword">if</span> (v==fa)&#123;</span><br><span class="line">flag=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (flag) t[++tot]=v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> v:G[u])&#123;</span><br><span class="line"><span class="keyword">if</span> (v==fa) <span class="keyword">break</span>;</span><br><span class="line">t[++tot]=v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (tot==<span class="number">1</span>)&#123;<span class="comment">// is a edge (x,y) -&gt; edge (x,u)+(u,y)</span></span><br><span class="line">f[u][<span class="number">0</span>]=f[t[<span class="number">1</span>]][<span class="number">1</span>];</span><br><span class="line">f[u][<span class="number">1</span>]=(Mod-f[t[<span class="number">1</span>]][<span class="number">0</span>])%Mod;<span class="comment">// link(u,fa) cost:-1</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// not a edge, is a circle</span></span><br><span class="line"><span class="keyword">int</span> sum=<span class="number">1</span>; <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=tot;i++) sum=<span class="number">1l</span>l*sum*f[t[i]][<span class="number">0</span>]%Mod;</span><br><span class="line"></span><br><span class="line">g[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>; g[<span class="number">0</span>][<span class="number">1</span>]=<span class="number">0</span>;<span class="comment">// g[0/1]: fa is chose? </span></span><br><span class="line">g[<span class="number">1</span>][<span class="number">0</span>]=f[t[<span class="number">1</span>]][<span class="number">1</span>];</span><br><span class="line">g[<span class="number">1</span>][<span class="number">1</span>]=(Mod-f[t[<span class="number">1</span>]][<span class="number">0</span>])%Mod; <span class="comment">// link(t[1],fa) cost:-1</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=tot;i++)&#123;</span><br><span class="line">g[i][<span class="number">0</span>]=(<span class="number">1l</span>l*f[t[i]][<span class="number">1</span>]*g[i<span class="number">-1</span>][<span class="number">0</span>] <span class="comment">// t[i] is chose</span></span><br><span class="line">+<span class="number">998244352l</span>l*f[t[i]][<span class="number">0</span>]%Mod*f[t[i<span class="number">-1</span>]][<span class="number">0</span>]%Mod*g[i<span class="number">-2</span>][<span class="number">0</span>])%Mod;<span class="comment">//link(t[i],t[i-1]) cost:-1</span></span><br><span class="line">g[i][<span class="number">1</span>]=(<span class="number">1l</span>l*f[t[i]][<span class="number">1</span>]*g[i<span class="number">-1</span>][<span class="number">1</span>] <span class="comment">// t[i] is chose</span></span><br><span class="line">+<span class="number">998244352l</span>l*f[t[i]][<span class="number">0</span>]%Mod*f[t[i<span class="number">-1</span>]][<span class="number">0</span>]%Mod*g[i<span class="number">-2</span>][<span class="number">1</span>])%Mod;<span class="comment">//link(t[i],t[i-1]) cost:-1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> op=(tot&amp;<span class="number">1</span>?Mod<span class="number">-2</span>:<span class="number">2</span>); <span class="comment">// (-2)^(circle_len-1), circle_len = tot + 1(fa)</span></span><br><span class="line">f[u][<span class="number">0</span>]=g[tot][<span class="number">0</span>];</span><br><span class="line">f[u][<span class="number">1</span>]=(<span class="number">1l</span>l*op*sum <span class="comment">// t[1],t[2]...,t[n] is a circle</span></span><br><span class="line">+g[tot][<span class="number">1</span>]</span><br><span class="line">+<span class="number">998244352l</span>l*g[tot<span class="number">-1</span>][<span class="number">0</span>]%Mod*f[t[tot]][<span class="number">0</span>])%Mod; <span class="comment">// link(t[tot],fa) cost:-1</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">File(<span class="string">&quot;cactus&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">int</span> u,v;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;u,&amp;v);</span><br><span class="line">addedge(u,v); addedge(v,u);</span><br><span class="line">&#125;</span><br><span class="line">cnt=n;</span><br><span class="line">tarjan(<span class="number">1</span>);</span><br><span class="line">dfs(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,f[<span class="number">1</span>][<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;得分（score&quot;&gt;&lt;a href=&quot;#得分（score&quot; class=&quot;headerlink&quot; title=&quot;得分（score)&quot;&gt;&lt;/a&gt;得分（score)&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;有一个部分分是 $\frac{a_i}{t_i}$ 互不相同，我们考虑 $\</summary>
      
    
    
    
    <category term="NOI模拟赛" scheme="http://hydd.cf/categories/NOI%E6%A8%A1%E6%8B%9F%E8%B5%9B/"/>
    
    
  </entry>
  
  <entry>
    <title>ZJOI2020 题解</title>
    <link href="http://hydd.cf/2020/07/15/sol_16/"/>
    <id>http://hydd.cf/2020/07/15/sol_16/</id>
    <published>2020-07-14T16:00:00.000Z</published>
    <updated>2020-09-30T13:29:00.284Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Day1T1"><a href="#Day1T1" class="headerlink" title="Day1T1"></a>Day1T1</h2><ul><li>现在只会 $40pts$。</li><li>首先记录原串所有前缀的双 $hash$ 值。</li><li>然后，求出所有相同 本质相同的 ，符合条件的 子串，一起考虑它们对询问的答案。</li><li>对于这些串，如果它们所在的位置分别为 $[l_1,r_1],[l_2,r_2],…,[l_k,r_k]$。</li><li>我们把询问当做一个矩阵，贡献就是矩形加。$(1,l_1)-(r_1,n),(l_1+1,l_2)-(r_2,n),…,(l_{k-1}+1,l_k)-(r_k,n)$ 这些矩形都 $+1$ 即可。</li><li>这个可以差分前缀和，时间复杂度有关本质不同的子串个数（感觉为 $O(n)$）。</li><li>故总时间复杂度为 $O(n^2)$。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Mod1=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Mod2=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">pair</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">int</span> n,q; ll a[<span class="number">5100</span>][<span class="number">5100</span>]; </span><br><span class="line">ll hash1[<span class="number">210000</span>],hash2[<span class="number">210000</span>];</span><br><span class="line">ll pow1[<span class="number">210000</span>],pow2[<span class="number">210000</span>];</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">210000</span>];</span><br><span class="line"><span class="built_in">map</span>&lt;pii,<span class="keyword">int</span>&gt; mp;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec[<span class="number">210000</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">hs1</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (hash1[r]-hash1[l<span class="number">-1</span>]*pow1[r-l+<span class="number">1</span>]%Mod1+Mod1)%Mod1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">hs2</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (hash2[r]-hash2[l<span class="number">-1</span>]*pow2[r-l+<span class="number">1</span>]%Mod2+Mod2)%Mod2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;q);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s+<span class="number">1</span>);</span><br><span class="line">    pow1[<span class="number">0</span>]=<span class="number">1</span>; pow2[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) pow1[i]=pow1[i<span class="number">-1</span>]*<span class="number">3</span>%Mod1;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) pow2[i]=pow2[i<span class="number">-1</span>]*<span class="number">3</span>%Mod2;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) hash1[i]=(hash1[i<span class="number">-1</span>]*<span class="number">3</span>+(s[i]-<span class="string">&#x27;a&#x27;</span>+<span class="number">1</span>))%Mod1;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) hash2[i]=(hash2[i<span class="number">-1</span>]*<span class="number">3</span>+(s[i]-<span class="string">&#x27;a&#x27;</span>+<span class="number">1</span>))%Mod2;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> mid=<span class="number">1</span>;mid*<span class="number">2</span>&lt;=n;mid++)&#123;</span><br><span class="line">        mp.clear(); <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i+mid*<span class="number">2</span><span class="number">-1</span>&lt;=n;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> x1,x2,y1,y2;</span><br><span class="line">            x1=hs1(i,i+mid<span class="number">-1</span>); y1=hs1(i+mid,i+mid*<span class="number">2</span><span class="number">-1</span>);</span><br><span class="line">            x2=hs2(i,i+mid<span class="number">-1</span>); y2=hs2(i+mid,i+mid*<span class="number">2</span><span class="number">-1</span>);</span><br><span class="line">            <span class="keyword">if</span> (x1==y1&amp;&amp;x2==y2)&#123;</span><br><span class="line">                <span class="keyword">if</span> (!mp[pii(x1,x2)])&#123; mp[pii(x1,x2)]=++cnt; vec[cnt].push_back(<span class="number">0</span>);&#125;</span><br><span class="line">                vec[mp[pii(x1,x2)]].push_back(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;(<span class="keyword">int</span>)vec[i].size();j++)&#123;</span><br><span class="line">                a[vec[i][j<span class="number">-1</span>]+<span class="number">1</span>][vec[i][j]+mid*<span class="number">2</span><span class="number">-1</span>]++; </span><br><span class="line">                a[vec[i][j]+<span class="number">1</span>][vec[i][j]+mid*<span class="number">2</span><span class="number">-1</span>]--;</span><br><span class="line">            &#125;</span><br><span class="line">            vec[i].clear();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">            a[i][j]+=a[i<span class="number">-1</span>][j]+a[i][j<span class="number">-1</span>]-a[i<span class="number">-1</span>][j<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">int</span> x,y;</span><br><span class="line">    <span class="keyword">while</span> (q--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;x,&amp;y);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,a[x][y]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Day1T2"><a href="#Day1T2" class="headerlink" title="Day1T2"></a>Day1T2</h2><ul><li>思路类似于去年的那道线段树，就是分成 $5$ 类点来分别算贡献。（参考了pinkrabbit的 $blog$：<a href="https://www.cnblogs.com/PinkRabbit/p/ZJOI2019D1T2.html）">https://www.cnblogs.com/PinkRabbit/p/ZJOI2019D1T2.html）</a></li><li>设当前区间为 $[l,r]$ ,父区间为 $[fa_l,fa_r]$。</li><li><p>令 $tot_i$ 表示第 $i$ 类点的个数，那么：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">tot1=seg_cnt-l*(n-r+<span class="number">1</span>)-(getcnt(l<span class="number">-1</span>)+getcnt(n-r));</span><br><span class="line"><span class="keyword">if</span> (l==fa_l) tot2=l*(fa_r-r);</span><br><span class="line"><span class="keyword">else</span> tot2=(l-fa_l)*(n-r+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (l==fa_l) tot3=getsum(n-fa_r+<span class="number">1</span>,n-(r+<span class="number">1</span>)+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">else</span> tot3=getsum(fa_l,l<span class="number">-1</span>);</span><br><span class="line">tot4=l*(n-r+<span class="number">1</span>)-tot2;</span><br><span class="line">tot5=getcnt(l<span class="number">-1</span>)+getcnt(n-r)-tot3;</span><br></pre></td></tr></table></figure></li></ul><ul><li>其中，$getcnt(x)$ 是 $x(x+1)/2$ ，$getsum(l,r)$ 是 $l+(l+1)+\cdots+r$。$seg_{cnt}=getcnt(n)$。</li><li>用同样的 $f,g$ 的定义，一次操作后，有：$<f[u],g[u]>\ =\ &lt;\frac{tot_1<em>0+tot_2</em>1+tot_3<em>g[u]+tot_4</em>f[u]+tot_5<em>f[u]}{seg_{cnt}},\frac{tot_1</em>0+tot_2<em>1+tot_3</em>g[u]+tot_4*1+tot_5g[u]}{seg_{cnt}}&gt;$</li><li>设 $f[u]=af[u]+bg[u]+c,g[u]=xg[u]+y$ ，一个 $3*3$ 的矩阵即可。时间复杂度 $O(n \log K)$。为了卡常可以把矩乘展开。（没加快读，目前loj Rank1）</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">int</span> n,k,ans; ll seg_cnt,inv;</span><br><span class="line">ll tot1,tot2,tot3,tot4,tot5;</span><br><span class="line">ll a,b,c,x,y;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">getcnt</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123; <span class="keyword">return</span> (<span class="number">1l</span>l*n*(n+<span class="number">1</span>)/<span class="number">2</span>)%Mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">getsum</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123; <span class="keyword">return</span> (<span class="number">1l</span>l*(x+y)*(y-x+<span class="number">1</span>)/<span class="number">2</span>)%Mod;&#125;</span><br><span class="line"><span class="function">ll <span class="title">getinv</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x==<span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1l</span>l*(Mod-Mod/x)*getinv(Mod%x)%Mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">mat</span>&#123;</span></span><br><span class="line">    ll m11,m12,m13,m21,m22,m23,m31,m32,m33;</span><br><span class="line">    mat()&#123; m11=m12=m13=m21=m22=m23=m31=m32=m33=<span class="number">0</span>;&#125;</span><br><span class="line">    mat(ll v11,ll v12,ll v13,ll v21,ll v22,ll v23,ll v31,ll v32,ll v33)&#123;</span><br><span class="line">        m11=v11; m21=v21; m31=v31;</span><br><span class="line">        m12=v12; m22=v22; m32=v32;</span><br><span class="line">        m13=v13; m23=v23; m33=v33;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="keyword">operator</span>*=(<span class="keyword">const</span> mat &amp;x)&#123;</span><br><span class="line">            ll t1,t2;</span><br><span class="line">            t1=(m11*x.m11+m12*x.m21+m13*x.m31)%Mod;</span><br><span class="line">            t2=(m11*x.m12+m12*x.m22+m13*x.m32)%Mod;</span><br><span class="line">            m13=(m11*x.m13+m12*x.m23+m13*x.m33)%Mod;</span><br><span class="line">            m11=t1; m12=t2;</span><br><span class="line"></span><br><span class="line">            t1=(m21*x.m11+m22*x.m21+m23*x.m31)%Mod;</span><br><span class="line">            t2=(m21*x.m12+m22*x.m22+m23*x.m32)%Mod;</span><br><span class="line">            m23=(m21*x.m13+m22*x.m23+m23*x.m33)%Mod;</span><br><span class="line">            m21=t1; m22=t2;</span><br><span class="line"></span><br><span class="line">            t1=(m31*x.m11+m32*x.m21+m33*x.m31)%Mod;</span><br><span class="line">            t2=(m31*x.m12+m32*x.m22+m33*x.m32)%Mod;</span><br><span class="line">            m33=(m31*x.m13+m32*x.m23+m33*x.m33)%Mod;</span><br><span class="line">            m31=t1; m32=t2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qpow</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a=k;</span><br><span class="line">    <span class="function">mat <span class="title">res</span><span class="params">(<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="function">mat   <span class="title">x</span><span class="params">(::a,::b,::c,<span class="number">0</span>,::x,::y,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="keyword">while</span> (a)&#123;</span><br><span class="line">        <span class="keyword">if</span> (a&amp;<span class="number">1</span>) res*=x;</span><br><span class="line">        x*=x; a&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res.m13;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getans</span><span class="params">()</span></span>&#123;</span><br><span class="line">    tot1%=Mod; tot2%=Mod; tot3%=Mod;</span><br><span class="line">    tot4%=Mod; tot5%=Mod;</span><br><span class="line">    a=tot4+tot5; b=tot3; c=tot2;</span><br><span class="line">    x=tot3+tot5; y=tot2+tot4;</span><br><span class="line">    a=a*inv%Mod; b=b*inv%Mod; c=c*inv%Mod;    <span class="comment">//f[i][u]=a*f[i-1][u]+b*g[i-1][u]+c</span></span><br><span class="line">    x=x*inv%Mod; y=y*inv%Mod;                <span class="comment">//g[i][u]=x*g[i-1][u]+y</span></span><br><span class="line">    <span class="keyword">return</span> qpow();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> fa_l,<span class="keyword">int</span> fa_r)</span></span>&#123;</span><br><span class="line">    tot1=seg_cnt<span class="number">-1l</span>l*l*(n-r+<span class="number">1</span>)-(getcnt(l<span class="number">-1</span>)+getcnt(n-r));</span><br><span class="line">    <span class="keyword">if</span> (l==fa_l) tot2=<span class="number">1l</span>l*l*(fa_r-r);</span><br><span class="line">    <span class="keyword">else</span> tot2=<span class="number">1l</span>l*(l-fa_l)*(n-r+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (l==fa_l) tot3=getsum(n-fa_r+<span class="number">1</span>,n-(r+<span class="number">1</span>)+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">else</span> tot3=getsum(fa_l,l<span class="number">-1</span>);</span><br><span class="line">    tot4=<span class="number">1l</span>l*l*(n-r+<span class="number">1</span>)-tot2;</span><br><span class="line">    tot5=getcnt(l<span class="number">-1</span>)+getcnt(n-r)-tot3;</span><br><span class="line">    ans=(ans+getans())%Mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l==r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> mid;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;mid);</span><br><span class="line">    solve(l,mid); solve(mid+<span class="number">1</span>,r);</span><br><span class="line">    calc(l,mid,l,r); calc(mid+<span class="number">1</span>,r,l,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;k);</span><br><span class="line">    seg_cnt=getcnt(n); inv=getinv(seg_cnt);</span><br><span class="line">    tot1=seg_cnt<span class="number">-1</span>; tot2=<span class="number">1</span>; tot3=<span class="number">0</span>; tot4=<span class="number">0</span>; tot5=<span class="number">0</span>; ans=getans();</span><br><span class="line">    solve(<span class="number">1</span>,n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Day1T3"><a href="#Day1T3" class="headerlink" title="Day1T3"></a>Day1T3</h2><ul><li>首先有一个结论：如果只有第一种操作，那么答案为 $\frac{\sum\mid a_i-a_{i-1}\mid}{2}$（NOIP2018D1T1）。在序列最前面和最后面都添2个0。</li><li>然后，我们设 $b_i$ 为第 $i$ 个位置做了几次 $2/3$ 操作，$c_i$ 为第 $i$ 个位置做了几次 $1$ 操作。同样在序列最前面和最后面都添2个0。显然，$a_i=b_i+c_i$。</li><li>那么，我们可以发现：若 $b_{i-2}+c_{i-1}\geqslant a_i$，那么 $b_{i-2}\geqslant b_i,c_{i-1}\geqslant c_i$。反之亦然。</li><li>证明可以考虑：假设 $b_{i-2}&gt; b_i,c_{i-1}&lt;c_i$，那么将 $b_i—,c_i++$ 答案不会变劣，其它情况类似。</li><li>那么我们可以考虑贪心：<ul><li>从左到右考虑每个位置 $i$。考虑 $i$ 的时候确定 $i-1$。</li><li>首先，我们先使 $b_i=b_{i-2},c_i=c_{i-1}$。</li><li>我们记 $res[i]$ 表示当前的贪心得到的 $b_i+c_i$ 与 $a_i$ 的差值。（即 $a_i-(b_i+c_i)$）。</li><li>此时，我们要确定 $i-1$。</li><li>若 $res[i]&gt;0,res[i-1]&gt;0$，那么，我们可以将 $c_i++,c_{i-1}++$。那么 $res[i]$ 和 $res[i-1]$ 都 $—$。</li><li>若 $res[i]&lt;0,res[i-1]&lt;0$，那么，我们可以将 $c_i—,c_{i-1}—$。那么 $res[i]$ 和 $res[i-1]$ 都 $++$。</li><li>否则，我们可以将 $c_{i-1}+=res[i-1]$。同时 $res[i-1]$ 清零。</li><li>需要注意，如果 $c_i&lt;0$ 或 $c_{i+1}&lt;0$，要强制变为 $0$。</li></ul></li><li>最后得到的 $b,c$ 即为最优解。证明可以考虑每一步的最优性，对答案的影响。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">int</span> T,n,a[<span class="number">110000</span>],b[<span class="number">110000</span>],c[<span class="number">110000</span>];</span><br><span class="line">ll ans;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getres</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123; <span class="keyword">return</span> a[x]-(b[x]+c[x]);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">myabs</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123; <span class="keyword">return</span> x&gt;<span class="number">0</span>?x:-x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n); n+=<span class="number">4</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">3</span>;i&lt;=n<span class="number">-2</span>;i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">        b[<span class="number">1</span>]=<span class="number">0</span>; c[<span class="number">1</span>]=<span class="number">0</span>; b[<span class="number">2</span>]=<span class="number">0</span>; c[<span class="number">2</span>]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> res1,res2,tmp;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">3</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            b[i]=b[i<span class="number">-2</span>]; c[i]=c[i<span class="number">-1</span>];</span><br><span class="line">            res1=getres(i<span class="number">-1</span>); res2=getres(i);</span><br><span class="line">            <span class="keyword">if</span> (<span class="number">1l</span>l*res1*res2&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span> (res1&gt;<span class="number">0</span>) tmp=min(res1,res2);</span><br><span class="line">                <span class="keyword">else</span> tmp=max(res1,res2);</span><br><span class="line">                c[i<span class="number">-1</span>]+=tmp; c[i]+=tmp;</span><br><span class="line">                res1=getres(i<span class="number">-1</span>); res2=getres(i);</span><br><span class="line">            &#125;</span><br><span class="line">            b[i<span class="number">-1</span>]+=res1; res1=getres(i<span class="number">-1</span>);</span><br><span class="line">            <span class="keyword">if</span> (b[i<span class="number">-1</span>]&lt;<span class="number">0</span>)&#123;</span><br><span class="line">                tmp=-b[i<span class="number">-1</span>];</span><br><span class="line">                b[i<span class="number">-1</span>]+=tmp;</span><br><span class="line">                c[i<span class="number">-1</span>]-=tmp; c[i]-=tmp;</span><br><span class="line">                res2=getres(i);                </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (c[i<span class="number">-1</span>]&lt;<span class="number">0</span>)&#123;</span><br><span class="line">                tmp=-c[i<span class="number">-1</span>];</span><br><span class="line">                c[i<span class="number">-1</span>]+=tmp; c[i]+=tmp;</span><br><span class="line">                b[i<span class="number">-1</span>]-=tmp;</span><br><span class="line">                res2=getres(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        b[<span class="number">1</span>]=<span class="number">0</span>; b[<span class="number">2</span>]=<span class="number">0</span>; c[<span class="number">1</span>]=<span class="number">0</span>; c[<span class="number">2</span>]=<span class="number">0</span>;</span><br><span class="line">        b[n<span class="number">-1</span>]=<span class="number">0</span>; b[n]=<span class="number">0</span>; c[n<span class="number">-1</span>]=<span class="number">0</span>; c[n]=<span class="number">0</span>;</span><br><span class="line">        ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">3</span>;i&lt;=n;i++) ans+=myabs(b[i]-b[i<span class="number">-2</span>]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++) ans+=myabs(c[i]-c[i<span class="number">-1</span>]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans/<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Day2T1"><a href="#Day2T1" class="headerlink" title="Day2T1"></a>Day2T1</h2><ul><li>现在只会 $30pts$。</li><li>先考虑树的做法，以 $1$ 号点为根考虑。</li><li>首先每棵子树都是独立的，就是 $Alice$ 往任何一棵子树走，和另外的子树没有关系。</li><li>设 $g[i]$ 表示 $i$ 的子树内，离 $i$ 距离最近的在 $S$ 中的点的距离，$f[i]$ 表示初始时 $Alice$ 在 $i$，$Bob$ 至少需要先额外行动多少个回合才能获胜（不可能获胜则为 $INF$）。</li><li>那么 $g[u]=\min_{v\in son[u]}g[v]+len(u,v)$，$f[u]=\sum_{v\in son[u]}\max\{\min\{g[v]+1,f[v]\}-len(u,v)\}$。（$+1$ 是因为 $Alice$ 先手，它要先到必须比 $Alice$ 快一步）。</li><li>所有在 $S$ 中的点，$g$ 为 $0$，$f$ 也为 $0$（这个 $f=0$ 可能不严谨，但是只要不对它父亲的 $f$ 有贡献就可以了）。</li><li>所有在 $T$ 中的点，$f$ 为 $INF$ （$Bob$ 不可能赢）。</li><li>这样我们可以发现，能得 $25pts$，分别是 $1,2,10,11,12$。其中 $10,11,12$ 把一个 $S$ 中的点拆开分成两个点，它就是一棵树了。在实现的时候不用显式拆开，因为这样的图对 $dp$ 过程其实是没有影响的。</li><li>剩下的 $5pts$，是 $15$，$|T|=1$。我们可以发现，实际上就是 $Bob$ 到 $T$ 中不经过 $1$ 号点的距离比 $Alice$ 严格小就可以了，只需要输出 $\max\{0,\min\{dist(s_i,t,\texttt{不经过1号点})\}-dist(1,t)+1\}$ 即可。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">pair</span>&lt;ll,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">const</span> ll INF=<span class="number">1l</span>l&lt;&lt;<span class="number">60</span>;</span><br><span class="line"><span class="keyword">int</span> T,n,m,s,t;</span><br><span class="line">ll f[<span class="number">510</span>],g[<span class="number">510</span>]; <span class="keyword">bool</span> is_s[<span class="number">510</span>],<span class="keyword">is_t</span>[<span class="number">510</span>];</span><br><span class="line"><span class="keyword">int</span> edgenum,vet[<span class="number">1100</span>],val[<span class="number">1100</span>],Next[<span class="number">1100</span>],Head[<span class="number">510</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> cost)</span></span>&#123;</span><br><span class="line">    vet[++edgenum]=v; val[edgenum]=cost;</span><br><span class="line">    Next[edgenum]=Head[u]; Head[u]=edgenum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> v;</span><br><span class="line">    <span class="keyword">if</span> (is_s[u])&#123; g[u]=<span class="number">0</span>; <span class="keyword">return</span>;&#125;</span><br><span class="line">    g[u]=INF;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> e=Head[u];e;e=Next[e])&#123;</span><br><span class="line">        v=vet[e];</span><br><span class="line">        <span class="keyword">if</span> (v!=fa)&#123;</span><br><span class="line">            dfs(v,u);</span><br><span class="line">            g[u]=min(g[u],g[v]+val[e]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> v; </span><br><span class="line">    <span class="keyword">if</span> (is_s[u])&#123; f[u]=<span class="number">0</span>; <span class="keyword">return</span>;&#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">is_t</span>[u])&#123; f[u]=INF; <span class="keyword">return</span>;&#125;</span><br><span class="line">    ll sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> e=Head[u];e;e=Next[e])&#123;</span><br><span class="line">        v=vet[e];</span><br><span class="line">        <span class="keyword">if</span> (v!=fa)&#123;</span><br><span class="line">            dfs2(v,u);</span><br><span class="line">            <span class="keyword">if</span> (sum!=INF)&#123;</span><br><span class="line">                <span class="keyword">if</span> (f[vet[e]]==INF&amp;&amp;g[vet[e]]==INF) sum=INF;</span><br><span class="line">                <span class="keyword">else</span> sum+=max(min(g[vet[e]]+<span class="number">1</span>,f[vet[e]])-val[e],<span class="number">0l</span>l);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    f[u]=sum;</span><br><span class="line">&#125;</span><br><span class="line">ll dis[<span class="number">510</span>]; <span class="keyword">bool</span> vis[<span class="number">510</span>];</span><br><span class="line"><span class="built_in">priority_queue</span>&lt;pii,<span class="built_in">vector</span>&lt;pii&gt;,greater&lt;pii&gt; &gt; que;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">(<span class="keyword">int</span> s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) dis[i]=INF,vis[i]=<span class="literal">false</span>;</span><br><span class="line">    que.push(pii(<span class="number">0</span>,s));</span><br><span class="line">    dis[s]=<span class="number">0</span>; vis[<span class="number">1</span>]=<span class="literal">true</span>; <span class="keyword">int</span> u;</span><br><span class="line">    <span class="keyword">while</span> (!que.empty())&#123;</span><br><span class="line">        u=que.top().second; que.pop();</span><br><span class="line">        <span class="keyword">if</span> (vis[u]) <span class="keyword">continue</span>;</span><br><span class="line">        vis[u]=<span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> e=Head[u];e;e=Next[e])</span><br><span class="line">            <span class="keyword">if</span> (dis[vet[e]]&gt;dis[u]+val[e])&#123;</span><br><span class="line">                dis[vet[e]]=dis[u]+val[e];</span><br><span class="line">                que.push(pii(dis[vet[e]],vet[e]));</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>,&amp;n,&amp;m,&amp;s,&amp;t);</span><br><span class="line">        edgenum=<span class="number">0</span>; <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) Head[i]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> u,v,c;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;u,&amp;v,&amp;c); c++;</span><br><span class="line">            addedge(u,v,c); addedge(v,u,c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) is_s[i]=<span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="keyword">is_t</span>[i]=<span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=s;i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;u),is_s[u]=<span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=t;i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;u),<span class="keyword">is_t</span>[u]=<span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (t==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> x;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">is_t</span>[i]) x=i;</span><br><span class="line">            dijkstra(x);</span><br><span class="line">            ll ans=INF;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">                <span class="keyword">if</span> (is_s[i]) ans=min(ans,dis[i]);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,min(<span class="number">1000000l</span>l,max(ans-dis[<span class="number">1</span>]+<span class="number">1</span>,<span class="number">0l</span>l)));</span><br><span class="line">        &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">            dfs(<span class="number">1</span>,<span class="number">0</span>); dfs2(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,min(<span class="number">1000000l</span>l,f[<span class="number">1</span>]));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h2 id="Day2T2"><a href="#Day2T2" class="headerlink" title="Day2T2"></a>Day2T2</h2><ul><li>前置知识： $min-max$ 容斥（期望形式）：$E(\min(S))=\sum_{T \subseteq S}(-1)^{|T|+1}E(\max(T))$，$\min(S)=\sum_{T \subseteq S}(-1)^{|T|+1}\max(T)$。本题中的 $E(\min(S))$ 表示 $S$ 中至少有一段长度为 $k$ 的连续数字都出现的期望时间，$E(\max(T))$ 表示 $T$ 中每一段长度为 $k$ 的连续数字都出现的期望时间（ $S,T$ 为段的集合）。</li><li>$70pts$（细节多，而且做复杂了，其实 $0/1$ 可以直接记在 $dp$ 值里）</li><li>设 $dp[i][j][0/1]$ 表示前 $i$ 个数，选了 $j$ 个数，集合大小奇偶性 $0/1$ 的方案数（其中第 $i$ 个数必须选），然后暴力 $dp$ ，枚举上一个选了的数，时间复杂度 $O(kn^2)$。</li><li>经过思考，由于值域是 $1\cdots 2m$ ，可以设 $dp[i][j][0/1]$ 表示当前值为 $i$ 的方案数，然后对于每个 $i$ 都计算（不管有没有在 $a$ 中出现过），在转移的时候再判断，没有出现的位置就不要转移过来。</li><li>初始时，$dp[i][K][1]=1$。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;=<span class="number">1</span>;k++)&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> t=<span class="number">1</span>;t&lt;i;t++)</span><br><span class="line">        <span class="keyword">if</span> (max(j-K,t-(i-j))&gt;=<span class="number">0</span>)</span><br><span class="line">            dp[i][j][k]=(dp[i][j][k]+dp[t][max(j-K,t-(i-j))][k^<span class="number">1</span>])%Mod;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    for (int t=1;t&lt;i-1;t++)</span></span><br><span class="line"><span class="comment">        if (max(j-1-K,t-(i-j))&gt;=0)</span></span><br><span class="line"><span class="comment">            dp[i-1][j-1][k]=(dp[i-1][j-1][k]+dp[t][max(j-1-K,t-(i-j))][k^1])%Mod;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>考虑 $dp[i][j][k]$ 和 $dp[i-1][j][k]$，相差的是一段前缀（上界不同）和 $dp[i-1][j-1][k\oplus 1]$，然后一个前缀和即可，但是实际上细节也不少（前缀和要把在 $a$ 中出现过的更新进去，并且还要考虑 $j-1==K\ and \ k==0$的情况），也调了不少时间，代码（$70pts$）：</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">int</span> m,K,a[<span class="number">210000</span>],len[<span class="number">210000</span>];</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">2</span>][<span class="number">5100</span>][<span class="number">2</span>],sum[<span class="number">10005</span>][<span class="number">5005</span>][<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> ans,Ans[<span class="number">210000</span>];</span><br><span class="line"><span class="keyword">bool</span> vis[<span class="number">410000</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getinv</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x==<span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1l</span>l*(Mod-Mod/x)*getinv(Mod%x)%Mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getnum</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> z)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x&lt;<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> (sum[x][y+<span class="number">1</span>][z]-sum[x][y][z]+Mod)%Mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;m,&amp;K);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">    sort(a+<span class="number">1</span>,a+m+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=m;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i+<span class="number">1</span>]==a[i]+<span class="number">1</span>) len[i]=len[i+<span class="number">1</span>];</span><br><span class="line">        len[i]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">        <span class="keyword">if</span> (len[i]&gt;=K) vis[a[i]]=<span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++) Ans[j]=(Ans[j<span class="number">-1</span>]+<span class="number">1l</span>l*m*getinv(j))%Mod;</span><br><span class="line">    <span class="keyword">if</span> (vis[<span class="number">1</span>]) sum[<span class="number">1</span>][K][<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> now=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=<span class="number">2</span>*m;i++,now^=<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;=<span class="number">1</span>;k++)</span><br><span class="line">                dp[now][j][k]=(dp[now^<span class="number">1</span>][j<span class="number">-1</span>][k]+getnum(i-K<span class="number">-1</span>,j-(K+<span class="number">1</span>),k^<span class="number">1</span>))%Mod;</span><br><span class="line">        dp[now^<span class="number">1</span>][K][<span class="number">1</span>]=(dp[now^<span class="number">1</span>][K][<span class="number">1</span>]+<span class="number">1</span>)%Mod;</span><br><span class="line">        <span class="keyword">if</span> (vis[i<span class="number">-1</span>])&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=m;j++)</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;=<span class="number">1</span>;k++)</span><br><span class="line">                    <span class="keyword">if</span> (k&amp;<span class="number">1</span>) ans=(ans+<span class="number">1l</span>l*dp[now^<span class="number">1</span>][j][k]*Ans[j])%Mod;</span><br><span class="line">                    <span class="keyword">else</span> ans=(ans<span class="number">-1l</span>l*dp[now^<span class="number">1</span>][j][k]*Ans[j]%Mod+Mod)%Mod;</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;=<span class="number">1</span>;k++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (vis[i<span class="number">-1</span>]) dp[now][j][k]=(dp[now][j][k]+dp[now^<span class="number">1</span>][j<span class="number">-1</span>][k^<span class="number">1</span>])%Mod;</span><br><span class="line">                <span class="keyword">if</span> (vis[i]) sum[i][j][k]=(sum[i<span class="number">-1</span>][j][k]+dp[now][j][k])%Mod;</span><br><span class="line">                <span class="keyword">else</span> sum[i][j][k]=sum[i<span class="number">-1</span>][j][k];</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">if</span> (vis[i]) sum[i][K][<span class="number">1</span>]=(sum[i][K][<span class="number">1</span>]+<span class="number">1</span>)%Mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (vis[<span class="number">2</span>*m])&#123;</span><br><span class="line">        dp[now][K][<span class="number">1</span>]=(dp[now][K][<span class="number">1</span>]+<span class="number">1</span>)%Mod;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=m;j++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;=<span class="number">1</span>;k++)</span><br><span class="line">                <span class="keyword">if</span> (k&amp;<span class="number">1</span>) ans=(ans+<span class="number">1l</span>l*dp[now][j][k]*Ans[j])%Mod;</span><br><span class="line">                <span class="keyword">else</span> ans=(ans<span class="number">-1l</span>l*dp[now][j][k]*Ans[j]%Mod+Mod)%Mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>$100pts$</li><li>我们可以发现一些性质：如果说我选了两个 $len=k$ 的段，它们有交集（1.）或者紧挨着一起（2.），并且第二段的开头和第一段的开头不相邻，那么它们的贡献实际上是没有的。如下图：</li></ul><p><img src="../ZJOI2020Day2T2_1.png" alt="img"></p><ul><li>为啥呢，由于 $i..i+k-1$ 是连续的，$i+t..i+t+k-1$ 也是连续的，那么 $i..i+t+k-1$ 也是连续的（$t\leq k$）。我们考虑这样：</li></ul><p><img src="../ZJOI2020Day2T2_2.png" alt="img"></p><ul><li>如果我们固定最上面的和最下面的必选，那么相当于固定了 $min-max$ 容斥中的 $\max(S)$，那么中间的 $i+1..i+t-1$ 开头的这些段选或不选对这个 $\max$ 是没有影响的，影响的只是前面的容斥系数。</li><li>$i+1..i+t-1$ 开头的这些段选或不选的容斥系数之和，通过二项式定理，应该为 $\binom{t-1}0(-1)^3+\binom{t-1}1(-1)^4+\binom{t-1}2(-1)^5+\cdots+\binom{t-1}{t-1}(-1)^{t+2}$，也就等于 $(-1)^3(1-1)^{t-1}=0$。（每一项系数是 $(-1)^{|T|+1}$）</li><li>要注意 $t=1$ 的时候是不能被抵消的。也就是只有可能是单独的 $len=k$ 的或开头连续的 $len=k+1$ 的（也就是两个 $len=k$ 开头连续的拼起来）。且所有段不能相交，两个 $len=k$ 的段之间不能连续。</li><li>现在考虑连续的 $len=k+1$ 的段和 $len=k$ 的段/ $len=k$ 的段和 $len=k+1$ 的段有没有贡献，这样的话相当于求长度为 $2k+1$ 的会不会全被抵消：</li></ul><p><img src="../ZJOI2020Day2T2_3.png" alt="img"></p><ul><li>显然，我们发现它的贡献并不能被消掉，因为 $i+k$ 这个数它是必须被选的，也就是右端点在 $i+k..i+2k-1$ 之间的段必须选择一个。</li><li>如果这些段都可以选或不选，通过二项式定理，那么贡献应该为 $0$。</li><li>但是必须选一个的话，那么 $\binom k0(-1)^3$ 这一项消失了，那么贡献应该为 $1$。也就是我们可以强制钦定 $k+1/k$ 或 $k/k+1$ 中 $k+1/k$ 有贡献。</li><li>再考虑两个连续的 $len=k+1$ 的段有没有贡献。同样的：</li></ul><p><img src="../ZJOI2020Day2T2_4.png" alt="img"></p><ul><li>情况1：右端点在 $i+k+1..i+2k-1$ 之间的段必须选择一个。情况2：右端点在 $i+k$ 和 $i+2k$ 都选了。</li><li>两种情况满足其一才能算入答案。若均不满足，也就是 $i+k+1..i+2k-1$ 都没选， $i+k$ 和 $i+2k$ 只选了一个或都没选。</li><li>如果这些段都可以选或不选，通过二项式定理，那么贡献应该为 $0$。全不满足的情况：<ol><li>$i+k..i+2k$ 都没选，其它都选了，贡献 $(-1)^3=-1$。</li><li>$i+k..i+2k-1$ 都没选，其它都选了，贡献 $(-1)^4=1$。</li><li>$i+k+1..i+2k$ 都没选，其它都选了，贡献 $(-1)^4=1$。</li></ol></li><li>故总贡献即为 $-1$，也就是 $(-1)^5$。（而 $k+1$ 本来就是长度为 $k$ 的 $4$ 个段，贡献即为 $-1$）</li></ul><ul><li>所以现在可以转化为，只选 $len=k/k+1$ 的段，其中 $len_1=k,len_2=k/k+1$ 的两个段不能的开头不能相邻，所有的段不能相交，问方案数。</li><li>我们可以在原序列中选出一些不相交的长为 $k+1$ 的段，然后考虑段中最后一个位置选/不选。可以发现，这样选出来不会出现 $len_1=k,len_2=k/k+1$ 的开头相邻的两个段。记长度为 $n$ 的连续段，这个算出来的生成函数为 $g_n(x)$。</li><li>但是有个问题，如果我选择了 $n-k+1..n$ 这个长度为 $k$ 的段，它不能通过 $n-k+1..n+1$ 这个段然后不选 $n+1$ 来得到，因为 $n+1$ 越界了。但是我们会发现，如果选了这个段之后，就必定不能选 $n-2k+1..n-k$ 这个长度为 $k$ 的段了，这个的生成函数恰好为 $-x^kg_{n-k}(x)$。</li><li>记 $f_n(x)$ 表示长度为 $n$ 的连续段的答案生成函数。有</li></ul><script type="math/tex; mode=display">f_n(x)=g_n(x)-x^kg_{n-k}(x)\\g_n(x)=\sum_{i=0}^{\lfloor \frac n{k+1}\rfloor} \binom{n-ik}{i} (x^{k+1}-x^k)^i</script><ul><li>暴力计算时间复杂度为 $\sum\limits_{i=0}^{\lfloor \frac n{k+1}\rfloor}i=O(\frac{n^2}{k^2})$。然后它就水过了，水过了。。。。</li><li>当然，算 $g_n$ 的这个可以优化，我们考虑通过分治来计算。先令 $val_i=\binom{n-ik}{i}$，则有 $ans(l,r)=\sum\limits_{i=l}^r val_i (x^{k+1}-x^k)^i=ans(l,mid)+ans(mid+1,r)\times(x^{k+1}-x^k)^{mid-l+1}$，其中 $(x^{k+1}-x^k)^y=(x-1)^yx^{ky}$，而计算 $(x-1)^y$ 的时间复杂度为 $O(y)$，故这个分治的总时间复杂度为 $T(l)=2T(\frac l2)+O(lk \log lk)$，而这里的 $l$ 为原先的 $\lfloor \frac n{k+1}\rfloor$，把 $k$ 提出来可得时间复杂度为 $O(k\times \frac nk\log^2 \frac nk+k\times\frac nk\log \frac nk\log k)$。设 $n,k$ 同阶，故总时间复杂度为 $O(n \log^2 n)$。</li><li>最后把这些生成函数乘起来，可以用分治 $NTT$，我这里用了一个类似于合并果子的东西，每次取次数最小的两个多项式乘起来。故总时间复杂度为 $O(m\log^2 m)$。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">pair</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> G=<span class="number">3</span>; <span class="keyword">const</span> <span class="keyword">int</span> invG=(Mod+<span class="number">1</span>)/<span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span> m,k,a[<span class="number">210000</span>],Ans[<span class="number">210000</span>];</span><br><span class="line"><span class="keyword">int</span> fac[<span class="number">210000</span>],inv[<span class="number">210000</span>],invfac[<span class="number">210000</span>];</span><br><span class="line">vec poly[<span class="number">210000</span>],v; <span class="keyword">int</span> cnt;</span><br><span class="line"><span class="built_in">priority_queue</span>&lt;pii,<span class="built_in">vector</span>&lt;pii&gt;,greater&lt;pii&gt; &gt; que;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123; <span class="keyword">return</span> x+y&gt;=Mod?x+y-Mod:x+y;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">dec</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123; <span class="keyword">return</span> x-y&lt;<span class="number">0</span>?x-y+Mod:x-y;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123; <span class="keyword">return</span> <span class="number">1l</span>l*x*y%Mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">Getchar</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">char</span> now[<span class="number">1</span>&lt;&lt;<span class="number">20</span>],*S,*T;</span><br><span class="line">    <span class="keyword">if</span> (T==S)&#123;</span><br><span class="line">        T=(S=now)+fread(now,<span class="number">1</span>,<span class="number">1</span>&lt;&lt;<span class="number">20</span>,<span class="built_in">stdin</span>);</span><br><span class="line">        <span class="keyword">if</span> (T==S) <span class="keyword">return</span> EOF;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> *S++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> ch=Getchar();</span><br><span class="line">    <span class="keyword">while</span> (ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">-1</span>;</span><br><span class="line">        ch=Getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (ch&lt;=<span class="string">&#x27;9&#x27;</span>&amp;&amp;ch&gt;=<span class="string">&#x27;0&#x27;</span>) x=x*<span class="number">10</span>+ch-<span class="string">&#x27;0&#x27;</span>,ch=Getchar();</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll x,ll a)</span></span>&#123;</span><br><span class="line">    ll res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (a)&#123;</span><br><span class="line">        <span class="keyword">if</span> (a&amp;<span class="number">1</span>) res=res*x%Mod;</span><br><span class="line">        x=x*x%Mod; a&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">getinv</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123; <span class="keyword">return</span> qpow(x,Mod<span class="number">-2</span>);&#125;</span><br><span class="line"><span class="keyword">int</span> rev[<span class="number">1100000</span>];</span><br><span class="line"><span class="keyword">int</span> GPow[<span class="number">2</span>][<span class="number">19</span>][<span class="number">1100000</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initG</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> p=<span class="number">1</span>;p&lt;=<span class="number">18</span>;p++)&#123;</span><br><span class="line">        <span class="keyword">int</span> buf1=qpow(G,(Mod<span class="number">-1</span>)/(<span class="number">1</span>&lt;&lt;p));</span><br><span class="line">        <span class="keyword">int</span> buf0=qpow(invG,(Mod<span class="number">-1</span>)/(<span class="number">1</span>&lt;&lt;p));</span><br><span class="line">        GPow[<span class="number">1</span>][p][<span class="number">0</span>]=GPow[<span class="number">0</span>][p][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;(<span class="number">1</span>&lt;&lt;p);i++)&#123;</span><br><span class="line">            GPow[<span class="number">1</span>][p][i]=mul(GPow[<span class="number">1</span>][p][i<span class="number">-1</span>],buf1);</span><br><span class="line">            GPow[<span class="number">0</span>][p][i]=mul(GPow[<span class="number">0</span>][p][i<span class="number">-1</span>],buf0);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">NTT</span><span class="params">(vec &amp;a,<span class="keyword">int</span> len,<span class="keyword">int</span> inv)</span></span>&#123;</span><br><span class="line">    a.resize(len);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">        <span class="keyword">if</span> (i&lt;rev[i]) swap(a[i],a[rev[i]]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> l=<span class="number">2</span>,cnt=<span class="number">1</span>;l&lt;=len;l&lt;&lt;=<span class="number">1</span>,cnt++)&#123;</span><br><span class="line">        <span class="keyword">int</span> m=l&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i+=l)&#123;</span><br><span class="line">            <span class="keyword">int</span> *buf=GPow[inv][cnt];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++,buf++) &#123;</span><br><span class="line">                <span class="keyword">int</span> x=a[i+j],y=<span class="number">1l</span>l*(*buf)*a[i+j+m]%Mod;</span><br><span class="line">                a[i+j]=add(x,y),a[i+j+m]=dec(x,y);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (inv!=<span class="number">1</span>)&#123;</span><br><span class="line">        ll inv=getinv(len);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++) a[i]=mul(a[i],inv);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mult</span><span class="params">(vec &amp;a,vec &amp;b)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n=(<span class="keyword">int</span>)a.size()+(<span class="keyword">int</span>)b.size()<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> bit=<span class="number">0</span>; <span class="keyword">while</span> ((<span class="number">1</span>&lt;&lt;bit)&lt;n) bit++;</span><br><span class="line">    <span class="keyword">int</span> len=<span class="number">1</span>&lt;&lt;bit;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++) rev[i]=(rev[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)&lt;&lt;(bit<span class="number">-1</span>));</span><br><span class="line">    NTT(a,len,<span class="number">1</span>); NTT(b,len,<span class="number">1</span>);</span><br><span class="line">    a.resize(len);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++) a[i]=mul(a[i],b[i]);</span><br><span class="line">    NTT(a,len,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vec tmp3;</span><br><span class="line"><span class="keyword">int</span> val[<span class="number">210000</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">C</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x&lt;y) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> mul(fac[x],mul(invfac[y],invfac[x-y]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">vec <span class="title">solve</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (l==r)&#123;</span><br><span class="line">vec tmp;</span><br><span class="line">tmp.resize(<span class="number">1</span>); tmp[<span class="number">0</span>]=val[l];</span><br><span class="line"><span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">vec tmp1=solve(l,mid),tmp2=solve(mid+<span class="number">1</span>,r);</span><br><span class="line"><span class="keyword">int</span> len=mid-l+<span class="number">1</span>,t=k*len;</span><br><span class="line">tmp3.clear(); tmp3.resize(t+len+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=len;i++)</span><br><span class="line"><span class="keyword">if</span> ((len-i)&amp;<span class="number">1</span>) tmp3[i+t]=dec(<span class="number">0</span>,C(len,i));</span><br><span class="line"><span class="keyword">else</span> tmp3[i+t]=C(len,i);</span><br><span class="line">mult(tmp3,tmp2);</span><br><span class="line">tmp3.resize(max(tmp3.size(),tmp1.size()));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;(<span class="keyword">int</span>)tmp1.size();i++) tmp3[i]=add(tmp3[i],tmp1[i]);</span><br><span class="line"><span class="keyword">return</span> tmp3;</span><br><span class="line">&#125;</span><br><span class="line">vec v1,v2;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getans</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (n&lt;k) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">int</span> i,s;</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>,s=<span class="number">0</span>;s+i&lt;=n;i++,s+=k) val[i+<span class="number">1</span>]=C(n-s,i);</span><br><span class="line">v1=solve(<span class="number">1</span>,i);</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>,s=k;s+i&lt;=n;i++,s+=k) val[i+<span class="number">1</span>]=C(n-s,i);</span><br><span class="line">v2=solve(<span class="number">1</span>,i);</span><br><span class="line">v1.resize(max(v1.size(),v2.size()+k));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;(<span class="keyword">int</span>)v2.size();i++) v1[i+k]=dec(v1[i+k],v2[i]);</span><br><span class="line"><span class="keyword">while</span> ((<span class="keyword">int</span>)v1.size()&gt;<span class="number">1</span>&amp;&amp;!v1.back()) v1.pop_back();</span><br><span class="line">poly[++cnt]=v1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">m=read(); k=read(); initG();</span><br><span class="line">fac[<span class="number">0</span>]=<span class="number">1</span>; <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m+<span class="number">1</span>;i++) fac[i]=mul(fac[i<span class="number">-1</span>],i);</span><br><span class="line">inv[<span class="number">1</span>]=<span class="number">1</span>; <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=m+<span class="number">1</span>;i++) inv[i]=mul((Mod-Mod/i),inv[Mod%i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) Ans[i]=add(Ans[i<span class="number">-1</span>],mul(m,inv[i]));</span><br><span class="line">invfac[<span class="number">0</span>]=<span class="number">1</span>; <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m+<span class="number">1</span>;i++) invfac[i]=mul(invfac[i<span class="number">-1</span>],inv[i]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) a[i]=read();</span><br><span class="line">sort(a+<span class="number">1</span>,a+m+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>,j=<span class="number">0</span>;i&lt;=m;i=j+<span class="number">1</span>)&#123;</span><br><span class="line">j=i;</span><br><span class="line"><span class="keyword">while</span> (j&lt;m&amp;&amp;a[j+<span class="number">1</span>]==a[j]+<span class="number">1</span>) j++;</span><br><span class="line">getans(j-i+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++) que.push(pii((<span class="keyword">int</span>)poly[i].size(),i));</span><br><span class="line"><span class="keyword">while</span> (que.size()&gt;<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">int</span> x=que.top().second; que.pop();</span><br><span class="line"><span class="keyword">int</span> y=que.top().second; que.pop();</span><br><span class="line">mult(poly[x],poly[y]);</span><br><span class="line">que.push(pii((<span class="keyword">int</span>)poly[x].size(),x));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> x=que.top().second,ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;(<span class="keyword">int</span>)poly[x].size()&amp;&amp;i&lt;=m;i++) ans=add(ans,mul(Ans[i],dec(<span class="number">0</span>,poly[x][i])));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Day2T3"><a href="#Day2T3" class="headerlink" title="Day2T3"></a>Day2T3</h2><ul><li>现在只会 $10pts$。</li><li>就是直接枚举 $b_1$，然后算出 $x$ 代入后面的方程，看 $b_i$ 符不符合条件，符合就输出结束。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">int</span> T,m,err;</span><br><span class="line">ll p,a[<span class="number">2100</span>],c[<span class="number">2100</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">add</span><span class="params">(ll x,ll y)</span></span>&#123;<span class="keyword">return</span> x+y&gt;=p?x+y-p:x+y;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">dec</span><span class="params">(ll x,ll y)</span></span>&#123;<span class="keyword">return</span> x-y&lt;<span class="number">0</span>?x-y+p:x-y;&#125;</span><br><span class="line"><span class="function">ll <span class="title">mul</span><span class="params">(ll x,ll a)</span></span>&#123;</span><br><span class="line">    ll res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (a)&#123;</span><br><span class="line">        <span class="keyword">if</span> (a&amp;<span class="number">1</span>) res=add(res,x);</span><br><span class="line">        x=add(x,x); a&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll x,ll a)</span></span>&#123;</span><br><span class="line">    ll res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (a)&#123;</span><br><span class="line">        <span class="keyword">if</span> (a&amp;<span class="number">1</span>) res=mul(res,x);</span><br><span class="line">        x=mul(x,x); a&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%lld%d&quot;</span>,&amp;m,&amp;p,&amp;err); err=(err+<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) <span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>,&amp;a[i],&amp;c[i]);</span><br><span class="line">        ll inva=qpow(a[<span class="number">1</span>],p<span class="number">-2</span>),x,y;</span><br><span class="line">        <span class="keyword">for</span> (ll t=c[<span class="number">1</span>]-err;t&lt;=c[<span class="number">1</span>]+err;t++)&#123;</span><br><span class="line">            x=t;</span><br><span class="line">            <span class="keyword">if</span> (x&lt;<span class="number">0</span>) x+=p;</span><br><span class="line">            <span class="keyword">if</span> (x&gt;=p) x-=p;</span><br><span class="line">            x=mul(x,inva);</span><br><span class="line">            <span class="keyword">bool</span> flag=<span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=m;i++)&#123;</span><br><span class="line">                y=dec(mul(a[i],x),c[i]);</span><br><span class="line">                <span class="keyword">if</span> (y&gt;=p) y-=p;</span><br><span class="line">                <span class="keyword">if</span> (y&gt;err&amp;&amp;y&lt;p-err)&#123;</span><br><span class="line">                    flag=<span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (flag)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,x);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Day1T1&quot;&gt;&lt;a href=&quot;#Day1T1&quot; class=&quot;headerlink&quot; title=&quot;Day1T1&quot;&gt;&lt;/a&gt;Day1T1&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;现在只会 $40pts$。&lt;/li&gt;
&lt;li&gt;首先记录原串所有前缀的双 $hash$ 值。&lt;/l</summary>
      
    
    
    
    <category term="ZJOI2020" scheme="http://hydd.cf/categories/ZJOI2020/"/>
    
    
  </entry>
  
  <entry>
    <title>20200713 五大强校联考题解</title>
    <link href="http://hydd.cf/2020/07/13/sol_17/"/>
    <id>http://hydd.cf/2020/07/13/sol_17/</id>
    <published>2020-07-12T16:00:00.000Z</published>
    <updated>2020-10-01T04:59:12.023Z</updated>
    
    <content type="html"><![CDATA[<h2 id="这把我们就遇到了高手了（master）"><a href="#这把我们就遇到了高手了（master）" class="headerlink" title="这把我们就遇到了高手了（master）"></a>这把我们就遇到了高手了（master）</h2><ul><li>首先，显然横纵坐标是可以分开的，我们将两维坐标拆开分别考虑。</li><li>一维的问题就变成了环，我们把环上的坐标看做一个集合 $S$。</li><li>可以发现一个性质：每个技能恰好把集合 $S$ 分成了两个子集 $A,B$， $A\cap B=\varnothing,A\cup B=S$ 。不妨称为里面或者外面。</li><li>我们发现对于任意一个点 $x$ ，假如所有技能包含了它，那么技能的释放是唯一的（因为集合不交）。</li><li>那么做法就很简单了，首先离散化，对于离散化后剩下的点，看包含他的技能是里面还是外面，记成一个 $0/1$ 串 $T$，求出这个点代表的原序列中的点的个数，用 $map[hash(T)]$ 记录点个数和，最后求 $map$ 中的最大值。</li><li>时间复杂度 $O(n\log n)$。可以使用 $unordered_map$ 来代替 $map$。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*********************************************************************</span></span><br><span class="line"><span class="comment">Problem:master</span></span><br><span class="line"><span class="comment">Author:hydd</span></span><br><span class="line"><span class="comment">Date:2020/7/13</span></span><br><span class="line"><span class="comment">*********************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">pair</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Mod1=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Mod2=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"><span class="keyword">int</span> n,w,h,ans1,ans2;</span><br><span class="line"><span class="keyword">int</span> cntx,x[<span class="number">1100000</span>],cnty,y[<span class="number">1100000</span>];</span><br><span class="line"><span class="keyword">int</span> pow1[<span class="number">1100000</span>],pow2[<span class="number">1100000</span>];</span><br><span class="line">pii hash_num;</span><br><span class="line"><span class="built_in">unordered_map</span>&lt;ll,<span class="keyword">int</span>&gt; mpa,mpb;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; veca[<span class="number">1100000</span>],vecb[<span class="number">1100000</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> l,r;</span><br><span class="line">&#125; a[<span class="number">1100000</span>],b[<span class="number">1100000</span>];</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">Getchar</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">char</span> now[<span class="number">1</span>&lt;&lt;<span class="number">20</span>],*S,*T;</span><br><span class="line">    <span class="keyword">if</span> (T==S)&#123;</span><br><span class="line">        T=(S=now)+fread(now,<span class="number">1</span>,<span class="number">1</span>&lt;&lt;<span class="number">20</span>,<span class="built_in">stdin</span>);</span><br><span class="line">        <span class="keyword">if</span> (T==S) <span class="keyword">return</span> EOF;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> *S++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> ch=Getchar();</span><br><span class="line">    <span class="keyword">while</span> (ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">-1</span>;</span><br><span class="line">        ch=Getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (ch&lt;=<span class="string">&#x27;9&#x27;</span>&amp;&amp;ch&gt;=<span class="string">&#x27;0&#x27;</span>) x=x*<span class="number">10</span>+ch-<span class="string">&#x27;0&#x27;</span>,ch=Getchar();</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">add1</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x+y&gt;=Mod1?x+y-Mod1:x+y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">add2</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x+y&gt;=Mod2?x+y-Mod2:x+y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">dec1</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x-y&lt;<span class="number">0</span>?x-y+Mod1:x-y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">dec2</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x-y&lt;<span class="number">0</span>?x-y+Mod2:x-y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x&gt;<span class="number">0</span>) hash_num=pii(add1(hash_num.first,pow1[x<span class="number">-1</span>]),add2(hash_num.second,pow2[x<span class="number">-1</span>]));</span><br><span class="line"><span class="keyword">else</span> hash_num=pii(dec1(hash_num.first,pow1[-x<span class="number">-1</span>]),dec2(hash_num.second,pow2[-x<span class="number">-1</span>]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">freopen(<span class="string">&quot;master.in&quot;</span>,<span class="string">&quot;r&quot;</span>,<span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">&quot;master.out&quot;</span>,<span class="string">&quot;w&quot;</span>,<span class="built_in">stdout</span>);</span><br><span class="line">pow1[<span class="number">0</span>]=<span class="number">1</span>; pow2[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">1000000</span>;i++) pow1[i]=pow1[i<span class="number">-1</span>]*<span class="number">3l</span>l%Mod1;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">1000000</span>;i++) pow2[i]=pow2[i<span class="number">-1</span>]*<span class="number">5l</span>l%Mod2;</span><br><span class="line">n=read(); w=read(); h=read();</span><br><span class="line">x[++cntx]=<span class="number">0</span>; y[++cnty]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=n;k++)&#123;</span><br><span class="line">a[k].l=read(); b[k].l=read();</span><br><span class="line">a[k].r=read(); b[k].r=read();</span><br><span class="line">x[++cntx]=a[k].l; y[++cnty]=b[k].l;</span><br><span class="line">x[++cntx]=a[k].r; y[++cnty]=b[k].r;</span><br><span class="line">&#125;</span><br><span class="line">sort(x+<span class="number">1</span>,x+cntx+<span class="number">1</span>); sort(y+<span class="number">1</span>,y+cnty+<span class="number">1</span>);</span><br><span class="line">cntx=unique(x+<span class="number">1</span>,x+cntx+<span class="number">1</span>)-x<span class="number">-1</span>;</span><br><span class="line">cnty=unique(y+<span class="number">1</span>,y+cnty+<span class="number">1</span>)-y<span class="number">-1</span>;</span><br><span class="line">x[cntx+<span class="number">1</span>]=w; y[cnty+<span class="number">1</span>]=h;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=n;k++)&#123;</span><br><span class="line">a[k].l=lower_bound(x+<span class="number">1</span>,x+cntx+<span class="number">1</span>,a[k].l)-x;</span><br><span class="line">a[k].r=lower_bound(x+<span class="number">1</span>,x+cntx+<span class="number">1</span>,a[k].r)-x;</span><br><span class="line">veca[a[k].l].push_back(k); veca[a[k].r].push_back(-k);</span><br><span class="line">b[k].l=lower_bound(y+<span class="number">1</span>,y+cnty+<span class="number">1</span>,b[k].l)-y;</span><br><span class="line">b[k].r=lower_bound(y+<span class="number">1</span>,y+cnty+<span class="number">1</span>,b[k].r)-y;</span><br><span class="line">vecb[b[k].l].push_back(k); vecb[b[k].r].push_back(-k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> tmp;</span><br><span class="line">hash_num=pii(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cntx;i++)&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;(<span class="keyword">int</span>)veca[i].size();j++) work(veca[i][j]);</span><br><span class="line">tmp=<span class="number">1l</span>l*hash_num.first*Mod2+hash_num.second;</span><br><span class="line">mpa[tmp]+=(x[i+<span class="number">1</span>]-x[i]);</span><br><span class="line">ans1=max(ans1,mpa[tmp]);</span><br><span class="line">&#125;</span><br><span class="line">hash_num=pii(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnty;i++)&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;(<span class="keyword">int</span>)vecb[i].size();j++) work(vecb[i][j]);</span><br><span class="line">tmp=<span class="number">1l</span>l*hash_num.first*Mod2+hash_num.second;</span><br><span class="line">mpb[tmp]+=(y[i+<span class="number">1</span>]-y[i]);</span><br><span class="line">ans2=max(ans2,mpb[tmp]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,<span class="number">1l</span>l*ans1*ans2);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ok起飞（okfly）"><a href="#ok起飞（okfly）" class="headerlink" title="ok起飞（okfly）"></a>ok起飞（okfly）</h2><ul><li>原题：$hdu6350$。</li><li>很容易证明，其实对图的限制就是仙人掌，部分分只是用来骗人的。</li><li>那么考虑从 $s$ 到 $t$ 的最大流。</li><li>若 $s,t$ 是一个环上的两点，那么最大流就会等于两条路径上的最短边的之和</li><li>我们将所有的环上最短边加到环上其他边上去，最大流不会改变。</li><li>所以我们让其余边加上最短边后去掉最短边，这样这个图就变成了一棵树</li><li>按边长从大到小排序，依次加入每一条边，然后将两个分量合并成一个点</li><li>取出的边长就是两个联通分量间的最大流，因为每次取出的边都比之前取出的更小。</li><li>求异或值就把每一位分开考虑，记联通分量的每个二进制位分别有多少个 $0/1$ 即可。</li><li>复杂度 $O(m\log w)$。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*********************************************************************</span></span><br><span class="line"><span class="comment">Problem:okfly</span></span><br><span class="line"><span class="comment">Author:hydd</span></span><br><span class="line"><span class="comment">Date:2020/7/13</span></span><br><span class="line"><span class="comment">*********************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">int</span> T,n,m,len[<span class="number">210000</span>],fa[<span class="number">210000</span>],c[<span class="number">210000</span>][<span class="number">32</span>][<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> edgenum,vet[<span class="number">410000</span>],val[<span class="number">410000</span>],Next[<span class="number">410000</span>],Head[<span class="number">210000</span>];</span><br><span class="line"><span class="keyword">int</span> tot;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> u,v,c;</span><br><span class="line">edge()&#123;&#125;</span><br><span class="line">edge(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> w)&#123; u=x; v=y; c=w;&#125;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> edge &amp;a) <span class="keyword">const</span>&#123; <span class="keyword">return</span> c&gt;a.c;&#125;</span><br><span class="line">&#125; tree[<span class="number">810000</span>];</span><br><span class="line"><span class="keyword">int</span> tmp[<span class="number">210000</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> cost)</span></span>&#123;</span><br><span class="line">vet[++edgenum]=v;</span><br><span class="line">val[edgenum]=cost;</span><br><span class="line">Next[edgenum]=Head[u];</span><br><span class="line">Head[u]=edgenum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cir</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> l)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x,cnt;</span><br><span class="line"></span><br><span class="line">x=v; cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (x!=u) tmp[++cnt]=len[x],x=fa[x];</span><br><span class="line">tmp[++cnt]=l;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> mn=<span class="number">1</span>,c=tmp[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=cnt;i++)</span><br><span class="line"><span class="keyword">if</span> (tmp[i]&lt;c) mn=i,c=tmp[i];</span><br><span class="line"></span><br><span class="line">x=v; cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (x!=u)&#123;</span><br><span class="line">cnt++;</span><br><span class="line"><span class="keyword">if</span> (mn!=cnt) tree[++tot]=edge(fa[x],x,len[x]+c); </span><br><span class="line">x=fa[x];</span><br><span class="line">&#125;</span><br><span class="line">cnt++;</span><br><span class="line"><span class="keyword">if</span> (mn!=cnt) tree[++tot]=edge(v,u,l+c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> dfn[<span class="number">210000</span>],low[<span class="number">210000</span>],dtime;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> f)</span></span>&#123;</span><br><span class="line">dfn[u]=low[u]=++dtime;</span><br><span class="line">fa[u]=f; <span class="keyword">int</span> v;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> e=Head[u];e;e=Next[e])&#123;</span><br><span class="line">v=vet[e];</span><br><span class="line"><span class="keyword">if</span> (v==f) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> (!dfn[v])&#123;</span><br><span class="line">len[v]=val[e];</span><br><span class="line">tarjan(v,u);</span><br><span class="line">low[u]=min(low[u],low[v]);</span><br><span class="line">&#125; <span class="keyword">else</span> low[u]=min(low[u],dfn[v]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> e=Head[u];e;e=Next[e])&#123;</span><br><span class="line">v=vet[e];</span><br><span class="line"><span class="keyword">if</span> (low[v]&gt;dfn[u]) tree[++tot]=edge(u,v,val[e]);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (dfn[v]&gt;dfn[u]&amp;&amp;fa[v]!=u) cir(u,v,val[e]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findset</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (u!=fa[u]) fa[u]=findset(fa[u]);</span><br><span class="line"><span class="keyword">return</span> fa[u];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">freopen(<span class="string">&quot;okfly.in&quot;</span>,<span class="string">&quot;r&quot;</span>,<span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">&quot;okfly.out&quot;</span>,<span class="string">&quot;w&quot;</span>,<span class="built_in">stdout</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;T);</span><br><span class="line"><span class="keyword">while</span> (T--)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m); edgenum=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) Head[i]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> u,v,cost;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;u,&amp;v,&amp;cost);</span><br><span class="line">addedge(u,v,cost); addedge(v,u,cost);</span><br><span class="line">&#125;</span><br><span class="line">dtime=<span class="number">0</span>; tot=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) fa[i]=<span class="number">0</span>,dfn[i]=<span class="number">0</span>;</span><br><span class="line">tarjan(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">fa[i]=i;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=<span class="number">30</span>;j++)&#123;</span><br><span class="line">c[i][j][<span class="number">0</span>]=((i&gt;&gt;j)&amp;<span class="number">1</span>)^<span class="number">1</span>;</span><br><span class="line">c[i][j][<span class="number">1</span>]=(i&gt;&gt;j)&amp;<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">sort(tree+<span class="number">1</span>,tree+tot+<span class="number">1</span>);</span><br><span class="line">ull ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=tot;i++)&#123;</span><br><span class="line">u=findset(tree[i].u);</span><br><span class="line">v=findset(tree[i].v);</span><br><span class="line">cost=tree[i].c;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=<span class="number">30</span>;j++)</span><br><span class="line"><span class="keyword">if</span> ((cost&gt;&gt;j)&amp;<span class="number">1</span>)&#123;</span><br><span class="line">ans+=(((ull)c[u][j][<span class="number">1</span>]*c[v][j][<span class="number">1</span>])&lt;&lt;j);</span><br><span class="line">ans+=(((ull)c[u][j][<span class="number">0</span>]*c[v][j][<span class="number">0</span>])&lt;&lt;j);</span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line">ans+=(((ull)c[u][j][<span class="number">0</span>]*c[v][j][<span class="number">1</span>])&lt;&lt;j);</span><br><span class="line">ans+=(((ull)c[u][j][<span class="number">1</span>]*c[v][j][<span class="number">0</span>])&lt;&lt;j);</span><br><span class="line">&#125;</span><br><span class="line">fa[v]=u;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=<span class="number">30</span>;j++)&#123;</span><br><span class="line">c[u][j][<span class="number">0</span>]+=c[v][j][<span class="number">0</span>];</span><br><span class="line">c[u][j][<span class="number">1</span>]+=c[v][j][<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%llu\n&quot;</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="这钵和餐厅配合的不是很好（restaurant）"><a href="#这钵和餐厅配合的不是很好（restaurant）" class="headerlink" title="这钵和餐厅配合的不是很好（restaurant）"></a>这钵和餐厅配合的不是很好（restaurant）</h2><ul><li>这题要求的是 $\displaystyle \sum_{\{p_i\}}\prod_{i=2}^n\tfrac{1}{\sum\limits_{j=1}^i b_j}$ 。</li><li>看看有没有什么组合意义。我们考虑这样的式子：$\displaystyle \sum_{\{p_i\}}\prod_{i=1}^n\tfrac{b_i}{\sum\limits_{j=1}^i b_j}$。</li><li>考虑 $i$ 从 $n$ 到 $1$ 枚举，可以看做选数然后删掉的过程，某个数被选到的概率即为它的权值占总共的比例。上面的式子相当于依次删去 $b_n,b_{b-1},\cdots,b_1$ 的概率。</li><li>如果我们固定 $b_1$，前面有个求和，就可以看成，对于每个 $b_1$（$a_{p_1}$），它是最后一个被删去的概率为多少（因为后面枚举了所有 $b_1$ 是最后一个被删去的情况）。</li><li>于是这个式子就相当于：$\displaystyle \sum_i P(a_i\texttt{ was last deleted})$。</li><li>现在我们考虑如何计算这个式子。设最后一个被删去的数为 $x$。</li><li>发现一个数是最后一个被删去的概率不太好算，但是它是第一个被删去的概率比较好算。</li><li>我们钦定 $x$ 被删之后有哪些数没被删，至少集合 $S$ 中的数比 $x$ 后删去。</li><li>很显然因为剩下的数随便，总概率为 $1$ ，无需考虑，只需要考虑 $S$ 中的数对 $x$ 的贡献。</li><li>记 $sum(S)$ 为集合 $S$ 中的数之和。那么 $x$ 比集合 $S$ 中的数先删去的概率为 $\frac{x}{x+sum(S)}$。</li><li>我们证明一下：<ul><li>首先我们做这样一个转化：如果一个数被删去，他不直接被移除。若某一步要删掉已经删去了的数，就重新再删一次。这样删去每个数的概率已经与原来相同。记 $A=\sum a_i$。</li><li>那么答案概率为 $P=\displaystyle \sum_{i=0}^\infty (1-\tfrac {sum(S)+x}A)^i\frac xA$。</li><li>有 $P-(1-\tfrac {sum(S)+x}A)P=\frac xA$，$P=\frac{\frac{x}{A}}{1-(1-\tfrac {sum(S)+x}A)}=\frac{\frac{x}{A}}{\frac{sum(S)+x}A}=\frac{x}{sum(S)+x}$。</li></ul></li><li>容斥一下可以发现，答案为 $\displaystyle \sum_S(-1)^{|S|} \tfrac{x}{x+sum(S_i)}$。</li><li>对于每个 $x$，容斥系数每一个元素不为 $x$ 的数的生成函数相乘的多项式系数，其中 $a_i$ 的生成函数为 $(1-t^{a_i})$。（$t$ 为自变量）</li><li>注意到 $\sum a_i$ 至多只有 $200000$，我们可以背包算出每个 $sum(S_i)$ 出现了多少次，顺便把容斥系数带上即可。时间复杂度 $O(n\sum a_i)$。</li></ul><ul><li>考虑如何解决原问题，就是在我们枚举第一个元素是 $x$ 后，它的答案对原问题的答案的贡献系数为$\frac {x}{\prod\limits_i b_i}$。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*********************************************************************</span></span><br><span class="line"><span class="comment">Problem:restaurant</span></span><br><span class="line"><span class="comment">Author:hydd</span></span><br><span class="line"><span class="comment">Date:2020/7/13</span></span><br><span class="line"><span class="comment">*********************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,a[<span class="number">210</span>];</span><br><span class="line"><span class="keyword">int</span> f[<span class="number">310000</span>],t[<span class="number">310000</span>];</span><br><span class="line">ll inv[<span class="number">310000</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">freopen(<span class="string">&quot;restaurant.in&quot;</span>,<span class="string">&quot;r&quot;</span>,<span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">&quot;restaurant.out&quot;</span>,<span class="string">&quot;w&quot;</span>,<span class="built_in">stdout</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">f[<span class="number">0</span>]=<span class="number">1</span>; m=<span class="number">0</span>;<span class="comment">//f(t)=1，m为最高次数</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;<span class="comment">//f(t)*=(1-t^a[i])</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=m;j&gt;=<span class="number">0</span>;j--)</span><br><span class="line">f[j+a[i]]=(f[j+a[i]]-f[j]+Mod)%Mod;</span><br><span class="line">m+=a[i];</span><br><span class="line">&#125;</span><br><span class="line">inv[<span class="number">1</span>]=<span class="number">1</span>; <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=m;i++) inv[i]=(Mod-Mod/i)*inv[Mod%i]%Mod;</span><br><span class="line">ll mul=<span class="number">1</span>; <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) mul=mul*inv[a[i]]%Mod;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=m;j++) t[j]=f[j];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=m-a[i];j++)</span><br><span class="line">t[j+a[i]]=(t[j+a[i]]+t[j])%Mod;</span><br><span class="line"><span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=m-a[i];j++)</span><br><span class="line">sum=(sum+<span class="number">1l</span>l*t[j]*inv[j+a[i]])%Mod;</span><br><span class="line">sum=<span class="number">1l</span>l*sum*a[i]%Mod;</span><br><span class="line">ans=(ans+<span class="number">1l</span>l*mul*a[i]%Mod*sum)%Mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;这把我们就遇到了高手了（master）&quot;&gt;&lt;a href=&quot;#这把我们就遇到了高手了（master）&quot; class=&quot;headerlink&quot; title=&quot;这把我们就遇到了高手了（master）&quot;&gt;&lt;/a&gt;这把我们就遇到了高手了（master）&lt;/h2&gt;&lt;ul&gt;
</summary>
      
    
    
    
    <category term="NOI模拟赛" scheme="http://hydd.cf/categories/NOI%E6%A8%A1%E6%8B%9F%E8%B5%9B/"/>
    
    
  </entry>
  
  <entry>
    <title>省选联考2020 题解</title>
    <link href="http://hydd.cf/2020/07/12/sol_18/"/>
    <id>http://hydd.cf/2020/07/12/sol_18/</id>
    <published>2020-07-11T16:00:00.000Z</published>
    <updated>2020-09-30T13:30:51.724Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Day1T1"><a href="#Day1T1" class="headerlink" title="Day1T1"></a>Day1T1</h2><ul><li>记$pre_{0/1},suf_{0/1}$分别表示两种战士的能量前/后缀和</li><li>要求 $\min\{pre_0[i],suf_1[i]\}$，而 $suf_1[i]=sum_1-pre_1[i]+val_1[i]$。</li><li>为了常数小我们考虑树状数组。</li><li>首先对温度离散化，因为答案一定是某个战士的温度（即在 $x$ 中出现过的）。</li><li>然后，我们从前往后考虑每个询问：<ul><li>首先，在树状数组上二分，求出满足 $pre_0[i]\leqslant suf_1[i]$ 最大的 $i$。此时，设 $pre_0[i]=v_0,pre_1[i]=v_1+val_1[i]$。</li><li>若 $v_0=v_1=0$，那么显然 $\texttt{Peace}$。</li><li>若 $v_0&gt;v_1$，那么 $i$ 变大后答案最多为 $v_1$，而此时答案为 $v_0$，故最终位置即为 $i$。</li><li>否则，就把 $i$ 再往后，使得答案为 $v_1$，且 $i$ 尽可能大。</li></ul></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> Q,op[<span class="number">2100000</span>],a[<span class="number">2100000</span>],x[<span class="number">2100000</span>],y[<span class="number">2100000</span>];</span><br><span class="line"><span class="keyword">int</span> s0[<span class="number">2100000</span>],s1[<span class="number">2100000</span>];</span><br><span class="line"><span class="keyword">int</span> sum0,sum1,tree0[<span class="number">2100000</span>],tree1[<span class="number">2100000</span>];</span><br><span class="line"><span class="keyword">int</span> cnt,num[<span class="number">2100000</span>];</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">Getchar</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> now[<span class="number">1</span>&lt;&lt;<span class="number">20</span>],*S,*T;</span><br><span class="line"><span class="keyword">if</span> (T==S)&#123;</span><br><span class="line">T=(S=now)+fread(now,<span class="number">1</span>,<span class="number">1</span>&lt;&lt;<span class="number">20</span>,<span class="built_in">stdin</span>);</span><br><span class="line"><span class="keyword">if</span> (T==S) <span class="keyword">return</span> EOF;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> *S++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> ch=Getchar();</span><br><span class="line"><span class="keyword">while</span> (ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">if</span> (ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">-1</span>;</span><br><span class="line">ch=Getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (ch&lt;=<span class="string">&#x27;9&#x27;</span>&amp;&amp;ch&gt;=<span class="string">&#x27;0&#x27;</span>) x=x*<span class="number">10</span>+ch-<span class="string">&#x27;0&#x27;</span>,ch=Getchar();</span><br><span class="line"><span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> *tree,<span class="keyword">int</span> x,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (;x&lt;=cnt;x+=x&amp;-x) tree[x]+=v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> p=<span class="number">0</span>,v,v0=<span class="number">0</span>,v1=sum1,new_p;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">20</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">new_p=p|(<span class="number">1</span>&lt;&lt;i);</span><br><span class="line"><span class="keyword">if</span> (new_p&lt;=cnt&amp;&amp;v0+tree0[new_p]&lt;=v1-tree1[new_p]+s1[new_p])&#123;</span><br><span class="line">p=new_p;</span><br><span class="line">v0+=tree0[p]; v1-=tree1[p];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!v0&amp;&amp;!v1) <span class="built_in">puts</span>(<span class="string">&quot;Peace&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">if</span> (v0&gt;v1) <span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>,num[p],(v0&lt;&lt;<span class="number">1</span>));</span><br><span class="line">   <span class="keyword">else</span>&#123;</span><br><span class="line">   p=<span class="number">0</span>; v=sum1-v1;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">20</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">new_p=p|(<span class="number">1</span>&lt;&lt;i);</span><br><span class="line"><span class="keyword">if</span> (new_p&lt;=cnt&amp;&amp;v&gt;=tree1[new_p])&#123;</span><br><span class="line">p=new_p;</span><br><span class="line">v-=tree1[p];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>,num[p+<span class="number">1</span>],(v1&lt;&lt;<span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">Q=read(); <span class="keyword">int</span> t;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=Q;i++)&#123;</span><br><span class="line">op[i]=read(); t=read();</span><br><span class="line"><span class="keyword">if</span> (op[i]==<span class="number">1</span>)&#123;</span><br><span class="line">a[i]=t;</span><br><span class="line">x[i]=read(); y[i]=read();</span><br><span class="line">num[++cnt]=x[i];</span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line">a[i]=a[t];</span><br><span class="line">x[i]=x[t]; y[i]=-y[t];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">sort(num+<span class="number">1</span>,num+cnt+<span class="number">1</span>);</span><br><span class="line">cnt=unique(num+<span class="number">1</span>,num+cnt+<span class="number">1</span>)-num<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=Q;i++) x[i]=lower_bound(num+<span class="number">1</span>,num+cnt+<span class="number">1</span>,x[i])-num;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=Q;i++)&#123;</span><br><span class="line"><span class="keyword">if</span> (!a[i]) add(tree0,x[i],y[i]),s0[x[i]]+=y[i],sum0+=y[i];</span><br><span class="line"><span class="keyword">else</span> add(tree1,x[i],y[i]),s1[x[i]]+=y[i],sum1+=y[i];</span><br><span class="line">solve();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Day1T2"><a href="#Day1T2" class="headerlink" title="Day1T2"></a>Day1T2</h2><ul><li>把普通多项式多项式转化成下降幂多项式的形式，$f(k)=\sum_{i=0}^mb_ix^\underline i$。</li><li>怎么转呢？利用 $\displaystyle x^n=\sum_{k=1}^nS(n,k)x^\underline k$ 。其中第二类斯特林数 $S(n,k)=S(n−1,k−1)+S(n−1,k)∗k$。</li></ul><script type="math/tex; mode=display">\sum_{k=0}^nf(k)\times x^k \times \binom{n}{k}=\sum_{k=0}^n\sum_{i=0}^{\min(m,k)}b_ik^\underline ix^k\binom{n}{k}\\=\sum_{i=0}^mb_in^\underline i\sum_{k=i}^{n}x^k\binom{n-i}{k-i}\\=\sum_{i=0}^mb_in^\underline ix^{i}(x+1)^{n-i}</script><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line">ll n,x,mod,m,ans;</span><br><span class="line">ll a[<span class="number">1100</span>],s[<span class="number">1100</span>][<span class="number">1100</span>];</span><br><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll x,ll a)</span></span>&#123;</span><br><span class="line">    ll res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (a)&#123;</span><br><span class="line">        <span class="keyword">if</span> (a&amp;<span class="number">1</span>) res=res*x%mod;</span><br><span class="line">        x=x*x%mod; a&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld%lld%lld&quot;</span>,&amp;n,&amp;x,&amp;mod,&amp;m);</span><br><span class="line">    <span class="keyword">for</span> (ll i=<span class="number">0</span>;i&lt;=m;i++) <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;a[i]);</span><br><span class="line">    s[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (ll i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">        <span class="keyword">for</span> (ll j=<span class="number">1</span>;j&lt;=i;j++)</span><br><span class="line">s[i][j]=(s[i<span class="number">-1</span>][j<span class="number">-1</span>]+<span class="number">1l</span>l*s[i<span class="number">-1</span>][j]*j)%mod;</span><br><span class="line">    <span class="keyword">for</span> (ll j=<span class="number">0</span>;j&lt;=m;j++)&#123;</span><br><span class="line">        ll tmp=<span class="number">1</span>,xp=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (ll i=<span class="number">0</span>;i&lt;=j;i++)&#123;</span><br><span class="line">            ans=(ans+<span class="number">1l</span>l*a[j]*s[j][i]%mod*tmp%mod*xp%mod*qpow(x+<span class="number">1</span>,n-i))%mod;</span><br><span class="line">            tmp=<span class="number">1l</span>l*tmp*(n-i)%mod; xp=<span class="number">1l</span>l*xp*x%mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Day1T3"><a href="#Day1T3" class="headerlink" title="Day1T3"></a>Day1T3</h2><h3 id="30pts"><a href="#30pts" class="headerlink" title="30pts"></a>30pts</h3><ul><li>强基交换定理：对于任意拟阵$M$，若$M$有两个不相同的基$A,B$，那么$\forall x\in A\setminus B,\exists y\in B\setminus A,s.t.A-\{x\}+\{y\},B-\{y\}+\{x\}$都是$M$的基。</li><li>我们只需考虑在 $A/B$ 中删去一个元素，加入新的元素的基和它们的大小关系，只需枚举 $A/B$ 中元素的价格，剩下的直接计算即可。</li></ul><h3 id="10pts"><a href="#10pts" class="headerlink" title="+10pts"></a>+10pts</h3><ul><li>原来的所有的 $\leqslant,\geqslant$ 的关系都变成 $=$ 的关系。</li><li>而点集 $U$ 的 $L_2$ 均值为其加权平均数 $\displaystyle \frac{\sum_{v_i\in U}w_iy_i}{\sum_{v_i\in U}w_i}$（导数易证，定义见高睿泉《浅谈保序回归问题》IOI2018国家集训队论文集）。并查集合并相等关系。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll INF=<span class="number">1l</span>l&lt;&lt;<span class="number">60</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,a[<span class="number">1100</span>],b[<span class="number">1100</span>],fa[<span class="number">1100</span>];</span><br><span class="line"><span class="keyword">int</span> v[<span class="number">1100</span>],x[<span class="number">1100</span>],minv,maxv;</span><br><span class="line"><span class="keyword">bool</span> trans[<span class="number">1100</span>][<span class="number">1100</span>],vis[<span class="number">1100</span>];</span><br><span class="line">ull c[<span class="number">1100</span>],num[<span class="number">64</span>]; ll ans;</span><br><span class="line"><span class="keyword">int</span> cnt; <span class="keyword">int</span> pos[<span class="number">1100</span>];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec[<span class="number">1100</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findset</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x!=fa[x]) fa[x]=findset(fa[x]);</span><br><span class="line"><span class="keyword">return</span> fa[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Union</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">x=findset(x); y=findset(y);</span><br><span class="line"><span class="keyword">if</span> (x!=y) fa[y]=x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(ull x)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">63</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line"><span class="keyword">if</span> ((x&gt;&gt;i)&amp;<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">if</span> (!num[i])&#123; cnt++; num[i]=x; <span class="keyword">break</span>;&#125;</span><br><span class="line">x^=num[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line">cnt=<span class="number">0</span>; <span class="built_in">memset</span>(num,<span class="number">0</span>,<span class="keyword">sizeof</span>(num));</span><br><span class="line"><span class="keyword">int</span> tmp=a[j];</span><br><span class="line">a[j]=i;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=m;k++) ins(c[a[k]]);</span><br><span class="line">a[j]=tmp;</span><br><span class="line"><span class="keyword">if</span> (cnt==m) trans[a[j]][i]=<span class="number">1</span>;<span class="comment">//x[a[j]]&lt;x[i]</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">work2</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line">cnt=<span class="number">0</span>; <span class="built_in">memset</span>(num,<span class="number">0</span>,<span class="keyword">sizeof</span>(num));</span><br><span class="line"><span class="keyword">int</span> tmp=b[j];</span><br><span class="line">b[j]=i;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=m;k++) ins(c[b[k]]);</span><br><span class="line">b[j]=tmp;</span><br><span class="line"><span class="keyword">if</span> (cnt==m) trans[i][b[j]]=<span class="number">1</span>;<span class="comment">//x[i]&lt;x[b[j]]</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (u&gt;cnt)&#123;</span><br><span class="line">ll sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">if</span> (vis[i]) sum+=<span class="number">1l</span>l*(x[i]-v[i])*(x[i]-v[i]);</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">int</span> L=minv,R=maxv;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=cnt;j++)&#123;</span><br><span class="line">                    <span class="keyword">if</span> (trans[pos[j]][i]) L=max(L,x[pos[j]]);</span><br><span class="line">                    <span class="keyword">if</span> (trans[i][pos[j]]) R=min(R,x[pos[j]]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (L&gt;R)&#123; sum=INF; <span class="keyword">break</span>;&#125;</span><br><span class="line"><span class="keyword">if</span> (v[i]&lt;L) sum+=<span class="number">1l</span>l*(L-v[i])*(L-v[i]);</span><br><span class="line">                <span class="keyword">if</span> (v[i]&gt;R) sum+=<span class="number">1l</span>l*(v[i]-R)*(v[i]-R);</span><br><span class="line">            &#125;</span><br><span class="line">        ans=min(ans,sum); <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> L=minv,R=maxv;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;u;i++)&#123;</span><br><span class="line"><span class="keyword">if</span> (trans[pos[i]][pos[u]]) L=max(L,x[pos[i]]);</span><br><span class="line"><span class="keyword">if</span> (trans[pos[u]][pos[i]]) R=min(R,x[pos[i]]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=L;i&lt;=R;i++)&#123; x[pos[u]]=i; dfs(u+<span class="number">1</span>);&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//freopen(&quot;shop.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line"><span class="comment">//freopen(&quot;shop.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">minv=<span class="number">1e6</span>; maxv=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">scanf</span>(<span class="string">&quot;%llu&quot;</span>,&amp;c[i]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;v[i]);</span><br><span class="line">minv=min(minv,v[i]); maxv=max(maxv,v[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">vis[a[i]]=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;b[i]);</span><br><span class="line">vis[b[i]]=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">work(); work2();</span><br><span class="line">cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">if</span> (vis[i]) pos[++cnt]=i;</span><br><span class="line"><span class="keyword">if</span> (cnt==m)&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) fa[i]=i;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line"><span class="keyword">if</span> (trans[i][j]) Union(i,j);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) vec[findset(i)].push_back(i);</span><br><span class="line">ll sum,sum1,sum2,now; <span class="keyword">int</span> tot;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">sum=<span class="number">0</span>; tot=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;(<span class="keyword">int</span>)vec[i].size();j++) sum+=v[vec[i][j]],tot++;</span><br><span class="line"><span class="keyword">if</span> (tot)&#123;</span><br><span class="line">now=(ll)(<span class="number">1.0</span>*sum/tot);</span><br><span class="line">sum1=<span class="number">0</span>; <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;(<span class="keyword">int</span>)vec[i].size();j++) sum1+=<span class="number">1l</span>l*(now-v[vec[i][j]])*(now-v[vec[i][j]]);</span><br><span class="line">now++;</span><br><span class="line">sum2=<span class="number">0</span>; <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;(<span class="keyword">int</span>)vec[i].size();j++) sum2+=<span class="number">1l</span>l*(now-v[vec[i][j]])*(now-v[vec[i][j]]);</span><br><span class="line">ans+=min(sum1,sum2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line">ans=INF; dfs(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="100pts"><a href="#100pts" class="headerlink" title="100pts"></a>100pts</h3><ul><li>这个做法要用到 $30pts$ 建的图。（建图方法要优化一下）</li><li>我们把图建出来之后，原题就变成了一个保序回归问题。</li><li>由论文的知识，若要求每个物品的价格为 $k/k+1$，这个问题的解。一定存在原问题的一<br>组最优解（每个物品的价格没有限制的最小回归代价）且可以通过向 $[k,k+1]$ 取整得到这个问题的最优解。 </li><li>那么，我们求出每个物品价格为 $k/k+1$ 时的答案，就能知道必有一组最优解，现在取 $k$ 的物品最终价格都 $\leq k$，取 $k+1$ 的物品最终价格都 $\geq k+1$。</li><li>将两边分开递归计算答案，它们之间显然是相互不影响的。</li><li>取 $k=mid=\frac{l+r}2$ 即可，用整体二分的思想，分成两部分，递归即可。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">const</span> ull INF=<span class="number">1l</span>l&lt;&lt;<span class="number">60</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> infdep=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,a[<span class="number">1100</span>],b[<span class="number">1100</span>],fa[<span class="number">1100</span>];</span><br><span class="line"><span class="keyword">int</span> v[<span class="number">1100</span>],x[<span class="number">1100</span>],minv,maxv;</span><br><span class="line"><span class="keyword">bool</span> trans[<span class="number">1100</span>][<span class="number">1100</span>],vis[<span class="number">1100</span>];</span><br><span class="line">ull c[<span class="number">1100</span>],num[<span class="number">64</span>]; ull ans[<span class="number">1100</span>];</span><br><span class="line"><span class="keyword">int</span> cnt; <span class="keyword">int</span> pos[<span class="number">1100</span>];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec[<span class="number">1100</span>],edge[<span class="number">1100</span>];</span><br><span class="line"><span class="keyword">namespace</span> dinic&#123;</span><br><span class="line"><span class="keyword">int</span> s,t,dep[<span class="number">1100</span>]; ull F[<span class="number">310000</span>];</span><br><span class="line"><span class="keyword">int</span> vis[<span class="number">1100</span>];<span class="comment">//是否到达过该点</span></span><br><span class="line"><span class="keyword">int</span> edgenum=<span class="number">1</span>,V[<span class="number">310000</span>],Next[<span class="number">310000</span>],Head[<span class="number">1100</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,ull f)</span></span>&#123;</span><br><span class="line">V[++edgenum]=v; F[edgenum]=f;</span><br><span class="line">Next[edgenum]=Head[u];</span><br><span class="line">Head[u]=edgenum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">link</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,ull f)</span></span>&#123;</span><br><span class="line">addedge(u,v,f);</span><br><span class="line">addedge(v,u,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=t;i++) vis[i]=<span class="literal">false</span>,dep[i]=infdep;</span><br><span class="line">dep[s]=<span class="number">0</span>;</span><br><span class="line">vis[s]=<span class="literal">true</span>;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; que;</span><br><span class="line">que.push(s);</span><br><span class="line"><span class="keyword">while</span> (!que.empty())&#123;</span><br><span class="line"><span class="keyword">int</span> u=que.front(); que.pop();</span><br><span class="line">vis[u]=<span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> e=Head[u];e;e=Next[e])&#123;</span><br><span class="line"><span class="keyword">int</span> d=V[e];</span><br><span class="line"><span class="keyword">if</span> (dep[d]&gt;dep[u]+<span class="number">1</span>&amp;&amp;F[e])&#123;</span><br><span class="line">dep[d]=dep[u]+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (!vis[d])&#123;</span><br><span class="line">que.push(d);</span><br><span class="line">vis[d]=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dep[t]&lt;infdep;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ull <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,ull flow)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (u==t)&#123; </span><br><span class="line">vis[t]=<span class="literal">true</span>; <span class="comment">//maxflow+=flow;</span></span><br><span class="line"><span class="keyword">return</span> flow;</span><br><span class="line">&#125;</span><br><span class="line">ull used=<span class="number">0</span>;</span><br><span class="line">vis[u]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> e=Head[u];e;e=Next[e])&#123;</span><br><span class="line"><span class="keyword">int</span> d=V[e];</span><br><span class="line"><span class="keyword">if</span> ((!vis[d]||d==t)&amp;&amp;F[e]&amp;&amp;dep[d]==dep[u]+<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">int</span> minflow=dfs(d,min(flow-used,F[e]));</span><br><span class="line"><span class="keyword">if</span> (minflow!=<span class="number">0</span>) F[e]-=minflow,F[e^<span class="number">1</span>]+=minflow,used+=minflow;</span><br><span class="line"><span class="keyword">if</span> (used==flow) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> used;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">maxflow</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span> (bfs())&#123;</span><br><span class="line">vis[t]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (vis[t])&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=t;i++) vis[i]=<span class="literal">false</span>;</span><br><span class="line">dfs(s,INF); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line">s=m+<span class="number">1</span>; t=m+<span class="number">2</span>;</span><br><span class="line">edgenum=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=t;i++) Head[i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ull <span class="title">sqr</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x&lt;<span class="number">0</span>) x=-x;</span><br><span class="line"><span class="keyword">return</span> (ull)x*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(ull x)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">63</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line"><span class="keyword">if</span> ((x&gt;&gt;i)&amp;<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">if</span> (!num[i])&#123; cnt++; num[i]=x; <span class="keyword">break</span>;&#125;</span><br><span class="line">x^=num[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">couldins</span><span class="params">(ull x)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">63</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line"><span class="keyword">if</span> ((x&gt;&gt;i)&amp;<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">if</span> (!num[i]) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">x^=num[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">/*for (int i=1;i&lt;=n;i++)</span></span><br><span class="line"><span class="comment">for (int j=1;j&lt;=m;j++)&#123;</span></span><br><span class="line"><span class="comment">if (a[j]==i) continue;</span></span><br><span class="line"><span class="comment">cnt=0; memset(num,0,sizeof(num));</span></span><br><span class="line"><span class="comment">int tmp=a[j];</span></span><br><span class="line"><span class="comment">a[j]=i;</span></span><br><span class="line"><span class="comment">for (int k=1;k&lt;=m;k++) ins(c[a[k]]);</span></span><br><span class="line"><span class="comment">a[j]=tmp;</span></span><br><span class="line"><span class="comment">if (cnt==m) edge[i].push_back(a[j]); //x[a[j]]&lt;x[i]</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line">cnt=<span class="number">0</span>; <span class="built_in">memset</span>(num,<span class="number">0</span>,<span class="keyword">sizeof</span>(num));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=m;k++)</span><br><span class="line"><span class="keyword">if</span> (k!=j) ins(c[a[k]]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span> (a[j]==i) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> (cnt+couldins(c[i])==m) edge[i].push_back(a[j]); <span class="comment">//x[a[j]]&lt;x[i]</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">work2</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line">cnt=<span class="number">0</span>; <span class="built_in">memset</span>(num,<span class="number">0</span>,<span class="keyword">sizeof</span>(num));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=m;k++)</span><br><span class="line"><span class="keyword">if</span> (k!=j) ins(c[b[k]]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span> (b[j]==i) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> (cnt+couldins(c[i])==m) edge[b[j]].push_back(i); <span class="comment">//x[i]&lt;x[b[j]]</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> p[<span class="number">1100</span>],q[<span class="number">1100</span>],id[<span class="number">1100</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> L,<span class="keyword">int</span> R)</span></span>&#123; <span class="comment">//x[a]&lt;=x[b],\sum (x[i]-v[i])^2</span></span><br><span class="line"><span class="keyword">if</span> (l&gt;r) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span> (L==R)&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=l;i&lt;=r;i++) ans[p[i]]=L;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid=(L+R)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">dinic::init(r-l+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=l;i&lt;=r;i++) id[p[i]]=i-l+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> u;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=l;i&lt;=r;i++)&#123;</span><br><span class="line">u=p[i];</span><br><span class="line"><span class="keyword">if</span> (v[u]&gt;mid) dinic::link(i-l+<span class="number">1</span>,dinic::t,sqr(v[u]-mid)-sqr(v[u]-mid<span class="number">-1</span>));</span><br><span class="line"><span class="keyword">else</span> dinic::link(dinic::s,i-l+<span class="number">1</span>,sqr(mid+<span class="number">1</span>-v[u])-sqr(mid-v[u]));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j:edge[u])</span><br><span class="line"><span class="keyword">if</span> (id[j]) dinic::link(i-l+<span class="number">1</span>,id[j],INF);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=l;i&lt;=r;i++) id[p[i]]=<span class="number">0</span>;</span><br><span class="line">dinic::maxflow();</span><br><span class="line"><span class="keyword">int</span> x=l,y=r;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=l;i&lt;=r;i++)</span><br><span class="line"><span class="keyword">if</span> (dinic::dep[i-l+<span class="number">1</span>]!=infdep) q[x++]=p[i];</span><br><span class="line"><span class="keyword">else</span> q[y--]=p[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=l;i&lt;=r;i++) p[i]=q[i];</span><br><span class="line">solve(l,x<span class="number">-1</span>,L,mid); solve(y+<span class="number">1</span>,r,mid+<span class="number">1</span>,R);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//freopen(&quot;shop.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line"><span class="comment">//freopen(&quot;shop.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">minv=<span class="number">1e6</span>; maxv=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">scanf</span>(<span class="string">&quot;%llu&quot;</span>,&amp;c[i]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;v[i]);</span><br><span class="line">minv=min(minv,v[i]); maxv=max(maxv,v[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">vis[a[i]]=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;b[i]);</span><br><span class="line">vis[b[i]]=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">work(); work2();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) p[i]=i;</span><br><span class="line">solve(<span class="number">1</span>,n,minv,maxv);</span><br><span class="line">ull sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) sum+=sqr(v[i]-ans[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%llu\n&quot;</span>,sum);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Day2T1"><a href="#Day2T1" class="headerlink" title="Day2T1"></a>Day2T1</h2><ul><li>状压dp即可，将答案按系数分开计算。</li><li>为了节省空间，求出入边的数量需要由一种奇怪的方法求，详见代码。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,k,SL[<span class="number">110</span>],SR[<span class="number">110</span>],f[<span class="number">8500000</span>];</span><br><span class="line"><span class="keyword">int</span> cnt[<span class="number">110</span>][<span class="number">110</span>],Log2[<span class="number">8500000</span>],tot[<span class="number">8500000</span>];</span><br><span class="line"><span class="keyword">int</span> top,st[<span class="number">8500000</span>],L[<span class="number">110</span>][<span class="number">110</span>],R[<span class="number">110</span>][<span class="number">110</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;n,&amp;m,&amp;k);</span><br><span class="line"><span class="keyword">int</span> pre,now;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++,pre=now)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;now); now--;</span><br><span class="line"><span class="keyword">if</span> (i&gt;<span class="number">1</span>&amp;&amp;now!=pre)&#123; cnt[pre][now]++; SL[pre]++; SR[now]++;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> upperlim=(<span class="number">1</span>&lt;&lt;m)<span class="number">-1</span>; f[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=upperlim;i++) f[i]=INF;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++) Log2[<span class="number">1</span>&lt;&lt;i]=i;</span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> s=<span class="number">0</span>;s&lt;=upperlim;s++)&#123;</span><br><span class="line"><span class="keyword">if</span> (s)&#123;</span><br><span class="line"><span class="keyword">while</span> (top&amp;&amp;(st[top]&amp;s)!=st[top]) top--;</span><br><span class="line">x=Log2[s&amp;-s]; st[++top]=s;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">L[top][i]=L[top<span class="number">-1</span>][i]+cnt[i][x];</span><br><span class="line">R[top][i]=R[top<span class="number">-1</span>][i]+cnt[x][i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">//L,R算出的为i到s的边数与s到i的边数</span></span><br><span class="line">tot[s]=tot[s&gt;&gt;<span class="number">1</span>]+(s&amp;<span class="number">1</span>); x=tot[s]+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line"><span class="keyword">if</span> (!(s&amp;(<span class="number">1</span>&lt;&lt;i)))</span><br><span class="line">f[s|(<span class="number">1</span>&lt;&lt;i)]=min(f[s|(<span class="number">1</span>&lt;&lt;i)],f[s]+x*(L[top][i]*k+R[top][i]-(SL[i]-L[top][i])+(SR[i]-R[top][i])*k));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,f[upperlim]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Day2T2"><a href="#Day2T2" class="headerlink" title="Day2T2"></a>Day2T2</h2><ul><li>只需要实现一个数据结构维护一个无序数集，支持全部+1、插入一个数、合并、查询异或和。把二进制位反过来建$\texttt{01-Trie}$即可。</li><li>$\texttt{01-Trie}$ 合并的复杂度等同于线段树合并的复杂度。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,val[<span class="number">530000</span>],ch[<span class="number">21000000</span>][<span class="number">2</span>],tot[<span class="number">21000000</span>],rt[<span class="number">530000</span>],cnt;</span><br><span class="line"><span class="keyword">int</span> edgenum=<span class="number">1</span>,vet[<span class="number">530000</span>],Next[<span class="number">530000</span>],Head[<span class="number">530000</span>];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">vet[++edgenum]=v;</span><br><span class="line">Next[edgenum]=Head[u];</span><br><span class="line">Head[u]=edgenum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> v,<span class="keyword">int</span> d)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!x) x=++cnt;</span><br><span class="line">tot[x]^=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (d&gt;<span class="number">20</span>) <span class="keyword">return</span>;</span><br><span class="line">insert(ch[x][(v&gt;&gt;d)&amp;<span class="number">1</span>],v,d+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!x||!y) <span class="keyword">return</span> x|y;</span><br><span class="line">tot[x]^=tot[y];</span><br><span class="line">ch[x][<span class="number">0</span>]=merge(ch[x][<span class="number">0</span>],ch[y][<span class="number">0</span>]);</span><br><span class="line">ch[x][<span class="number">1</span>]=merge(ch[x][<span class="number">1</span>],ch[y][<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">insert(rt[u],val[u],<span class="number">0</span>);</span><br><span class="line"><span class="keyword">int</span> v;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> e=Head[u];e;e=Next[e])&#123;</span><br><span class="line">v=vet[e]; dfs(v);</span><br><span class="line"><span class="keyword">int</span> x=rt[v];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">20</span>;i++)&#123;</span><br><span class="line">val[u]^=tot[x]&lt;&lt;i;</span><br><span class="line">swap(ch[x][<span class="number">0</span>],ch[x][<span class="number">1</span>]);</span><br><span class="line">x=ch[x][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line">rt[u]=merge(rt[u],rt[v]);</span><br><span class="line">val[u]^=val[v];</span><br><span class="line">&#125;</span><br><span class="line">ans+=val[u];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n); <span class="keyword">int</span> f;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;val[i]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;f);</span><br><span class="line">addedge(f,i);</span><br><span class="line">&#125;</span><br><span class="line">dfs(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Day2T3"><a href="#Day2T3" class="headerlink" title="Day2T3"></a>Day2T3</h2><ul><li>求所有生成树边权和：令每条边边权为 $1+w_ix$ ，然后在模$x^2$下做普通矩阵树即可，时间复杂度$O(n^3)$。</li><li>莫比乌斯反演，可以发现答案为$\sum_d\varphi(d)\times [\mbox{所有边都是}d\mbox{的倍数的生成树的边权和}]$，看上去需要做$\max\{w_i\}$次求行列式，但考虑到参与构成此部分的图中边的总数不超过 $144m$，而一张少于$n-1$条边的图中一定不包含生成树，故求行列式的次数其实只有$O(\frac{144m}{n-1})$次，总复杂度可以估计为$O(144n^4)$。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,ans,u[<span class="number">1100</span>],v[<span class="number">1100</span>],w[<span class="number">1100</span>]; <span class="keyword">int</span> tot[<span class="number">210000</span>];</span><br><span class="line"><span class="keyword">int</span> cnt,phi[<span class="number">210000</span>],p[<span class="number">210000</span>]; <span class="keyword">bool</span> vis[<span class="number">210000</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> a,b;</span><br><span class="line">node(<span class="keyword">int</span> x=<span class="number">0</span>,<span class="keyword">int</span> y=<span class="number">0</span>)&#123; a=x; b=y;&#125;</span><br><span class="line">node <span class="keyword">operator</span>+(<span class="keyword">const</span> node &amp;x) <span class="keyword">const</span>&#123; <span class="keyword">return</span> node((a+x.a)%Mod,(b+x.b)%Mod);&#125;</span><br><span class="line">node <span class="keyword">operator</span>-(<span class="keyword">const</span> node &amp;x) <span class="keyword">const</span>&#123; <span class="keyword">return</span> node((a-x.a+Mod)%Mod,(b-x.b+Mod)%Mod);&#125;</span><br><span class="line">node <span class="keyword">operator</span>*(<span class="keyword">const</span> node &amp;x) <span class="keyword">const</span>&#123; <span class="keyword">return</span> node(<span class="number">1l</span>l*a*x.a%Mod,(<span class="number">1l</span>l*a*x.b+<span class="number">1l</span>l*b*x.a)%Mod);&#125;</span><br><span class="line">&#125; A[<span class="number">32</span>][<span class="number">32</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (a)&#123;</span><br><span class="line">        <span class="keyword">if</span> (a&amp;<span class="number">1</span>) res=<span class="number">1l</span>l*res*x%Mod;</span><br><span class="line">        x=<span class="number">1l</span>l*x*x%Mod; a&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">node <span class="title">getinv</span><span class="params">(<span class="keyword">const</span> node x)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> inv=qpow(x.a,Mod<span class="number">-2</span>);</span><br><span class="line"><span class="keyword">return</span> node(inv,<span class="number">1l</span>l*(Mod-x.b)%Mod*inv%Mod*inv%Mod);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">phi[<span class="number">1</span>]=<span class="number">1</span>; vis[<span class="number">1</span>]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span> (!vis[i]) p[++cnt]=i,phi[i]=i<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;i*p[j]&lt;=n;j++)&#123;</span><br><span class="line">vis[i*p[j]]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span> (i%p[j]==<span class="number">0</span>)&#123;</span><br><span class="line">phi[i*p[j]]=phi[i]*p[j];</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">phi[i*p[j]]=phi[i]*(p[j]<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gauss</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">node res=node(<span class="number">1</span>,<span class="number">0</span>); <span class="keyword">bool</span> rev=<span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span> (!A[i][i].a)&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line"><span class="keyword">if</span> (A[j][i].a)&#123;</span><br><span class="line">rev=!rev;</span><br><span class="line">swap(A[i],A[j]);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">node inv=getinv(A[i][i]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">node tmp=A[j][i]*inv;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k=i;k&lt;=n;k++) A[j][k]=A[j][k]-tmp*A[i][k];</span><br><span class="line">&#125;</span><br><span class="line">res=res*A[i][i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (rev) <span class="keyword">return</span> (Mod-res.b)%Mod;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> res.b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getans</span><span class="params">(<span class="keyword">int</span> val)</span></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(A,<span class="number">0</span>,<span class="keyword">sizeof</span>(A));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="keyword">if</span> (w[i]%val) <span class="keyword">continue</span>;</span><br><span class="line">A[u[i]][u[i]]=A[u[i]][u[i]]+node(<span class="number">1</span>,w[i]);</span><br><span class="line">A[v[i]][v[i]]=A[v[i]][v[i]]+node(<span class="number">1</span>,w[i]);</span><br><span class="line">A[u[i]][v[i]]=A[u[i]][v[i]]-node(<span class="number">1</span>,w[i]);</span><br><span class="line">A[v[i]][u[i]]=A[v[i]][u[i]]-node(<span class="number">1</span>,w[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> gauss(n<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">gettot</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i*i&lt;=x;i++)&#123;</span><br><span class="line"><span class="keyword">if</span> (x%i==<span class="number">0</span>)&#123;</span><br><span class="line">tot[i]++;</span><br><span class="line"><span class="keyword">if</span> (i*i!=x) tot[x/i]++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;u[i],&amp;v[i],&amp;w[i]);</span><br><span class="line">gettot(w[i]);</span><br><span class="line">&#125;</span><br><span class="line">init(<span class="number">152501</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">152501</span>;i++)&#123;</span><br><span class="line"><span class="keyword">if</span> (tot[i]&lt;n<span class="number">-1</span>) <span class="keyword">continue</span>;</span><br><span class="line">ans=(ans+<span class="number">1l</span>l*phi[i]*getans(i))%Mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Day1T1&quot;&gt;&lt;a href=&quot;#Day1T1&quot; class=&quot;headerlink&quot; title=&quot;Day1T1&quot;&gt;&lt;/a&gt;Day1T1&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;记$pre_{0/1},suf_{0/1}$分别表示两种战士的能量前/后缀和&lt;/li&gt;
&lt;li&gt;</summary>
      
    
    
    
    <category term="省选联考2020" scheme="http://hydd.cf/categories/%E7%9C%81%E9%80%89%E8%81%94%E8%80%832020/"/>
    
    
  </entry>
  
</feed>
